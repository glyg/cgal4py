/* Generated by Cython 0.28.3 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "NPY_NO_DEPRECATED_API",
                null
            ]
        ],
        "depends": [
            "/home/guillaume/miniconda3/envs/py36/lib/python3.6/site-packages/numpy/core/include/numpy/arrayobject.h",
            "/home/guillaume/miniconda3/envs/py36/lib/python3.6/site-packages/numpy/core/include/numpy/ufuncobject.h",
            "cgal4py/delaunay/c_tools.hpp"
        ],
        "extra_compile_args": [
            "-std=gnu++11"
        ],
        "include_dirs": [
            "./cgal4py/delaunay",
            "cgal4py/delaunay",
            "/home/guillaume/miniconda3/envs/py36/lib/python3.6/site-packages/numpy/core/include",
            "/home/guillaume/miniconda3/envs/py36/include",
            "/usr/include/eigen3",
            "/usr/include/boost"
        ],
        "language": "c++",
        "name": "cgal4py.delaunay.tools",
        "sources": [
            "cgal4py/delaunay/tools.pyx"
        ]
    },
    "module_name": "cgal4py.delaunay.tools"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_28_3"
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0; // PyThread_create_key reports success always
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif // TSS (Thread Specific Storage) API
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__cgal4py__delaunay__tools
#define __PYX_HAVE_API__cgal4py__delaunay__tools
/* Early includes */
#include <string.h>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <utility>
#include <stdint.h>
#include "c_tools.hpp"
#include "pythread.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "cgal4py/delaunay/tools.pyx",
  "stringsource",
  "__init__.pxd",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};
/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif


/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":730
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":731
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":732
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":733
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":737
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":738
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":739
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":740
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":744
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":745
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":754
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":755
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":756
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":758
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":759
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":760
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":762
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":763
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":765
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":766
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":767
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32;
struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64;
struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32;
struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64;

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":769
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":770
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":771
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":773
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "cgal4py/delaunay/tools.pxd":76
 *         void add_inf()
 * 
 * ctypedef SerializedLeaf[uint32_t] sLeaf32             # <<<<<<<<<<<<<<
 * ctypedef SerializedLeaf[uint64_t] sLeaf64
 * ctypedef vector[sLeaf32] sLeaves32
 */
typedef SerializedLeaf<uint32_t>  __pyx_t_7cgal4py_8delaunay_5tools_sLeaf32;

/* "cgal4py/delaunay/tools.pxd":77
 * 
 * ctypedef SerializedLeaf[uint32_t] sLeaf32
 * ctypedef SerializedLeaf[uint64_t] sLeaf64             # <<<<<<<<<<<<<<
 * ctypedef vector[sLeaf32] sLeaves32
 * ctypedef vector[sLeaf64] sLeaves64
 */
typedef SerializedLeaf<uint64_t>  __pyx_t_7cgal4py_8delaunay_5tools_sLeaf64;

/* "cgal4py/delaunay/tools.pxd":78
 * ctypedef SerializedLeaf[uint32_t] sLeaf32
 * ctypedef SerializedLeaf[uint64_t] sLeaf64
 * ctypedef vector[sLeaf32] sLeaves32             # <<<<<<<<<<<<<<
 * ctypedef vector[sLeaf64] sLeaves64
 */
typedef std::vector<__pyx_t_7cgal4py_8delaunay_5tools_sLeaf32>  __pyx_t_7cgal4py_8delaunay_5tools_sLeaves32;

/* "cgal4py/delaunay/tools.pxd":79
 * ctypedef SerializedLeaf[uint64_t] sLeaf64
 * ctypedef vector[sLeaf32] sLeaves32
 * ctypedef vector[sLeaf64] sLeaves64             # <<<<<<<<<<<<<<
 */
typedef std::vector<__pyx_t_7cgal4py_8delaunay_5tools_sLeaf64>  __pyx_t_7cgal4py_8delaunay_5tools_sLeaves64;

/* "cgal4py/delaunay/tools.pyx":1034
 *     return ncells
 * 
 * cdef class SerializedLeaf32:             # <<<<<<<<<<<<<<
 *     r"""Wrapper class for C++ SerializedLeaf class with 32bit cell indices.
 * 
 */
struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 {
  PyObject_HEAD
  SerializedLeaf<uint32_t>  *SL;
  int id;
  __pyx_t_5numpy_uint32_t ndim;
  __pyx_t_5numpy_int64_t ncells;
  __pyx_t_5numpy_uint32_t idx_inf;
  PyObject *verts;
  PyObject *neigh;
  PyObject *sort_verts;
  PyObject *sort_cells;
  __pyx_t_5numpy_uint64_t idx_start;
  __pyx_t_5numpy_uint64_t idx_stop;
};


/* "cgal4py/delaunay/tools.pyx":1108
 *         self.SL.cleanup()
 * 
 * cdef class SerializedLeaf64:             # <<<<<<<<<<<<<<
 *     r"""Wrapper class for C++ SerializedLeaf class with 64bit cell indices.
 * 
 */
struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 {
  PyObject_HEAD
  SerializedLeaf<uint64_t>  *SL;
  int id;
  __pyx_t_5numpy_uint32_t ndim;
  __pyx_t_5numpy_int64_t ncells;
  __pyx_t_5numpy_uint64_t idx_inf;
  PyObject *verts;
  PyObject *neigh;
  PyObject *sort_verts;
  PyObject *sort_cells;
  __pyx_t_5numpy_uint64_t idx_start;
  __pyx_t_5numpy_uint64_t idx_stop;
};


/* "cgal4py/delaunay/tools.pyx":1182
 *         self.SL.cleanup()
 * 
 * cdef class ConsolidatedLeaves32:             # <<<<<<<<<<<<<<
 *     r"""Wrapper class for C++ ConsolidatedLeaves class with 32bit cell indices.
 * 
 */
struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 {
  PyObject_HEAD
  struct __pyx_vtabstruct_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_vtab;
  ConsolidatedLeaves<uint32_t>  *CL;
  __pyx_t_5numpy_uint32_t ndim;
  __pyx_t_5numpy_uint32_t idx_inf;
  __pyx_t_5numpy_int64_t max_ncells;
  PyObject *verts;
  PyObject *neigh;
};


/* "cgal4py/delaunay/tools.pyx":1282
 * 
 * 
 * cdef class ConsolidatedLeaves64:             # <<<<<<<<<<<<<<
 *     r"""Wrapper class for C++ ConsolidatedLeaves class with 64bit cell indices.
 * 
 */
struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 {
  PyObject_HEAD
  struct __pyx_vtabstruct_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_vtab;
  ConsolidatedLeaves<uint64_t>  *CL;
  __pyx_t_5numpy_uint32_t ndim;
  __pyx_t_5numpy_uint64_t idx_inf;
  __pyx_t_5numpy_int64_t max_ncells;
  PyObject *verts;
  PyObject *neigh;
};



/* "cgal4py/delaunay/tools.pyx":1182
 *         self.SL.cleanup()
 * 
 * cdef class ConsolidatedLeaves32:             # <<<<<<<<<<<<<<
 *     r"""Wrapper class for C++ ConsolidatedLeaves class with 32bit cell indices.
 * 
 */

struct __pyx_vtabstruct_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 {
  void (*_add_leaf32)(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *, struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *);
  void (*_add_leaf64)(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *, struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *);
};
static struct __pyx_vtabstruct_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_vtabptr_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32;


/* "cgal4py/delaunay/tools.pyx":1282
 * 
 * 
 * cdef class ConsolidatedLeaves64:             # <<<<<<<<<<<<<<
 *     r"""Wrapper class for C++ ConsolidatedLeaves class with 64bit cell indices.
 * 
 */

struct __pyx_vtabstruct_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 {
  void (*_add_leaf32)(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *, struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *);
  void (*_add_leaf64)(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *, struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *);
};
static struct __pyx_vtabstruct_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_vtabptr_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* BufferGetAndValidate.proto */
#define __Pyx_GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack)\
    ((obj == Py_None || obj == NULL) ?\
    (__Pyx_ZeroBuffer(buf), 0) :\
    __Pyx__GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack))
static int  __Pyx__GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static void __Pyx_ZeroBuffer(Py_buffer* buf);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static Py_ssize_t __Pyx_minusones[] = { -1, -1, -1, -1, -1, -1, -1, -1 };
static Py_ssize_t __Pyx_zeros[] = { 0, 0, 0, 0, 0, 0, 0, 0 };

#define __Pyx_BufPtrStrided1d(type, buf, i0, s0) (type)((char*)buf + i0 * s0)
/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

#define __Pyx_BufPtrStrided2d(type, buf, i0, s0, i1, s1) (type)((char*)buf + i0 * s0 + i1 * s1)
/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_EqObjC(op1, op2, intval, inplace)\
    PyObject_RichCompare(op1, op2, Py_EQ)
    #endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* BufferFallbackError.proto */
static void __Pyx_RaiseBufferFallbackError(void);

/* BufferIndexError.proto */
static void __Pyx_RaiseBufferIndexError(int axis);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_uint32(npy_uint32 value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value);

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_int64(npy_int64 value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_uint64(npy_uint64 value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint32_t(uint32_t value);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE npy_uint32 __Pyx_PyInt_As_npy_uint32(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE npy_uint64 __Pyx_PyInt_As_npy_uint64(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE uint32_t __Pyx_PyInt_As_uint32_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE npy_int64 __Pyx_PyInt_As_npy_int64(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static void __pyx_f_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32__add_leaf32(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self, struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_leaf); /* proto*/
static void __pyx_f_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32__add_leaf64(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self, struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_leaf); /* proto*/
static void __pyx_f_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64__add_leaf32(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self, struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_leaf); /* proto*/
static void __pyx_f_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64__add_leaf64(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self, struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_leaf); /* proto*/

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython.version' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'cython' */

/* Module declarations from 'cgal4py.delaunay.tools' */
static PyTypeObject *__pyx_ptype_7cgal4py_8delaunay_5tools_SerializedLeaf32 = 0;
static PyTypeObject *__pyx_ptype_7cgal4py_8delaunay_5tools_SerializedLeaf64 = 0;
static PyTypeObject *__pyx_ptype_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 = 0;
static PyTypeObject *__pyx_ptype_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 = 0;
static void __pyx_f_7cgal4py_8delaunay_5tools__sortCellVerts_int64(PyArrayObject *, PyArrayObject *); /*proto*/
static void __pyx_f_7cgal4py_8delaunay_5tools__sortCellVerts_uint64(PyArrayObject *, PyArrayObject *); /*proto*/
static void __pyx_f_7cgal4py_8delaunay_5tools__sortCellVerts_int32(PyArrayObject *, PyArrayObject *); /*proto*/
static void __pyx_f_7cgal4py_8delaunay_5tools__sortCellVerts_uint32(PyArrayObject *, PyArrayObject *); /*proto*/
static void __pyx_f_7cgal4py_8delaunay_5tools__arg_sortCellVerts_int64(PyArrayObject *, PyArrayObject *); /*proto*/
static void __pyx_f_7cgal4py_8delaunay_5tools__arg_sortCellVerts_uint64(PyArrayObject *, PyArrayObject *); /*proto*/
static void __pyx_f_7cgal4py_8delaunay_5tools__arg_sortCellVerts_int32(PyArrayObject *, PyArrayObject *); /*proto*/
static void __pyx_f_7cgal4py_8delaunay_5tools__arg_sortCellVerts_uint32(PyArrayObject *, PyArrayObject *); /*proto*/
static void __pyx_f_7cgal4py_8delaunay_5tools__swap_cells_int32(PyArrayObject *, PyArrayObject *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t); /*proto*/
static void __pyx_f_7cgal4py_8delaunay_5tools__swap_cells_uint32(PyArrayObject *, PyArrayObject *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t); /*proto*/
static void __pyx_f_7cgal4py_8delaunay_5tools__swap_cells_int64(PyArrayObject *, PyArrayObject *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t); /*proto*/
static void __pyx_f_7cgal4py_8delaunay_5tools__swap_cells_uint64(PyArrayObject *, PyArrayObject *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t); /*proto*/
static __pyx_t_7cgal4py_8delaunay_5tools_sLeaves32 __pyx_f_7cgal4py_8delaunay_5tools__vectorize_leaves_uint32(__pyx_t_5numpy_uint32_t, PyObject *, PyArrayObject *, PyArrayObject *); /*proto*/
static __pyx_t_7cgal4py_8delaunay_5tools_sLeaves64 __pyx_f_7cgal4py_8delaunay_5tools__vectorize_leaves_uint64(__pyx_t_5numpy_uint32_t, PyObject *, PyArrayObject *, PyArrayObject *); /*proto*/
static __pyx_t_5numpy_int64_t __pyx_f_7cgal4py_8delaunay_5tools__consolidate_uint32_uint64(__pyx_t_5numpy_uint32_t, __pyx_t_5numpy_uint64_t, PyObject *, PyArrayObject *, PyArrayObject *, PyArrayObject *, PyArrayObject *); /*proto*/
static __pyx_t_5numpy_int64_t __pyx_f_7cgal4py_8delaunay_5tools__consolidate_uint32_uint32(__pyx_t_5numpy_uint32_t, __pyx_t_5numpy_uint32_t, PyObject *, PyArrayObject *, PyArrayObject *, PyArrayObject *, PyArrayObject *); /*proto*/
static __pyx_t_5numpy_int64_t __pyx_f_7cgal4py_8delaunay_5tools__consolidate_uint64_uint64(__pyx_t_5numpy_uint32_t, __pyx_t_5numpy_uint64_t, PyObject *, PyArrayObject *, PyArrayObject *, PyArrayObject *, PyArrayObject *); /*proto*/
static void __pyx_f_7cgal4py_8delaunay_5tools__output_leaf_uint32(char *, int, __pyx_t_5numpy_uint32_t, PyArrayObject *, PyArrayObject *, PyArrayObject *, PyArrayObject *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t = { "float64_t", NULL, sizeof(__pyx_t_5numpy_float64_t), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t = { "int64_t", NULL, sizeof(__pyx_t_5numpy_int64_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int64_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int64_t), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t = { "uint32_t", NULL, sizeof(__pyx_t_5numpy_uint32_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_uint32_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_uint32_t), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t = { "uint64_t", NULL, sizeof(__pyx_t_5numpy_uint64_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_uint64_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_uint64_t), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t = { "int32_t", NULL, sizeof(__pyx_t_5numpy_int32_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int32_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int32_t), 0 };
#define __Pyx_MODULE_NAME "cgal4py.delaunay.tools"
extern int __pyx_module_is_main_cgal4py__delaunay__tools;
int __pyx_module_is_main_cgal4py__delaunay__tools = 0;

/* Implementation of 'cgal4py.delaunay.tools' */
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_c[] = "c";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_l[] = "l";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_i1[] = "i1";
static const char __pyx_k_i2[] = "i2";
static const char __pyx_k_le[] = "le";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_re[] = "re";
static const char __pyx_k_t0[] = "t0";
static const char __pyx_k_t1[] = "t1";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_idx[] = "idx";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_out[] = "out";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_fill[] = "fill";
static const char __pyx_k_leaf[] = "leaf";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_cells[] = "cells";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_fname[] = "fname";
static const char __pyx_k_int32[] = "int32";
static const char __pyx_k_int64[] = "int64";
static const char __pyx_k_neigh[] = "neigh";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_verts[] = "verts";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_cfname[] = "cfname";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_ncells[] = "ncells";
static const char __pyx_k_py_tEQ[] = "py_tEQ";
static const char __pyx_k_py_tGT[] = "py_tGT";
static const char __pyx_k_py_tLT[] = "py_tLT";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_resize[] = "resize";
static const char __pyx_k_serial[] = "serial";
static const char __pyx_k_uint32[] = "uint32";
static const char __pyx_k_uint64[] = "uint64";
static const char __pyx_k_add_inf[] = "add_inf";
static const char __pyx_k_idx_inf[] = "idx_inf";
static const char __pyx_k_inf_map[] = "inf_map";
static const char __pyx_k_leaf_id[] = "leaf_id";
static const char __pyx_k_add_leaf[] = "add_leaf";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_idx_stop[] = "idx_stop";
static const char __pyx_k_refcheck[] = "refcheck";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_all_neigh[] = "all_neigh";
static const char __pyx_k_all_verts[] = "all_verts";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_idx_cells[] = "idx_cells";
static const char __pyx_k_idx_start[] = "idx_start";
static const char __pyx_k_idx_verts[] = "idx_verts";
static const char __pyx_k_leaf_stop[] = "leaf_stop";
static const char __pyx_k_n_inf_map[] = "n_inf_map";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_split_map[] = "split_map";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_dtype_comb[] = "dtype_comb";
static const char __pyx_k_dtype_leaf[] = "dtype_leaf";
static const char __pyx_k_leaf_neigh[] = "leaf_neigh";
static const char __pyx_k_leaf_start[] = "leaf_start";
static const char __pyx_k_leaf_verts[] = "leaf_verts";
static const char __pyx_k_max_ncells[] = "max_ncells";
static const char __pyx_k_num_leaves[] = "num_leaves";
static const char __pyx_k_py_arg_tLT[] = "py_arg_tLT";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_sort_cells[] = "sort_cells";
static const char __pyx_k_sort_verts[] = "sort_verts";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_key_inf_map[] = "key_inf_map";
static const char __pyx_k_leaf_ncells[] = "leaf_ncells";
static const char __pyx_k_n_split_map[] = "n_split_map";
static const char __pyx_k_output_leaf[] = "output_leaf";
static const char __pyx_k_val_inf_map[] = "val_inf_map";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_key_inf_map0[] = "key_inf_map0";
static const char __pyx_k_leaf_idx_inf[] = "leaf_idx_inf";
static const char __pyx_k_val_inf_map0[] = "val_inf_map0";
static const char __pyx_k_key_split_map[] = "key_split_map";
static const char __pyx_k_py_swap_cells[] = "py_swap_cells";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_val_split_map[] = "val_split_map";
static const char __pyx_k_key_split_map0[] = "key_split_map0";
static const char __pyx_k_val_split_map0[] = "val_split_map0";
static const char __pyx_k_Clean_up_took_s[] = "Clean up took {} s";
static const char __pyx_k_leaf_sort_cells[] = "leaf_sort_cells";
static const char __pyx_k_leaf_sort_verts[] = "leaf_sort_verts";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_py_sortCellVerts[] = "py_sortCellVerts";
static const char __pyx_k_Allocation_took_s[] = "Allocation took {} s";
static const char __pyx_k_Assertions_took_s[] = "Assertions took {} s";
static const char __pyx_k_py_partition_tess[] = "py_partition_tess";
static const char __pyx_k_py_quickSort_tess[] = "py_quickSort_tess";
static const char __pyx_k_Adding_leaf_took_s[] = "Adding leaf took {} s";
static const char __pyx_k_Type_not_supported[] = "Type {} not supported.";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_consolidate_leaves[] = "consolidate_leaves";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_py_arg_sortCellVerts[] = "py_arg_sortCellVerts";
static const char __pyx_k_py_intersect_sph_box[] = "py_intersect_sph_box";
static const char __pyx_k_add_inf_uint32_uint32[] = "_add_inf_uint32_uint32";
static const char __pyx_k_py_arg_partition_tess[] = "py_arg_partition_tess";
static const char __pyx_k_py_arg_quickSort_tess[] = "py_arg_quickSort_tess";
static const char __pyx_k_py_sortSerializedTess[] = "py_sortSerializedTess";
static const char __pyx_k_Unrecognized_leaf_type[] = "Unrecognized leaf type: {}";
static const char __pyx_k_add_leaf_uint32_uint32[] = "_add_leaf_uint32_uint32";
static const char __pyx_k_cgal4py_delaunay_tools[] = "cgal4py.delaunay.tools";
static const char __pyx_k_Leaf_type_not_supported[] = "Leaf type {} not supported.";
static const char __pyx_k_Creating_the_leaf_took_s[] = "Creating the leaf took {} s";
static const char __pyx_k_sortSerializedTess_int32[] = "_sortSerializedTess_int32";
static const char __pyx_k_sortSerializedTess_int64[] = "_sortSerializedTess_int64";
static const char __pyx_k_Getting_map_arrays_took_s[] = "Getting map arrays took {} s";
static const char __pyx_k_py_arg_sortSerializedTess[] = "py_arg_sortSerializedTess";
static const char __pyx_k_sortSerializedTess_uint32[] = "_sortSerializedTess_uint32";
static const char __pyx_k_sortSerializedTess_uint64[] = "_sortSerializedTess_uint64";
static const char __pyx_k_cgal4py_delaunay_tools_pyx[] = "cgal4py/delaunay/tools.pyx";
static const char __pyx_k_Combined_type_not_supported[] = "Combined type {} not supported.";
static const char __pyx_k_Consolidation_cython_took_s[] = "Consolidation (cython) took {}s";
static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static const char __pyx_k_Adding_infinite_cells_took_s[] = "Adding infinite cells took {} s";
static const char __pyx_k_arg_sortSerializedTess_int32[] = "_arg_sortSerializedTess_int32";
static const char __pyx_k_arg_sortSerializedTess_int64[] = "_arg_sortSerializedTess_int64";
static const char __pyx_k_arg_sortSerializedTess_uint32[] = "_arg_sortSerializedTess_uint32";
static const char __pyx_k_arg_sortSerializedTess_uint64[] = "_arg_sortSerializedTess_uint64";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static const char __pyx_k_Adding_infinite_cells_cython_too[] = "Adding infinite cells (cython) took {}s";
static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static const char __pyx_k_Initialization_of_consolidated_l[] = "Initialization of consolidated leaves took {} s";
static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static const char __pyx_k_Output_of_leaves_with_template_t[] = "Output of leaves with template type {} not supported";
static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static const char __pyx_k_Initialization_of_consolidated_l_2[] = "Initialization of consolidated leaves (for inf) took {} s";
static PyObject *__pyx_kp_s_Adding_infinite_cells_cython_too;
static PyObject *__pyx_kp_s_Adding_infinite_cells_took_s;
static PyObject *__pyx_kp_s_Adding_leaf_took_s;
static PyObject *__pyx_kp_s_Allocation_took_s;
static PyObject *__pyx_kp_s_Assertions_took_s;
static PyObject *__pyx_kp_s_Clean_up_took_s;
static PyObject *__pyx_kp_s_Combined_type_not_supported;
static PyObject *__pyx_kp_s_Consolidation_cython_took_s;
static PyObject *__pyx_kp_s_Creating_the_leaf_took_s;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_kp_s_Getting_map_arrays_took_s;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_s_Initialization_of_consolidated_l;
static PyObject *__pyx_kp_s_Initialization_of_consolidated_l_2;
static PyObject *__pyx_kp_s_Leaf_type_not_supported;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_kp_s_Output_of_leaves_with_template_t;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Type_not_supported;
static PyObject *__pyx_kp_s_Unrecognized_leaf_type;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_add_inf;
static PyObject *__pyx_n_s_add_inf_uint32_uint32;
static PyObject *__pyx_n_s_add_leaf;
static PyObject *__pyx_n_s_add_leaf_uint32_uint32;
static PyObject *__pyx_n_s_all_neigh;
static PyObject *__pyx_n_s_all_verts;
static PyObject *__pyx_n_s_arg_sortSerializedTess_int32;
static PyObject *__pyx_n_s_arg_sortSerializedTess_int64;
static PyObject *__pyx_n_s_arg_sortSerializedTess_uint32;
static PyObject *__pyx_n_s_arg_sortSerializedTess_uint64;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_s_cells;
static PyObject *__pyx_n_s_cfname;
static PyObject *__pyx_n_s_cgal4py_delaunay_tools;
static PyObject *__pyx_kp_s_cgal4py_delaunay_tools_pyx;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_consolidate_leaves;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_dtype_comb;
static PyObject *__pyx_n_s_dtype_leaf;
static PyObject *__pyx_n_s_empty;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_fill;
static PyObject *__pyx_n_s_fname;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_i1;
static PyObject *__pyx_n_s_i2;
static PyObject *__pyx_n_s_idx;
static PyObject *__pyx_n_s_idx_cells;
static PyObject *__pyx_n_s_idx_inf;
static PyObject *__pyx_n_s_idx_start;
static PyObject *__pyx_n_s_idx_stop;
static PyObject *__pyx_n_s_idx_verts;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_inf_map;
static PyObject *__pyx_n_s_int32;
static PyObject *__pyx_n_s_int64;
static PyObject *__pyx_n_s_key_inf_map;
static PyObject *__pyx_n_s_key_inf_map0;
static PyObject *__pyx_n_s_key_split_map;
static PyObject *__pyx_n_s_key_split_map0;
static PyObject *__pyx_n_s_l;
static PyObject *__pyx_n_s_le;
static PyObject *__pyx_n_s_leaf;
static PyObject *__pyx_n_s_leaf_id;
static PyObject *__pyx_n_s_leaf_idx_inf;
static PyObject *__pyx_n_s_leaf_ncells;
static PyObject *__pyx_n_s_leaf_neigh;
static PyObject *__pyx_n_s_leaf_sort_cells;
static PyObject *__pyx_n_s_leaf_sort_verts;
static PyObject *__pyx_n_s_leaf_start;
static PyObject *__pyx_n_s_leaf_stop;
static PyObject *__pyx_n_s_leaf_verts;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max_ncells;
static PyObject *__pyx_n_s_n_inf_map;
static PyObject *__pyx_n_s_n_split_map;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_ncells;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_ndim;
static PyObject *__pyx_n_s_neigh;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_num_leaves;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_out;
static PyObject *__pyx_n_s_output_leaf;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_py_arg_partition_tess;
static PyObject *__pyx_n_s_py_arg_quickSort_tess;
static PyObject *__pyx_n_s_py_arg_sortCellVerts;
static PyObject *__pyx_n_s_py_arg_sortSerializedTess;
static PyObject *__pyx_n_s_py_arg_tLT;
static PyObject *__pyx_n_s_py_intersect_sph_box;
static PyObject *__pyx_n_s_py_partition_tess;
static PyObject *__pyx_n_s_py_quickSort_tess;
static PyObject *__pyx_n_s_py_sortCellVerts;
static PyObject *__pyx_n_s_py_sortSerializedTess;
static PyObject *__pyx_n_s_py_swap_cells;
static PyObject *__pyx_n_s_py_tEQ;
static PyObject *__pyx_n_s_py_tGT;
static PyObject *__pyx_n_s_py_tLT;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_re;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_refcheck;
static PyObject *__pyx_n_s_resize;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_n_s_serial;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_sortSerializedTess_int32;
static PyObject *__pyx_n_s_sortSerializedTess_int64;
static PyObject *__pyx_n_s_sortSerializedTess_uint32;
static PyObject *__pyx_n_s_sortSerializedTess_uint64;
static PyObject *__pyx_n_s_sort_cells;
static PyObject *__pyx_n_s_sort_verts;
static PyObject *__pyx_n_s_split_map;
static PyObject *__pyx_n_s_t0;
static PyObject *__pyx_n_s_t1;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_n_s_uint32;
static PyObject *__pyx_n_s_uint64;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_val_inf_map;
static PyObject *__pyx_n_s_val_inf_map0;
static PyObject *__pyx_n_s_val_split_map;
static PyObject *__pyx_n_s_val_split_map0;
static PyObject *__pyx_n_s_verts;
static PyObject *__pyx_n_s_zeros;
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_py_intersect_sph_box(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_c, __pyx_t_5numpy_float64_t __pyx_v_r, PyArrayObject *__pyx_v_le, PyArrayObject *__pyx_v_re); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_2py_arg_tLT(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_idx_verts, int __pyx_v_i1, int __pyx_v_i2); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_4py_tEQ(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, int __pyx_v_i1, int __pyx_v_i2); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_6py_tGT(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, int __pyx_v_i1, int __pyx_v_i2); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_8py_tLT(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, int __pyx_v_i1, int __pyx_v_i2); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_10py_sortCellVerts(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cells, PyObject *__pyx_v_neigh); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_12_sortSerializedTess_int32(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_neigh); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_14_sortSerializedTess_uint32(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_neigh); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16_sortSerializedTess_int64(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_neigh); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_18_sortSerializedTess_uint64(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_neigh); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20py_sortSerializedTess(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cells, PyObject *__pyx_v_neigh); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_22py_quickSort_tess(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_neigh, PyArrayObject *__pyx_v_idx, int64_t __pyx_v_l, int64_t __pyx_v_r); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_24py_partition_tess(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_neigh, PyArrayObject *__pyx_v_idx, int64_t __pyx_v_l, int64_t __pyx_v_r, int64_t __pyx_v_p); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_26py_arg_sortCellVerts(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cells); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_28_arg_sortSerializedTess_int32(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_idx_verts, PyArrayObject *__pyx_v_idx_cells); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_30_arg_sortSerializedTess_uint32(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_idx_verts, PyArrayObject *__pyx_v_idx_cells); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_32_arg_sortSerializedTess_int64(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_idx_verts, PyArrayObject *__pyx_v_idx_cells); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_34_arg_sortSerializedTess_uint64(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_idx_verts, PyArrayObject *__pyx_v_idx_cells); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_36py_arg_sortSerializedTess(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cells); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_38py_arg_quickSort_tess(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_idx_verts, PyArrayObject *__pyx_v_idx_cells, int64_t __pyx_v_l, int64_t __pyx_v_r); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_40py_arg_partition_tess(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_idx_verts, PyArrayObject *__pyx_v_idx_cells, int64_t __pyx_v_l, int64_t __pyx_v_r, int64_t __pyx_v_p); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_42py_swap_cells(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_verts, PyObject *__pyx_v_neigh, PyObject *__pyx_v_i1, PyObject *__pyx_v_i2); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_44consolidate_leaves(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ndim, PyObject *__pyx_v_idx_inf, PyObject *__pyx_v_serial, PyObject *__pyx_v_leaf_start, PyObject *__pyx_v_leaf_stop); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_46output_leaf(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fname, PyObject *__pyx_v_leaf_id, PyObject *__pyx_v_idx_inf, PyObject *__pyx_v_verts, PyObject *__pyx_v_neigh, PyObject *__pyx_v_sort_verts, PyObject *__pyx_v_sort_cells, PyObject *__pyx_v_idx_start, PyObject *__pyx_v_idx_stop); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_48_add_leaf_uint32_uint32(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_5numpy_uint32_t __pyx_v_ndim, __pyx_t_5numpy_uint64_t __pyx_v_ncells, __pyx_t_5numpy_uint32_t __pyx_v_idx_inf, PyArrayObject *__pyx_v_all_verts, PyArrayObject *__pyx_v_all_neigh, PyArrayObject *__pyx_v_leaf_start, PyArrayObject *__pyx_v_leaf_stop, PyArrayObject *__pyx_v_key_split_map, PyArrayObject *__pyx_v_val_split_map, PyArrayObject *__pyx_v_key_inf_map, PyArrayObject *__pyx_v_val_inf_map, int __pyx_v_leaf_id, __pyx_t_5numpy_uint32_t __pyx_v_leaf_idx_inf, PyArrayObject *__pyx_v_leaf_verts, PyArrayObject *__pyx_v_leaf_neigh, PyArrayObject *__pyx_v_leaf_sort_verts, PyArrayObject *__pyx_v_leaf_sort_cells); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_50add_leaf(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ndim, PyObject *__pyx_v_ncells, PyObject *__pyx_v_idx_inf, PyObject *__pyx_v_all_verts, PyObject *__pyx_v_all_neigh, PyObject *__pyx_v_leaf_start, PyObject *__pyx_v_leaf_stop, PyObject *__pyx_v_key_split_map, PyObject *__pyx_v_val_split_map, PyObject *__pyx_v_key_inf_map, PyObject *__pyx_v_val_inf_map, PyObject *__pyx_v_leaf_id, PyObject *__pyx_v_leaf_idx_inf, PyObject *__pyx_v_leaf_verts, PyObject *__pyx_v_leaf_neigh, PyObject *__pyx_v_leaf_sort_verts, PyObject *__pyx_v_leaf_sort_cells); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_52_add_inf_uint32_uint32(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_5numpy_uint32_t __pyx_v_ndim, __pyx_t_5numpy_uint64_t __pyx_v_ncells, __pyx_t_5numpy_uint32_t __pyx_v_idx_inf, PyArrayObject *__pyx_v_all_verts, PyArrayObject *__pyx_v_all_neigh, PyArrayObject *__pyx_v_leaf_start, PyArrayObject *__pyx_v_leaf_stop); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_54add_inf(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ndim, PyObject *__pyx_v_ncells, PyObject *__pyx_v_idx_inf, PyObject *__pyx_v_all_verts, PyObject *__pyx_v_all_neigh, PyObject *__pyx_v_leaf_start, PyObject *__pyx_v_leaf_stop); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32___cinit__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self, int __pyx_v_leaf_id, uint32_t __pyx_v_ndim, int64_t __pyx_v_ncells, uint32_t __pyx_v_idx_inf, PyArrayObject *__pyx_v_verts, PyArrayObject *__pyx_v_neigh, PyArrayObject *__pyx_v_sort_verts, PyArrayObject *__pyx_v_sort_cells, uint64_t __pyx_v_idx_start, uint64_t __pyx_v_idx_stop); /* proto */
static void __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_2__dealloc__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_2id___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_2id_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_4ndim___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_4ndim_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_6ncells___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_6ncells_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_7idx_inf___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_7idx_inf_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5verts___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5verts_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5verts_4__del__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5neigh___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5neigh_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5neigh_4__del__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_verts___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_verts_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_verts_4__del__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_cells___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_cells_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_cells_4__del__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_9idx_start___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_9idx_start_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_8idx_stop___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_8idx_stop_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64___cinit__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self, int __pyx_v_leaf_id, uint32_t __pyx_v_ndim, int64_t __pyx_v_ncells, uint64_t __pyx_v_idx_inf, PyArrayObject *__pyx_v_verts, PyArrayObject *__pyx_v_neigh, PyArrayObject *__pyx_v_sort_verts, PyArrayObject *__pyx_v_sort_cells, uint64_t __pyx_v_idx_start, uint64_t __pyx_v_idx_stop); /* proto */
static void __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_2__dealloc__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_2id___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_2id_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_4ndim___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_4ndim_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_6ncells___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_6ncells_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_7idx_inf___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_7idx_inf_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5verts___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5verts_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5verts_4__del__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5neigh___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5neigh_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5neigh_4__del__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_verts___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_verts_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_verts_4__del__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_cells___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_cells_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_cells_4__del__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_9idx_start___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_9idx_start_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_8idx_stop___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_8idx_stop_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32___cinit__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self, uint32_t __pyx_v_ndim, uint32_t __pyx_v_idx_inf, int64_t __pyx_v_max_ncells); /* proto */
static void __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_2__dealloc__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_6ncells___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_4add_leaf(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self, PyObject *__pyx_v_leaf); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_6add_leaf_fromfile(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self, PyObject *__pyx_v_fname); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_8finalize(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_10add_inf(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_12resize(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_4ndim___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_4ndim_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_7idx_inf___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_7idx_inf_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_10max_ncells___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_10max_ncells_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5verts___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5verts_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5verts_4__del__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5neigh___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5neigh_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5neigh_4__del__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64___cinit__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self, uint32_t __pyx_v_ndim, uint64_t __pyx_v_idx_inf, int64_t __pyx_v_max_ncells); /* proto */
static void __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_2__dealloc__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_6ncells___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_4add_leaf(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self, PyObject *__pyx_v_leaf); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_6add_leaf_fromfile(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self, PyObject *__pyx_v_fname); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_8finalize(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_10add_inf(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_12resize(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_4ndim___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_4ndim_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_7idx_inf___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_7idx_inf_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_10max_ncells___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_10max_ncells_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5verts___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5verts_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5verts_4__del__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5neigh___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5neigh_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5neigh_4__del__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_7cgal4py_8delaunay_5tools_SerializedLeaf32(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7cgal4py_8delaunay_5tools_SerializedLeaf64(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_slice_;
static PyObject *__pyx_slice__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_codeobj__23;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__27;
static PyObject *__pyx_codeobj__29;
static PyObject *__pyx_codeobj__31;
static PyObject *__pyx_codeobj__33;
static PyObject *__pyx_codeobj__35;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__41;
static PyObject *__pyx_codeobj__43;
static PyObject *__pyx_codeobj__45;
static PyObject *__pyx_codeobj__47;
static PyObject *__pyx_codeobj__49;
static PyObject *__pyx_codeobj__51;
static PyObject *__pyx_codeobj__53;
static PyObject *__pyx_codeobj__55;
static PyObject *__pyx_codeobj__57;
static PyObject *__pyx_codeobj__59;
static PyObject *__pyx_codeobj__61;
static PyObject *__pyx_codeobj__63;
static PyObject *__pyx_codeobj__65;
static PyObject *__pyx_codeobj__67;
static PyObject *__pyx_codeobj__69;
static PyObject *__pyx_codeobj__71;
static PyObject *__pyx_codeobj__73;
static PyObject *__pyx_codeobj__75;
static PyObject *__pyx_codeobj__77;
/* Late includes */

/* "cgal4py/delaunay/tools.pyx":16
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_intersect_sph_box(np.ndarray[np.float64_t, ndim=1] c, np.float64_t r,             # <<<<<<<<<<<<<<
 *                          np.ndarray[np.float64_t, ndim=1] le,
 *                          np.ndarray[np.float64_t, ndim=1] re):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_1py_intersect_sph_box(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7cgal4py_8delaunay_5tools_py_intersect_sph_box[] = "Determine if a sphere and a coordinate alligned box intersect.\n\n    Args:\n        c (np.ndarray of float64): nD coordinates of sphere center.\n        r (float64): Sphere radius.\n        le (np.ndarray of float64): nD coordinates of box minimums.\n        re (np.ndarray of float64): nD coordinates of box maximums.\n\n    Returns:\n        bool: True if the box and sphere intersect. False otherwise.\n\n    ";
static PyMethodDef __pyx_mdef_7cgal4py_8delaunay_5tools_1py_intersect_sph_box = {"py_intersect_sph_box", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_1py_intersect_sph_box, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7cgal4py_8delaunay_5tools_py_intersect_sph_box};
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_1py_intersect_sph_box(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_c = 0;
  __pyx_t_5numpy_float64_t __pyx_v_r;
  PyArrayObject *__pyx_v_le = 0;
  PyArrayObject *__pyx_v_re = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_intersect_sph_box (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_c,&__pyx_n_s_r,&__pyx_n_s_le,&__pyx_n_s_re,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_intersect_sph_box", 1, 4, 4, 1); __PYX_ERR(0, 16, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_le)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_intersect_sph_box", 1, 4, 4, 2); __PYX_ERR(0, 16, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_re)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_intersect_sph_box", 1, 4, 4, 3); __PYX_ERR(0, 16, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_intersect_sph_box") < 0)) __PYX_ERR(0, 16, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_c = ((PyArrayObject *)values[0]);
    __pyx_v_r = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_r == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 16, __pyx_L3_error)
    __pyx_v_le = ((PyArrayObject *)values[2]);
    __pyx_v_re = ((PyArrayObject *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_intersect_sph_box", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 16, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.py_intersect_sph_box", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), __pyx_ptype_5numpy_ndarray, 1, "c", 0))) __PYX_ERR(0, 16, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_le), __pyx_ptype_5numpy_ndarray, 1, "le", 0))) __PYX_ERR(0, 17, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_re), __pyx_ptype_5numpy_ndarray, 1, "re", 0))) __PYX_ERR(0, 18, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_py_intersect_sph_box(__pyx_self, __pyx_v_c, __pyx_v_r, __pyx_v_le, __pyx_v_re);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_py_intersect_sph_box(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_c, __pyx_t_5numpy_float64_t __pyx_v_r, PyArrayObject *__pyx_v_le, PyArrayObject *__pyx_v_re) {
  uint32_t __pyx_v_ndim;
  bool __pyx_v_out;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_c;
  __Pyx_Buffer __pyx_pybuffer_c;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_le;
  __Pyx_Buffer __pyx_pybuffer_le;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_re;
  __Pyx_Buffer __pyx_pybuffer_re;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("py_intersect_sph_box", 0);
  __pyx_pybuffer_c.pybuffer.buf = NULL;
  __pyx_pybuffer_c.refcount = 0;
  __pyx_pybuffernd_c.data = NULL;
  __pyx_pybuffernd_c.rcbuffer = &__pyx_pybuffer_c;
  __pyx_pybuffer_le.pybuffer.buf = NULL;
  __pyx_pybuffer_le.refcount = 0;
  __pyx_pybuffernd_le.data = NULL;
  __pyx_pybuffernd_le.rcbuffer = &__pyx_pybuffer_le;
  __pyx_pybuffer_re.pybuffer.buf = NULL;
  __pyx_pybuffer_re.refcount = 0;
  __pyx_pybuffernd_re.data = NULL;
  __pyx_pybuffernd_re.rcbuffer = &__pyx_pybuffer_re;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 16, __pyx_L1_error)
  }
  __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_le.rcbuffer->pybuffer, (PyObject*)__pyx_v_le, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 16, __pyx_L1_error)
  }
  __pyx_pybuffernd_le.diminfo[0].strides = __pyx_pybuffernd_le.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_le.diminfo[0].shape = __pyx_pybuffernd_le.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_re.rcbuffer->pybuffer, (PyObject*)__pyx_v_re, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 16, __pyx_L1_error)
  }
  __pyx_pybuffernd_re.diminfo[0].strides = __pyx_pybuffernd_re.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_re.diminfo[0].shape = __pyx_pybuffernd_re.rcbuffer->pybuffer.shape[0];

  /* "cgal4py/delaunay/tools.pyx":31
 * 
 *     """
 *     assert(le.shape[0] == c.shape[0])             # <<<<<<<<<<<<<<
 *     assert(re.shape[0] == c.shape[0])
 *     cdef uint32_t ndim = <uint32_t>len(c)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_le->dimensions[0]) == (__pyx_v_c->dimensions[0])) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 31, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":32
 *     """
 *     assert(le.shape[0] == c.shape[0])
 *     assert(re.shape[0] == c.shape[0])             # <<<<<<<<<<<<<<
 *     cdef uint32_t ndim = <uint32_t>len(c)
 *     cdef cbool out
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_re->dimensions[0]) == (__pyx_v_c->dimensions[0])) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 32, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":33
 *     assert(le.shape[0] == c.shape[0])
 *     assert(re.shape[0] == c.shape[0])
 *     cdef uint32_t ndim = <uint32_t>len(c)             # <<<<<<<<<<<<<<
 *     cdef cbool out
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_c)); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 33, __pyx_L1_error)
  __pyx_v_ndim = ((uint32_t)__pyx_t_1);

  /* "cgal4py/delaunay/tools.pyx":35
 *     cdef uint32_t ndim = <uint32_t>len(c)
 *     cdef cbool out
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         out = intersect_sph_box(ndim, &c[0], r, &le[0], &re[0])
 *     return <pybool>out
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":36
 *     cdef cbool out
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         out = intersect_sph_box(ndim, &c[0], r, &le[0], &re[0])             # <<<<<<<<<<<<<<
 *     return <pybool>out
 * 
 */
        __pyx_t_2 = 0;
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        __pyx_v_out = intersect_sph_box(__pyx_v_ndim, (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_2, __pyx_pybuffernd_c.diminfo[0].strides))), __pyx_v_r, (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_le.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_le.diminfo[0].strides))), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_re.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_re.diminfo[0].strides))));
      }

      /* "cgal4py/delaunay/tools.pyx":35
 *     cdef uint32_t ndim = <uint32_t>len(c)
 *     cdef cbool out
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         out = intersect_sph_box(ndim, &c[0], r, &le[0], &re[0])
 *     return <pybool>out
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":37
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         out = intersect_sph_box(ndim, &c[0], r, &le[0], &re[0])
 *     return <pybool>out             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_out); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_7cpython_4bool_bool)))) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_INCREF(((PyBoolObject *)__pyx_t_5));
  __pyx_r = __pyx_t_5;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "cgal4py/delaunay/tools.pyx":16
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_intersect_sph_box(np.ndarray[np.float64_t, ndim=1] c, np.float64_t r,             # <<<<<<<<<<<<<<
 *                          np.ndarray[np.float64_t, ndim=1] le,
 *                          np.ndarray[np.float64_t, ndim=1] re):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_le.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_re.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cgal4py.delaunay.tools.py_intersect_sph_box", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_le.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_re.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":41
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_arg_tLT(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                np.ndarray[np.uint32_t, ndim=2] idx_verts, int i1, int i2):
 *     r"""Determine if one cell is less than the other by comparing
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_3py_arg_tLT(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7cgal4py_8delaunay_5tools_2py_arg_tLT[] = "Determine if one cell is less than the other by comparing \n    the (sorted) vertices in each cell.\n\n    Args:\n        cells (np.ndarray of int64): (n, m+1) array of vertex indices \n            for the n cells in a m-dimensional triangulation.\n        idx_verts (np.ndarray of uint32): (n, m+1) array of indices for \n            sorting the vertices in each cell.\n        i1 (int): Index of the 1st cell in the comparison.\n        i2 (int): Index of the 2nd cell in the comparison.\n\n    Returns:\n        bool: Truth of `cells[i1,idx_verts[i1,:]] < cells[i2,idx_verts[i2,:]]`.\n\n    ";
static PyMethodDef __pyx_mdef_7cgal4py_8delaunay_5tools_3py_arg_tLT = {"py_arg_tLT", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_3py_arg_tLT, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7cgal4py_8delaunay_5tools_2py_arg_tLT};
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_3py_arg_tLT(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_cells = 0;
  PyArrayObject *__pyx_v_idx_verts = 0;
  int __pyx_v_i1;
  int __pyx_v_i2;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_arg_tLT (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cells,&__pyx_n_s_idx_verts,&__pyx_n_s_i1,&__pyx_n_s_i2,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cells)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx_verts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_arg_tLT", 1, 4, 4, 1); __PYX_ERR(0, 41, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_arg_tLT", 1, 4, 4, 2); __PYX_ERR(0, 41, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_arg_tLT", 1, 4, 4, 3); __PYX_ERR(0, 41, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_arg_tLT") < 0)) __PYX_ERR(0, 41, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_cells = ((PyArrayObject *)values[0]);
    __pyx_v_idx_verts = ((PyArrayObject *)values[1]);
    __pyx_v_i1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_i1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 42, __pyx_L3_error)
    __pyx_v_i2 = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_i2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 42, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_arg_tLT", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 41, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.py_arg_tLT", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cells), __pyx_ptype_5numpy_ndarray, 1, "cells", 0))) __PYX_ERR(0, 41, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_idx_verts), __pyx_ptype_5numpy_ndarray, 1, "idx_verts", 0))) __PYX_ERR(0, 42, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_2py_arg_tLT(__pyx_self, __pyx_v_cells, __pyx_v_idx_verts, __pyx_v_i1, __pyx_v_i2);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_2py_arg_tLT(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_idx_verts, int __pyx_v_i1, int __pyx_v_i2) {
  uint32_t __pyx_v_ndim;
  bool __pyx_v_out;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cells;
  __Pyx_Buffer __pyx_pybuffer_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx_verts;
  __Pyx_Buffer __pyx_pybuffer_idx_verts;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("py_arg_tLT", 0);
  __pyx_pybuffer_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_cells.refcount = 0;
  __pyx_pybuffernd_cells.data = NULL;
  __pyx_pybuffernd_cells.rcbuffer = &__pyx_pybuffer_cells;
  __pyx_pybuffer_idx_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_idx_verts.refcount = 0;
  __pyx_pybuffernd_idx_verts.data = NULL;
  __pyx_pybuffernd_idx_verts.rcbuffer = &__pyx_pybuffer_idx_verts;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 41, __pyx_L1_error)
  }
  __pyx_pybuffernd_cells.diminfo[0].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cells.diminfo[0].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cells.diminfo[1].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cells.diminfo[1].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 41, __pyx_L1_error)
  }
  __pyx_pybuffernd_idx_verts.diminfo[0].strides = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx_verts.diminfo[0].shape = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_idx_verts.diminfo[1].strides = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_idx_verts.diminfo[1].shape = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.shape[1];

  /* "cgal4py/delaunay/tools.pyx":58
 * 
 *     """
 *     assert(cells.shape[0] != 0)             # <<<<<<<<<<<<<<
 *     assert(i1 < cells.shape[0])
 *     assert(i2 < cells.shape[0])
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_cells->dimensions[0]) != 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 58, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":59
 *     """
 *     assert(cells.shape[0] != 0)
 *     assert(i1 < cells.shape[0])             # <<<<<<<<<<<<<<
 *     assert(i2 < cells.shape[0])
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_i1 < (__pyx_v_cells->dimensions[0])) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 59, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":60
 *     assert(cells.shape[0] != 0)
 *     assert(i1 < cells.shape[0])
 *     assert(i2 < cells.shape[0])             # <<<<<<<<<<<<<<
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     cdef cbool out
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_i2 < (__pyx_v_cells->dimensions[0])) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 60, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":61
 *     assert(i1 < cells.shape[0])
 *     assert(i2 < cells.shape[0])
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]             # <<<<<<<<<<<<<<
 *     cdef cbool out
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __pyx_v_ndim = ((uint32_t)(__pyx_v_cells->dimensions[1]));

  /* "cgal4py/delaunay/tools.pyx":63
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     cdef cbool out
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         out = arg_tLT[int64_t](&cells[0,0], &idx_verts[0,0], ndim, i1, i2)
 *     return <pybool>out
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":64
 *     cdef cbool out
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         out = arg_tLT[int64_t](&cells[0,0], &idx_verts[0,0], ndim, i1, i2)             # <<<<<<<<<<<<<<
 *     return <pybool>out
 * 
 */
        __pyx_t_1 = 0;
        __pyx_t_2 = 0;
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        __pyx_v_out = arg_tLT<int64_t>(((int64_t *)(&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int64_t *, __pyx_pybuffernd_cells.rcbuffer->pybuffer.buf, __pyx_t_1, __pyx_pybuffernd_cells.diminfo[0].strides, __pyx_t_2, __pyx_pybuffernd_cells.diminfo[1].strides)))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_idx_verts.diminfo[0].strides, __pyx_t_4, __pyx_pybuffernd_idx_verts.diminfo[1].strides))), __pyx_v_ndim, __pyx_v_i1, __pyx_v_i2);
      }

      /* "cgal4py/delaunay/tools.pyx":63
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     cdef cbool out
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         out = arg_tLT[int64_t](&cells[0,0], &idx_verts[0,0], ndim, i1, i2)
 *     return <pybool>out
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":65
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         out = arg_tLT[int64_t](&cells[0,0], &idx_verts[0,0], ndim, i1, i2)
 *     return <pybool>out             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_out); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_7cpython_4bool_bool)))) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_INCREF(((PyBoolObject *)__pyx_t_5));
  __pyx_r = __pyx_t_5;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "cgal4py/delaunay/tools.pyx":41
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_arg_tLT(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                np.ndarray[np.uint32_t, ndim=2] idx_verts, int i1, int i2):
 *     r"""Determine if one cell is less than the other by comparing
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cgal4py.delaunay.tools.py_arg_tLT", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":69
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_tEQ(np.ndarray[np.int64_t, ndim=2] cells, int i1, int i2):             # <<<<<<<<<<<<<<
 *     r"""Determine if one cell is equivalent to the other by comparing
 *     the (sorted) vertices in each cell.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_5py_tEQ(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7cgal4py_8delaunay_5tools_4py_tEQ[] = "Determine if one cell is equivalent to the other by comparing \n    the (sorted) vertices in each cell.\n\n    Args:\n        cells (np.ndarray of int64): (n, m+1) array of vertex indices \n            for the n cells in a m-dimensional triangulation.\n        i1 (int): Index of the 1st cell in the comparison.\n        i2 (int): Index of the 2nd cell in the comparison.\n\n    Returns:\n        bool: Truth of `cells[i1,:] == cells[i2,:]`.\n\n    ";
static PyMethodDef __pyx_mdef_7cgal4py_8delaunay_5tools_5py_tEQ = {"py_tEQ", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_5py_tEQ, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7cgal4py_8delaunay_5tools_4py_tEQ};
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_5py_tEQ(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_cells = 0;
  int __pyx_v_i1;
  int __pyx_v_i2;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_tEQ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cells,&__pyx_n_s_i1,&__pyx_n_s_i2,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cells)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_tEQ", 1, 3, 3, 1); __PYX_ERR(0, 69, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_tEQ", 1, 3, 3, 2); __PYX_ERR(0, 69, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_tEQ") < 0)) __PYX_ERR(0, 69, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_cells = ((PyArrayObject *)values[0]);
    __pyx_v_i1 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_i1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 69, __pyx_L3_error)
    __pyx_v_i2 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_i2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 69, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_tEQ", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 69, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.py_tEQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cells), __pyx_ptype_5numpy_ndarray, 1, "cells", 0))) __PYX_ERR(0, 69, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_4py_tEQ(__pyx_self, __pyx_v_cells, __pyx_v_i1, __pyx_v_i2);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_4py_tEQ(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, int __pyx_v_i1, int __pyx_v_i2) {
  uint32_t __pyx_v_ndim;
  bool __pyx_v_out;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cells;
  __Pyx_Buffer __pyx_pybuffer_cells;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("py_tEQ", 0);
  __pyx_pybuffer_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_cells.refcount = 0;
  __pyx_pybuffernd_cells.data = NULL;
  __pyx_pybuffernd_cells.rcbuffer = &__pyx_pybuffer_cells;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 69, __pyx_L1_error)
  }
  __pyx_pybuffernd_cells.diminfo[0].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cells.diminfo[0].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cells.diminfo[1].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cells.diminfo[1].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[1];

  /* "cgal4py/delaunay/tools.pyx":83
 * 
 *     """
 *     assert(cells.shape[0] != 0)             # <<<<<<<<<<<<<<
 *     assert(i1 < cells.shape[0])
 *     assert(i2 < cells.shape[0])
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_cells->dimensions[0]) != 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 83, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":84
 *     """
 *     assert(cells.shape[0] != 0)
 *     assert(i1 < cells.shape[0])             # <<<<<<<<<<<<<<
 *     assert(i2 < cells.shape[0])
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_i1 < (__pyx_v_cells->dimensions[0])) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 84, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":85
 *     assert(cells.shape[0] != 0)
 *     assert(i1 < cells.shape[0])
 *     assert(i2 < cells.shape[0])             # <<<<<<<<<<<<<<
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     cdef cbool out
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_i2 < (__pyx_v_cells->dimensions[0])) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 85, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":86
 *     assert(i1 < cells.shape[0])
 *     assert(i2 < cells.shape[0])
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]             # <<<<<<<<<<<<<<
 *     cdef cbool out
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __pyx_v_ndim = ((uint32_t)(__pyx_v_cells->dimensions[1]));

  /* "cgal4py/delaunay/tools.pyx":88
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     cdef cbool out
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         out = tEQ[int64_t](&cells[0,0], ndim, i1, i2)
 *     return <pybool>out
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":89
 *     cdef cbool out
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         out = tEQ[int64_t](&cells[0,0], ndim, i1, i2)             # <<<<<<<<<<<<<<
 *     return <pybool>out
 * 
 */
        __pyx_t_1 = 0;
        __pyx_t_2 = 0;
        __pyx_v_out = tEQ<int64_t>(((int64_t *)(&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int64_t *, __pyx_pybuffernd_cells.rcbuffer->pybuffer.buf, __pyx_t_1, __pyx_pybuffernd_cells.diminfo[0].strides, __pyx_t_2, __pyx_pybuffernd_cells.diminfo[1].strides)))), __pyx_v_ndim, __pyx_v_i1, __pyx_v_i2);
      }

      /* "cgal4py/delaunay/tools.pyx":88
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     cdef cbool out
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         out = tEQ[int64_t](&cells[0,0], ndim, i1, i2)
 *     return <pybool>out
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":90
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         out = tEQ[int64_t](&cells[0,0], ndim, i1, i2)
 *     return <pybool>out             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_out); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_7cpython_4bool_bool)))) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_INCREF(((PyBoolObject *)__pyx_t_3));
  __pyx_r = __pyx_t_3;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cgal4py/delaunay/tools.pyx":69
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_tEQ(np.ndarray[np.int64_t, ndim=2] cells, int i1, int i2):             # <<<<<<<<<<<<<<
 *     r"""Determine if one cell is equivalent to the other by comparing
 *     the (sorted) vertices in each cell.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cgal4py.delaunay.tools.py_tEQ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":94
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_tGT(np.ndarray[np.int64_t, ndim=2] cells, int i1, int i2):             # <<<<<<<<<<<<<<
 *     r"""Determine if one cell is greater than the other by comparing
 *     the (sorted) vertices in each cell.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_7py_tGT(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7cgal4py_8delaunay_5tools_6py_tGT[] = "Determine if one cell is greater than the other by comparing \n    the (sorted) vertices in each cell.\n\n    Args:\n        cells (np.ndarray of int64): (n, m+1) array of vertex indices \n            for the n cells in a m-dimensional triangulation.\n        i1 (int): Index of the 1st cell in the comparison.\n        i2 (int): Index of the 2nd cell in the comparison.\n\n    Returns:\n        bool: Truth of `cells[i1,:] > cells[i2,:]`.\n\n    ";
static PyMethodDef __pyx_mdef_7cgal4py_8delaunay_5tools_7py_tGT = {"py_tGT", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_7py_tGT, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7cgal4py_8delaunay_5tools_6py_tGT};
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_7py_tGT(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_cells = 0;
  int __pyx_v_i1;
  int __pyx_v_i2;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_tGT (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cells,&__pyx_n_s_i1,&__pyx_n_s_i2,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cells)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_tGT", 1, 3, 3, 1); __PYX_ERR(0, 94, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_tGT", 1, 3, 3, 2); __PYX_ERR(0, 94, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_tGT") < 0)) __PYX_ERR(0, 94, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_cells = ((PyArrayObject *)values[0]);
    __pyx_v_i1 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_i1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 94, __pyx_L3_error)
    __pyx_v_i2 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_i2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 94, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_tGT", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 94, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.py_tGT", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cells), __pyx_ptype_5numpy_ndarray, 1, "cells", 0))) __PYX_ERR(0, 94, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_6py_tGT(__pyx_self, __pyx_v_cells, __pyx_v_i1, __pyx_v_i2);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_6py_tGT(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, int __pyx_v_i1, int __pyx_v_i2) {
  uint32_t __pyx_v_ndim;
  bool __pyx_v_out;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cells;
  __Pyx_Buffer __pyx_pybuffer_cells;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("py_tGT", 0);
  __pyx_pybuffer_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_cells.refcount = 0;
  __pyx_pybuffernd_cells.data = NULL;
  __pyx_pybuffernd_cells.rcbuffer = &__pyx_pybuffer_cells;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 94, __pyx_L1_error)
  }
  __pyx_pybuffernd_cells.diminfo[0].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cells.diminfo[0].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cells.diminfo[1].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cells.diminfo[1].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[1];

  /* "cgal4py/delaunay/tools.pyx":108
 * 
 *     """
 *     assert(cells.shape[0] != 0)             # <<<<<<<<<<<<<<
 *     assert(i1 < cells.shape[0])
 *     assert(i2 < cells.shape[0])
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_cells->dimensions[0]) != 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 108, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":109
 *     """
 *     assert(cells.shape[0] != 0)
 *     assert(i1 < cells.shape[0])             # <<<<<<<<<<<<<<
 *     assert(i2 < cells.shape[0])
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_i1 < (__pyx_v_cells->dimensions[0])) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 109, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":110
 *     assert(cells.shape[0] != 0)
 *     assert(i1 < cells.shape[0])
 *     assert(i2 < cells.shape[0])             # <<<<<<<<<<<<<<
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     cdef cbool out
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_i2 < (__pyx_v_cells->dimensions[0])) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 110, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":111
 *     assert(i1 < cells.shape[0])
 *     assert(i2 < cells.shape[0])
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]             # <<<<<<<<<<<<<<
 *     cdef cbool out
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __pyx_v_ndim = ((uint32_t)(__pyx_v_cells->dimensions[1]));

  /* "cgal4py/delaunay/tools.pyx":113
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     cdef cbool out
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         out = tGT[int64_t](&cells[0,0], ndim, i1, i2)
 *     return <pybool>out
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":114
 *     cdef cbool out
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         out = tGT[int64_t](&cells[0,0], ndim, i1, i2)             # <<<<<<<<<<<<<<
 *     return <pybool>out
 * 
 */
        __pyx_t_1 = 0;
        __pyx_t_2 = 0;
        __pyx_v_out = tGT<int64_t>(((int64_t *)(&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int64_t *, __pyx_pybuffernd_cells.rcbuffer->pybuffer.buf, __pyx_t_1, __pyx_pybuffernd_cells.diminfo[0].strides, __pyx_t_2, __pyx_pybuffernd_cells.diminfo[1].strides)))), __pyx_v_ndim, __pyx_v_i1, __pyx_v_i2);
      }

      /* "cgal4py/delaunay/tools.pyx":113
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     cdef cbool out
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         out = tGT[int64_t](&cells[0,0], ndim, i1, i2)
 *     return <pybool>out
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":115
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         out = tGT[int64_t](&cells[0,0], ndim, i1, i2)
 *     return <pybool>out             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_out); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_7cpython_4bool_bool)))) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_INCREF(((PyBoolObject *)__pyx_t_3));
  __pyx_r = __pyx_t_3;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cgal4py/delaunay/tools.pyx":94
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_tGT(np.ndarray[np.int64_t, ndim=2] cells, int i1, int i2):             # <<<<<<<<<<<<<<
 *     r"""Determine if one cell is greater than the other by comparing
 *     the (sorted) vertices in each cell.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cgal4py.delaunay.tools.py_tGT", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":119
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_tLT(np.ndarray[np.int64_t, ndim=2] cells, int i1, int i2):             # <<<<<<<<<<<<<<
 *     r"""Determine if one cell is less than the other by comparing
 *     the (sorted) vertices in each cell.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_9py_tLT(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7cgal4py_8delaunay_5tools_8py_tLT[] = "Determine if one cell is less than the other by comparing \n    the (sorted) vertices in each cell.\n\n    Args:\n        cells (np.ndarray of int64): (n, m+1) array of vertex indices \n            for the n cells in a m-dimensional triangulation.\n        i1 (int): Index of the 1st cell in the comparison.\n        i2 (int): Index of the 2nd cell in the comparison.\n\n    Returns:\n        bool: Truth of `cells[i1,:] < cells[i2,:]`.\n\n    ";
static PyMethodDef __pyx_mdef_7cgal4py_8delaunay_5tools_9py_tLT = {"py_tLT", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_9py_tLT, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7cgal4py_8delaunay_5tools_8py_tLT};
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_9py_tLT(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_cells = 0;
  int __pyx_v_i1;
  int __pyx_v_i2;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_tLT (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cells,&__pyx_n_s_i1,&__pyx_n_s_i2,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cells)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_tLT", 1, 3, 3, 1); __PYX_ERR(0, 119, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_tLT", 1, 3, 3, 2); __PYX_ERR(0, 119, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_tLT") < 0)) __PYX_ERR(0, 119, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_cells = ((PyArrayObject *)values[0]);
    __pyx_v_i1 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_i1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 119, __pyx_L3_error)
    __pyx_v_i2 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_i2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 119, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_tLT", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 119, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.py_tLT", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cells), __pyx_ptype_5numpy_ndarray, 1, "cells", 0))) __PYX_ERR(0, 119, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_8py_tLT(__pyx_self, __pyx_v_cells, __pyx_v_i1, __pyx_v_i2);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_8py_tLT(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, int __pyx_v_i1, int __pyx_v_i2) {
  uint32_t __pyx_v_ndim;
  bool __pyx_v_out;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cells;
  __Pyx_Buffer __pyx_pybuffer_cells;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("py_tLT", 0);
  __pyx_pybuffer_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_cells.refcount = 0;
  __pyx_pybuffernd_cells.data = NULL;
  __pyx_pybuffernd_cells.rcbuffer = &__pyx_pybuffer_cells;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 119, __pyx_L1_error)
  }
  __pyx_pybuffernd_cells.diminfo[0].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cells.diminfo[0].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cells.diminfo[1].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cells.diminfo[1].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[1];

  /* "cgal4py/delaunay/tools.pyx":133
 * 
 *     """
 *     assert(cells.shape[0] != 0)             # <<<<<<<<<<<<<<
 *     assert(i1 < cells.shape[0])
 *     assert(i2 < cells.shape[0])
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_cells->dimensions[0]) != 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 133, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":134
 *     """
 *     assert(cells.shape[0] != 0)
 *     assert(i1 < cells.shape[0])             # <<<<<<<<<<<<<<
 *     assert(i2 < cells.shape[0])
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_i1 < (__pyx_v_cells->dimensions[0])) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 134, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":135
 *     assert(cells.shape[0] != 0)
 *     assert(i1 < cells.shape[0])
 *     assert(i2 < cells.shape[0])             # <<<<<<<<<<<<<<
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     cdef cbool out
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_i2 < (__pyx_v_cells->dimensions[0])) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 135, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":136
 *     assert(i1 < cells.shape[0])
 *     assert(i2 < cells.shape[0])
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]             # <<<<<<<<<<<<<<
 *     cdef cbool out
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __pyx_v_ndim = ((uint32_t)(__pyx_v_cells->dimensions[1]));

  /* "cgal4py/delaunay/tools.pyx":138
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     cdef cbool out
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         out = tLT[int64_t](&cells[0,0], ndim, i1, i2)
 *     return <pybool>out
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":139
 *     cdef cbool out
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         out = tLT[int64_t](&cells[0,0], ndim, i1, i2)             # <<<<<<<<<<<<<<
 *     return <pybool>out
 * 
 */
        __pyx_t_1 = 0;
        __pyx_t_2 = 0;
        __pyx_v_out = tLT<int64_t>(((int64_t *)(&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int64_t *, __pyx_pybuffernd_cells.rcbuffer->pybuffer.buf, __pyx_t_1, __pyx_pybuffernd_cells.diminfo[0].strides, __pyx_t_2, __pyx_pybuffernd_cells.diminfo[1].strides)))), __pyx_v_ndim, __pyx_v_i1, __pyx_v_i2);
      }

      /* "cgal4py/delaunay/tools.pyx":138
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     cdef cbool out
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         out = tLT[int64_t](&cells[0,0], ndim, i1, i2)
 *     return <pybool>out
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":140
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         out = tLT[int64_t](&cells[0,0], ndim, i1, i2)
 *     return <pybool>out             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_out); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_7cpython_4bool_bool)))) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_INCREF(((PyBoolObject *)__pyx_t_3));
  __pyx_r = __pyx_t_3;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cgal4py/delaunay/tools.pyx":119
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_tLT(np.ndarray[np.int64_t, ndim=2] cells, int i1, int i2):             # <<<<<<<<<<<<<<
 *     r"""Determine if one cell is less than the other by comparing
 *     the (sorted) vertices in each cell.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cgal4py.delaunay.tools.py_tLT", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":144
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef void _sortCellVerts_int64(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                np.ndarray[np.int64_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */

static void __pyx_f_7cgal4py_8delaunay_5tools__sortCellVerts_int64(PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_neigh) {
  uint64_t __pyx_v_ncells;
  uint32_t __pyx_v_ndim;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cells;
  __Pyx_Buffer __pyx_pybuffer_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_neigh;
  __Pyx_Buffer __pyx_pybuffer_neigh;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  __Pyx_RefNannySetupContext("_sortCellVerts_int64", 0);
  __pyx_pybuffer_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_cells.refcount = 0;
  __pyx_pybuffernd_cells.data = NULL;
  __pyx_pybuffernd_cells.rcbuffer = &__pyx_pybuffer_cells;
  __pyx_pybuffer_neigh.pybuffer.buf = NULL;
  __pyx_pybuffer_neigh.refcount = 0;
  __pyx_pybuffernd_neigh.data = NULL;
  __pyx_pybuffernd_neigh.rcbuffer = &__pyx_pybuffer_neigh;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 144, __pyx_L1_error)
  }
  __pyx_pybuffernd_cells.diminfo[0].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cells.diminfo[0].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cells.diminfo[1].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cells.diminfo[1].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer, (PyObject*)__pyx_v_neigh, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 144, __pyx_L1_error)
  }
  __pyx_pybuffernd_neigh.diminfo[0].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_neigh.diminfo[0].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_neigh.diminfo[1].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_neigh.diminfo[1].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[1];

  /* "cgal4py/delaunay/tools.pyx":146
 * cdef void _sortCellVerts_int64(np.ndarray[np.int64_t, ndim=2] cells,
 *                                np.ndarray[np.int64_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]             # <<<<<<<<<<<<<<
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __pyx_v_ncells = ((uint64_t)(__pyx_v_cells->dimensions[0]));

  /* "cgal4py/delaunay/tools.pyx":147
 *                                np.ndarray[np.int64_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]             # <<<<<<<<<<<<<<
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         sortCellVerts[int64_t](&cells[0,0], &neigh[0,0], ncells, ndim)
 */
  __pyx_v_ndim = ((uint32_t)(__pyx_v_cells->dimensions[1]));

  /* "cgal4py/delaunay/tools.pyx":148
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         sortCellVerts[int64_t](&cells[0,0], &neigh[0,0], ncells, ndim)
 * @cython.boundscheck(False)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":149
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         sortCellVerts[int64_t](&cells[0,0], &neigh[0,0], ncells, ndim)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 */
        __pyx_t_1 = 0;
        __pyx_t_2 = 0;
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        sortCellVerts<int64_t>(((int64_t *)(&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int64_t *, __pyx_pybuffernd_cells.rcbuffer->pybuffer.buf, __pyx_t_1, __pyx_pybuffernd_cells.diminfo[0].strides, __pyx_t_2, __pyx_pybuffernd_cells.diminfo[1].strides)))), ((int64_t *)(&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int64_t *, __pyx_pybuffernd_neigh.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_neigh.diminfo[0].strides, __pyx_t_4, __pyx_pybuffernd_neigh.diminfo[1].strides)))), __pyx_v_ncells, __pyx_v_ndim);
      }

      /* "cgal4py/delaunay/tools.pyx":148
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         sortCellVerts[int64_t](&cells[0,0], &neigh[0,0], ncells, ndim)
 * @cython.boundscheck(False)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":144
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef void _sortCellVerts_int64(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                np.ndarray[np.int64_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_WriteUnraisable("cgal4py.delaunay.tools._sortCellVerts_int64", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
}

/* "cgal4py/delaunay/tools.pyx":152
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef void _sortCellVerts_uint64(np.ndarray[np.uint64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                 np.ndarray[np.uint64_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */

static void __pyx_f_7cgal4py_8delaunay_5tools__sortCellVerts_uint64(PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_neigh) {
  uint64_t __pyx_v_ncells;
  uint32_t __pyx_v_ndim;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cells;
  __Pyx_Buffer __pyx_pybuffer_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_neigh;
  __Pyx_Buffer __pyx_pybuffer_neigh;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  __Pyx_RefNannySetupContext("_sortCellVerts_uint64", 0);
  __pyx_pybuffer_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_cells.refcount = 0;
  __pyx_pybuffernd_cells.data = NULL;
  __pyx_pybuffernd_cells.rcbuffer = &__pyx_pybuffer_cells;
  __pyx_pybuffer_neigh.pybuffer.buf = NULL;
  __pyx_pybuffer_neigh.refcount = 0;
  __pyx_pybuffernd_neigh.data = NULL;
  __pyx_pybuffernd_neigh.rcbuffer = &__pyx_pybuffer_neigh;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 152, __pyx_L1_error)
  }
  __pyx_pybuffernd_cells.diminfo[0].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cells.diminfo[0].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cells.diminfo[1].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cells.diminfo[1].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer, (PyObject*)__pyx_v_neigh, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 152, __pyx_L1_error)
  }
  __pyx_pybuffernd_neigh.diminfo[0].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_neigh.diminfo[0].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_neigh.diminfo[1].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_neigh.diminfo[1].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[1];

  /* "cgal4py/delaunay/tools.pyx":154
 * cdef void _sortCellVerts_uint64(np.ndarray[np.uint64_t, ndim=2] cells,
 *                                 np.ndarray[np.uint64_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]             # <<<<<<<<<<<<<<
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __pyx_v_ncells = ((uint64_t)(__pyx_v_cells->dimensions[0]));

  /* "cgal4py/delaunay/tools.pyx":155
 *                                 np.ndarray[np.uint64_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]             # <<<<<<<<<<<<<<
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         sortCellVerts[uint64_t](&cells[0,0], &neigh[0,0], ncells, ndim)
 */
  __pyx_v_ndim = ((uint32_t)(__pyx_v_cells->dimensions[1]));

  /* "cgal4py/delaunay/tools.pyx":156
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         sortCellVerts[uint64_t](&cells[0,0], &neigh[0,0], ncells, ndim)
 * @cython.boundscheck(False)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":157
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         sortCellVerts[uint64_t](&cells[0,0], &neigh[0,0], ncells, ndim)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 */
        __pyx_t_1 = 0;
        __pyx_t_2 = 0;
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        sortCellVerts<uint64_t>((&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_cells.rcbuffer->pybuffer.buf, __pyx_t_1, __pyx_pybuffernd_cells.diminfo[0].strides, __pyx_t_2, __pyx_pybuffernd_cells.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_neigh.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_neigh.diminfo[0].strides, __pyx_t_4, __pyx_pybuffernd_neigh.diminfo[1].strides))), __pyx_v_ncells, __pyx_v_ndim);
      }

      /* "cgal4py/delaunay/tools.pyx":156
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         sortCellVerts[uint64_t](&cells[0,0], &neigh[0,0], ncells, ndim)
 * @cython.boundscheck(False)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":152
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef void _sortCellVerts_uint64(np.ndarray[np.uint64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                 np.ndarray[np.uint64_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_WriteUnraisable("cgal4py.delaunay.tools._sortCellVerts_uint64", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
}

/* "cgal4py/delaunay/tools.pyx":160
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef void _sortCellVerts_int32(np.ndarray[np.int32_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                np.ndarray[np.int32_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */

static void __pyx_f_7cgal4py_8delaunay_5tools__sortCellVerts_int32(PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_neigh) {
  uint64_t __pyx_v_ncells;
  uint32_t __pyx_v_ndim;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cells;
  __Pyx_Buffer __pyx_pybuffer_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_neigh;
  __Pyx_Buffer __pyx_pybuffer_neigh;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  __Pyx_RefNannySetupContext("_sortCellVerts_int32", 0);
  __pyx_pybuffer_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_cells.refcount = 0;
  __pyx_pybuffernd_cells.data = NULL;
  __pyx_pybuffernd_cells.rcbuffer = &__pyx_pybuffer_cells;
  __pyx_pybuffer_neigh.pybuffer.buf = NULL;
  __pyx_pybuffer_neigh.refcount = 0;
  __pyx_pybuffernd_neigh.data = NULL;
  __pyx_pybuffernd_neigh.rcbuffer = &__pyx_pybuffer_neigh;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 160, __pyx_L1_error)
  }
  __pyx_pybuffernd_cells.diminfo[0].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cells.diminfo[0].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cells.diminfo[1].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cells.diminfo[1].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer, (PyObject*)__pyx_v_neigh, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 160, __pyx_L1_error)
  }
  __pyx_pybuffernd_neigh.diminfo[0].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_neigh.diminfo[0].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_neigh.diminfo[1].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_neigh.diminfo[1].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[1];

  /* "cgal4py/delaunay/tools.pyx":162
 * cdef void _sortCellVerts_int32(np.ndarray[np.int32_t, ndim=2] cells,
 *                                np.ndarray[np.int32_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]             # <<<<<<<<<<<<<<
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __pyx_v_ncells = ((uint64_t)(__pyx_v_cells->dimensions[0]));

  /* "cgal4py/delaunay/tools.pyx":163
 *                                np.ndarray[np.int32_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]             # <<<<<<<<<<<<<<
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         sortCellVerts[int32_t](&cells[0,0], &neigh[0,0], ncells, ndim)
 */
  __pyx_v_ndim = ((uint32_t)(__pyx_v_cells->dimensions[1]));

  /* "cgal4py/delaunay/tools.pyx":164
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         sortCellVerts[int32_t](&cells[0,0], &neigh[0,0], ncells, ndim)
 * @cython.boundscheck(False)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":165
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         sortCellVerts[int32_t](&cells[0,0], &neigh[0,0], ncells, ndim)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 */
        __pyx_t_1 = 0;
        __pyx_t_2 = 0;
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        sortCellVerts<int32_t>((&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_cells.rcbuffer->pybuffer.buf, __pyx_t_1, __pyx_pybuffernd_cells.diminfo[0].strides, __pyx_t_2, __pyx_pybuffernd_cells.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_neigh.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_neigh.diminfo[0].strides, __pyx_t_4, __pyx_pybuffernd_neigh.diminfo[1].strides))), __pyx_v_ncells, __pyx_v_ndim);
      }

      /* "cgal4py/delaunay/tools.pyx":164
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         sortCellVerts[int32_t](&cells[0,0], &neigh[0,0], ncells, ndim)
 * @cython.boundscheck(False)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":160
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef void _sortCellVerts_int32(np.ndarray[np.int32_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                np.ndarray[np.int32_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_WriteUnraisable("cgal4py.delaunay.tools._sortCellVerts_int32", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
}

/* "cgal4py/delaunay/tools.pyx":168
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef void _sortCellVerts_uint32(np.ndarray[np.uint32_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                 np.ndarray[np.uint32_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */

static void __pyx_f_7cgal4py_8delaunay_5tools__sortCellVerts_uint32(PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_neigh) {
  uint64_t __pyx_v_ncells;
  uint32_t __pyx_v_ndim;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cells;
  __Pyx_Buffer __pyx_pybuffer_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_neigh;
  __Pyx_Buffer __pyx_pybuffer_neigh;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  __Pyx_RefNannySetupContext("_sortCellVerts_uint32", 0);
  __pyx_pybuffer_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_cells.refcount = 0;
  __pyx_pybuffernd_cells.data = NULL;
  __pyx_pybuffernd_cells.rcbuffer = &__pyx_pybuffer_cells;
  __pyx_pybuffer_neigh.pybuffer.buf = NULL;
  __pyx_pybuffer_neigh.refcount = 0;
  __pyx_pybuffernd_neigh.data = NULL;
  __pyx_pybuffernd_neigh.rcbuffer = &__pyx_pybuffer_neigh;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 168, __pyx_L1_error)
  }
  __pyx_pybuffernd_cells.diminfo[0].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cells.diminfo[0].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cells.diminfo[1].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cells.diminfo[1].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer, (PyObject*)__pyx_v_neigh, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 168, __pyx_L1_error)
  }
  __pyx_pybuffernd_neigh.diminfo[0].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_neigh.diminfo[0].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_neigh.diminfo[1].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_neigh.diminfo[1].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[1];

  /* "cgal4py/delaunay/tools.pyx":170
 * cdef void _sortCellVerts_uint32(np.ndarray[np.uint32_t, ndim=2] cells,
 *                                 np.ndarray[np.uint32_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]             # <<<<<<<<<<<<<<
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __pyx_v_ncells = ((uint64_t)(__pyx_v_cells->dimensions[0]));

  /* "cgal4py/delaunay/tools.pyx":171
 *                                 np.ndarray[np.uint32_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]             # <<<<<<<<<<<<<<
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         sortCellVerts[uint32_t](&cells[0,0], &neigh[0,0], ncells, ndim)
 */
  __pyx_v_ndim = ((uint32_t)(__pyx_v_cells->dimensions[1]));

  /* "cgal4py/delaunay/tools.pyx":172
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         sortCellVerts[uint32_t](&cells[0,0], &neigh[0,0], ncells, ndim)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":173
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         sortCellVerts[uint32_t](&cells[0,0], &neigh[0,0], ncells, ndim)             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
        __pyx_t_1 = 0;
        __pyx_t_2 = 0;
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        sortCellVerts<uint32_t>((&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_cells.rcbuffer->pybuffer.buf, __pyx_t_1, __pyx_pybuffernd_cells.diminfo[0].strides, __pyx_t_2, __pyx_pybuffernd_cells.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_neigh.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_neigh.diminfo[0].strides, __pyx_t_4, __pyx_pybuffernd_neigh.diminfo[1].strides))), __pyx_v_ncells, __pyx_v_ndim);
      }

      /* "cgal4py/delaunay/tools.pyx":172
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         sortCellVerts[uint32_t](&cells[0,0], &neigh[0,0], ncells, ndim)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":168
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef void _sortCellVerts_uint32(np.ndarray[np.uint32_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                 np.ndarray[np.uint32_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_WriteUnraisable("cgal4py.delaunay.tools._sortCellVerts_uint32", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
}

/* "cgal4py/delaunay/tools.pyx":177
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_sortCellVerts(cells, neigh):             # <<<<<<<<<<<<<<
 *     r"""Sort the the vertices and neighbors for a single cell such that the
 *     vertices are in descending order.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_11py_sortCellVerts(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7cgal4py_8delaunay_5tools_10py_sortCellVerts[] = "Sort the the vertices and neighbors for a single cell such that the \n    vertices are in descending order.\n\n    Args:\n        cells (np.ndarray of int64): (n, m+1) array of vertex indices  \n            for the n cells in a m-dimensional triangulation. \n        neigh (np.ndarray of int64): (n, m+1) array of neighboring cells \n            for the n cells in a m-dimensional triangulation.\n        i (int): Index of cell that should be sorted.\n\n    ";
static PyMethodDef __pyx_mdef_7cgal4py_8delaunay_5tools_11py_sortCellVerts = {"py_sortCellVerts", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_11py_sortCellVerts, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7cgal4py_8delaunay_5tools_10py_sortCellVerts};
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_11py_sortCellVerts(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_cells = 0;
  PyObject *__pyx_v_neigh = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_sortCellVerts (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cells,&__pyx_n_s_neigh,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cells)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_neigh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_sortCellVerts", 1, 2, 2, 1); __PYX_ERR(0, 177, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_sortCellVerts") < 0)) __PYX_ERR(0, 177, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_cells = values[0];
    __pyx_v_neigh = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_sortCellVerts", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 177, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.py_sortCellVerts", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_10py_sortCellVerts(__pyx_self, __pyx_v_cells, __pyx_v_neigh);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_10py_sortCellVerts(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cells, PyObject *__pyx_v_neigh) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("py_sortCellVerts", 0);

  /* "cgal4py/delaunay/tools.pyx":189
 * 
 *     """
 *     if len(cells.shape) != 2:             # <<<<<<<<<<<<<<
 *         return
 *     if cells.shape[0] == 0:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((__pyx_t_2 != 2) != 0);
  if (__pyx_t_3) {

    /* "cgal4py/delaunay/tools.pyx":190
 *     """
 *     if len(cells.shape) != 2:
 *         return             # <<<<<<<<<<<<<<
 *     if cells.shape[0] == 0:
 *         return
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "cgal4py/delaunay/tools.pyx":189
 * 
 *     """
 *     if len(cells.shape) != 2:             # <<<<<<<<<<<<<<
 *         return
 *     if cells.shape[0] == 0:
 */
  }

  /* "cgal4py/delaunay/tools.pyx":191
 *     if len(cells.shape) != 2:
 *         return
 *     if cells.shape[0] == 0:             # <<<<<<<<<<<<<<
 *         return
 *     if cells.dtype == np.int32:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_t_4, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "cgal4py/delaunay/tools.pyx":192
 *         return
 *     if cells.shape[0] == 0:
 *         return             # <<<<<<<<<<<<<<
 *     if cells.dtype == np.int32:
 *         _sortCellVerts_int32(cells, neigh)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "cgal4py/delaunay/tools.pyx":191
 *     if len(cells.shape) != 2:
 *         return
 *     if cells.shape[0] == 0:             # <<<<<<<<<<<<<<
 *         return
 *     if cells.dtype == np.int32:
 */
  }

  /* "cgal4py/delaunay/tools.pyx":193
 *     if cells.shape[0] == 0:
 *         return
 *     if cells.dtype == np.int32:             # <<<<<<<<<<<<<<
 *         _sortCellVerts_int32(cells, neigh)
 *     elif cells.dtype == np.uint32:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_3) {

    /* "cgal4py/delaunay/tools.pyx":194
 *         return
 *     if cells.dtype == np.int32:
 *         _sortCellVerts_int32(cells, neigh)             # <<<<<<<<<<<<<<
 *     elif cells.dtype == np.uint32:
 *         _sortCellVerts_uint32(cells, neigh)
 */
    if (!(likely(((__pyx_v_cells) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_cells, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 194, __pyx_L1_error)
    if (!(likely(((__pyx_v_neigh) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_neigh, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 194, __pyx_L1_error)
    __pyx_f_7cgal4py_8delaunay_5tools__sortCellVerts_int32(((PyArrayObject *)__pyx_v_cells), ((PyArrayObject *)__pyx_v_neigh));

    /* "cgal4py/delaunay/tools.pyx":193
 *     if cells.shape[0] == 0:
 *         return
 *     if cells.dtype == np.int32:             # <<<<<<<<<<<<<<
 *         _sortCellVerts_int32(cells, neigh)
 *     elif cells.dtype == np.uint32:
 */
    goto __pyx_L5;
  }

  /* "cgal4py/delaunay/tools.pyx":195
 *     if cells.dtype == np.int32:
 *         _sortCellVerts_int32(cells, neigh)
 *     elif cells.dtype == np.uint32:             # <<<<<<<<<<<<<<
 *         _sortCellVerts_uint32(cells, neigh)
 *     elif cells.dtype == np.int64:
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_dtype); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_uint32); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_3) {

    /* "cgal4py/delaunay/tools.pyx":196
 *         _sortCellVerts_int32(cells, neigh)
 *     elif cells.dtype == np.uint32:
 *         _sortCellVerts_uint32(cells, neigh)             # <<<<<<<<<<<<<<
 *     elif cells.dtype == np.int64:
 *         _sortCellVerts_int64(cells, neigh)
 */
    if (!(likely(((__pyx_v_cells) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_cells, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 196, __pyx_L1_error)
    if (!(likely(((__pyx_v_neigh) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_neigh, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 196, __pyx_L1_error)
    __pyx_f_7cgal4py_8delaunay_5tools__sortCellVerts_uint32(((PyArrayObject *)__pyx_v_cells), ((PyArrayObject *)__pyx_v_neigh));

    /* "cgal4py/delaunay/tools.pyx":195
 *     if cells.dtype == np.int32:
 *         _sortCellVerts_int32(cells, neigh)
 *     elif cells.dtype == np.uint32:             # <<<<<<<<<<<<<<
 *         _sortCellVerts_uint32(cells, neigh)
 *     elif cells.dtype == np.int64:
 */
    goto __pyx_L5;
  }

  /* "cgal4py/delaunay/tools.pyx":197
 *     elif cells.dtype == np.uint32:
 *         _sortCellVerts_uint32(cells, neigh)
 *     elif cells.dtype == np.int64:             # <<<<<<<<<<<<<<
 *         _sortCellVerts_int64(cells, neigh)
 *     elif cells.dtype == np.uint64:
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_dtype); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "cgal4py/delaunay/tools.pyx":198
 *         _sortCellVerts_uint32(cells, neigh)
 *     elif cells.dtype == np.int64:
 *         _sortCellVerts_int64(cells, neigh)             # <<<<<<<<<<<<<<
 *     elif cells.dtype == np.uint64:
 *         _sortCellVerts_uint64(cells, neigh)
 */
    if (!(likely(((__pyx_v_cells) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_cells, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 198, __pyx_L1_error)
    if (!(likely(((__pyx_v_neigh) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_neigh, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 198, __pyx_L1_error)
    __pyx_f_7cgal4py_8delaunay_5tools__sortCellVerts_int64(((PyArrayObject *)__pyx_v_cells), ((PyArrayObject *)__pyx_v_neigh));

    /* "cgal4py/delaunay/tools.pyx":197
 *     elif cells.dtype == np.uint32:
 *         _sortCellVerts_uint32(cells, neigh)
 *     elif cells.dtype == np.int64:             # <<<<<<<<<<<<<<
 *         _sortCellVerts_int64(cells, neigh)
 *     elif cells.dtype == np.uint64:
 */
    goto __pyx_L5;
  }

  /* "cgal4py/delaunay/tools.pyx":199
 *     elif cells.dtype == np.int64:
 *         _sortCellVerts_int64(cells, neigh)
 *     elif cells.dtype == np.uint64:             # <<<<<<<<<<<<<<
 *         _sortCellVerts_uint64(cells, neigh)
 *     else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_uint64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(__pyx_t_3)) {

    /* "cgal4py/delaunay/tools.pyx":200
 *         _sortCellVerts_int64(cells, neigh)
 *     elif cells.dtype == np.uint64:
 *         _sortCellVerts_uint64(cells, neigh)             # <<<<<<<<<<<<<<
 *     else:
 *         raise TypeError("Type {} not supported.".format(cells.dtype))
 */
    if (!(likely(((__pyx_v_cells) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_cells, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 200, __pyx_L1_error)
    if (!(likely(((__pyx_v_neigh) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_neigh, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 200, __pyx_L1_error)
    __pyx_f_7cgal4py_8delaunay_5tools__sortCellVerts_uint64(((PyArrayObject *)__pyx_v_cells), ((PyArrayObject *)__pyx_v_neigh));

    /* "cgal4py/delaunay/tools.pyx":199
 *     elif cells.dtype == np.int64:
 *         _sortCellVerts_int64(cells, neigh)
 *     elif cells.dtype == np.uint64:             # <<<<<<<<<<<<<<
 *         _sortCellVerts_uint64(cells, neigh)
 *     else:
 */
    goto __pyx_L5;
  }

  /* "cgal4py/delaunay/tools.pyx":202
 *         _sortCellVerts_uint64(cells, neigh)
 *     else:
 *         raise TypeError("Type {} not supported.".format(cells.dtype))             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Type_not_supported, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 202, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_1};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 202, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_1};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 202, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 202, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 202, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 202, __pyx_L1_error)
  }
  __pyx_L5:;

  /* "cgal4py/delaunay/tools.pyx":177
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_sortCellVerts(cells, neigh):             # <<<<<<<<<<<<<<
 *     r"""Sort the the vertices and neighbors for a single cell such that the
 *     vertices are in descending order.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.py_sortCellVerts", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":206
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _sortSerializedTess_int32(np.ndarray[np.int32_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                               np.ndarray[np.int32_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_13_sortSerializedTess_int32(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7cgal4py_8delaunay_5tools_13_sortSerializedTess_int32 = {"_sortSerializedTess_int32", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_13_sortSerializedTess_int32, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_13_sortSerializedTess_int32(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_cells = 0;
  PyArrayObject *__pyx_v_neigh = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_sortSerializedTess_int32 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cells,&__pyx_n_s_neigh,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cells)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_neigh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_sortSerializedTess_int32", 1, 2, 2, 1); __PYX_ERR(0, 206, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_sortSerializedTess_int32") < 0)) __PYX_ERR(0, 206, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_cells = ((PyArrayObject *)values[0]);
    __pyx_v_neigh = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_sortSerializedTess_int32", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 206, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools._sortSerializedTess_int32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cells), __pyx_ptype_5numpy_ndarray, 1, "cells", 0))) __PYX_ERR(0, 206, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_neigh), __pyx_ptype_5numpy_ndarray, 1, "neigh", 0))) __PYX_ERR(0, 207, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_12_sortSerializedTess_int32(__pyx_self, __pyx_v_cells, __pyx_v_neigh);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_12_sortSerializedTess_int32(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_neigh) {
  uint64_t __pyx_v_ncells;
  uint32_t __pyx_v_ndim;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cells;
  __Pyx_Buffer __pyx_pybuffer_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_neigh;
  __Pyx_Buffer __pyx_pybuffer_neigh;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("_sortSerializedTess_int32", 0);
  __pyx_pybuffer_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_cells.refcount = 0;
  __pyx_pybuffernd_cells.data = NULL;
  __pyx_pybuffernd_cells.rcbuffer = &__pyx_pybuffer_cells;
  __pyx_pybuffer_neigh.pybuffer.buf = NULL;
  __pyx_pybuffer_neigh.refcount = 0;
  __pyx_pybuffernd_neigh.data = NULL;
  __pyx_pybuffernd_neigh.rcbuffer = &__pyx_pybuffer_neigh;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 206, __pyx_L1_error)
  }
  __pyx_pybuffernd_cells.diminfo[0].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cells.diminfo[0].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cells.diminfo[1].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cells.diminfo[1].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer, (PyObject*)__pyx_v_neigh, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 206, __pyx_L1_error)
  }
  __pyx_pybuffernd_neigh.diminfo[0].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_neigh.diminfo[0].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_neigh.diminfo[1].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_neigh.diminfo[1].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[1];

  /* "cgal4py/delaunay/tools.pyx":208
 * def _sortSerializedTess_int32(np.ndarray[np.int32_t, ndim=2] cells,
 *                               np.ndarray[np.int32_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]             # <<<<<<<<<<<<<<
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     if ncells == 0:
 */
  __pyx_v_ncells = ((uint64_t)(__pyx_v_cells->dimensions[0]));

  /* "cgal4py/delaunay/tools.pyx":209
 *                               np.ndarray[np.int32_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]             # <<<<<<<<<<<<<<
 *     if ncells == 0:
 *         return
 */
  __pyx_v_ndim = ((uint32_t)(__pyx_v_cells->dimensions[1]));

  /* "cgal4py/delaunay/tools.pyx":210
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     if ncells == 0:             # <<<<<<<<<<<<<<
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __pyx_t_1 = ((__pyx_v_ncells == 0) != 0);
  if (__pyx_t_1) {

    /* "cgal4py/delaunay/tools.pyx":211
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     if ncells == 0:
 *         return             # <<<<<<<<<<<<<<
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         sortSerializedTess[int32_t](&cells[0,0], &neigh[0,0], ncells, ndim)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "cgal4py/delaunay/tools.pyx":210
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     if ncells == 0:             # <<<<<<<<<<<<<<
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  }

  /* "cgal4py/delaunay/tools.pyx":212
 *     if ncells == 0:
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         sortSerializedTess[int32_t](&cells[0,0], &neigh[0,0], ncells, ndim)
 * @cython.boundscheck(False)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":213
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         sortSerializedTess[int32_t](&cells[0,0], &neigh[0,0], ncells, ndim)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 */
        __pyx_t_2 = 0;
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        __pyx_t_5 = 0;
        sortSerializedTess<int32_t>((&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_cells.rcbuffer->pybuffer.buf, __pyx_t_2, __pyx_pybuffernd_cells.diminfo[0].strides, __pyx_t_3, __pyx_pybuffernd_cells.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_neigh.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_neigh.diminfo[0].strides, __pyx_t_5, __pyx_pybuffernd_neigh.diminfo[1].strides))), __pyx_v_ncells, __pyx_v_ndim);
      }

      /* "cgal4py/delaunay/tools.pyx":212
 *     if ncells == 0:
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         sortSerializedTess[int32_t](&cells[0,0], &neigh[0,0], ncells, ndim)
 * @cython.boundscheck(False)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L6:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":206
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _sortSerializedTess_int32(np.ndarray[np.int32_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                               np.ndarray[np.int32_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cgal4py.delaunay.tools._sortSerializedTess_int32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":216
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _sortSerializedTess_uint32(np.ndarray[np.uint32_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                np.ndarray[np.uint32_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_15_sortSerializedTess_uint32(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7cgal4py_8delaunay_5tools_15_sortSerializedTess_uint32 = {"_sortSerializedTess_uint32", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_15_sortSerializedTess_uint32, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_15_sortSerializedTess_uint32(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_cells = 0;
  PyArrayObject *__pyx_v_neigh = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_sortSerializedTess_uint32 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cells,&__pyx_n_s_neigh,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cells)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_neigh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_sortSerializedTess_uint32", 1, 2, 2, 1); __PYX_ERR(0, 216, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_sortSerializedTess_uint32") < 0)) __PYX_ERR(0, 216, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_cells = ((PyArrayObject *)values[0]);
    __pyx_v_neigh = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_sortSerializedTess_uint32", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 216, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools._sortSerializedTess_uint32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cells), __pyx_ptype_5numpy_ndarray, 1, "cells", 0))) __PYX_ERR(0, 216, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_neigh), __pyx_ptype_5numpy_ndarray, 1, "neigh", 0))) __PYX_ERR(0, 217, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_14_sortSerializedTess_uint32(__pyx_self, __pyx_v_cells, __pyx_v_neigh);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_14_sortSerializedTess_uint32(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_neigh) {
  uint64_t __pyx_v_ncells;
  uint32_t __pyx_v_ndim;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cells;
  __Pyx_Buffer __pyx_pybuffer_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_neigh;
  __Pyx_Buffer __pyx_pybuffer_neigh;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("_sortSerializedTess_uint32", 0);
  __pyx_pybuffer_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_cells.refcount = 0;
  __pyx_pybuffernd_cells.data = NULL;
  __pyx_pybuffernd_cells.rcbuffer = &__pyx_pybuffer_cells;
  __pyx_pybuffer_neigh.pybuffer.buf = NULL;
  __pyx_pybuffer_neigh.refcount = 0;
  __pyx_pybuffernd_neigh.data = NULL;
  __pyx_pybuffernd_neigh.rcbuffer = &__pyx_pybuffer_neigh;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 216, __pyx_L1_error)
  }
  __pyx_pybuffernd_cells.diminfo[0].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cells.diminfo[0].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cells.diminfo[1].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cells.diminfo[1].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer, (PyObject*)__pyx_v_neigh, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 216, __pyx_L1_error)
  }
  __pyx_pybuffernd_neigh.diminfo[0].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_neigh.diminfo[0].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_neigh.diminfo[1].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_neigh.diminfo[1].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[1];

  /* "cgal4py/delaunay/tools.pyx":218
 * def _sortSerializedTess_uint32(np.ndarray[np.uint32_t, ndim=2] cells,
 *                                np.ndarray[np.uint32_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]             # <<<<<<<<<<<<<<
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     if ncells == 0:
 */
  __pyx_v_ncells = ((uint64_t)(__pyx_v_cells->dimensions[0]));

  /* "cgal4py/delaunay/tools.pyx":219
 *                                np.ndarray[np.uint32_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]             # <<<<<<<<<<<<<<
 *     if ncells == 0:
 *         return
 */
  __pyx_v_ndim = ((uint32_t)(__pyx_v_cells->dimensions[1]));

  /* "cgal4py/delaunay/tools.pyx":220
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     if ncells == 0:             # <<<<<<<<<<<<<<
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __pyx_t_1 = ((__pyx_v_ncells == 0) != 0);
  if (__pyx_t_1) {

    /* "cgal4py/delaunay/tools.pyx":221
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     if ncells == 0:
 *         return             # <<<<<<<<<<<<<<
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         sortSerializedTess[uint32_t](&cells[0,0], &neigh[0,0], ncells, ndim)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "cgal4py/delaunay/tools.pyx":220
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     if ncells == 0:             # <<<<<<<<<<<<<<
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  }

  /* "cgal4py/delaunay/tools.pyx":222
 *     if ncells == 0:
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         sortSerializedTess[uint32_t](&cells[0,0], &neigh[0,0], ncells, ndim)
 * @cython.boundscheck(False)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":223
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         sortSerializedTess[uint32_t](&cells[0,0], &neigh[0,0], ncells, ndim)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 */
        __pyx_t_2 = 0;
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        __pyx_t_5 = 0;
        sortSerializedTess<uint32_t>((&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_cells.rcbuffer->pybuffer.buf, __pyx_t_2, __pyx_pybuffernd_cells.diminfo[0].strides, __pyx_t_3, __pyx_pybuffernd_cells.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_neigh.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_neigh.diminfo[0].strides, __pyx_t_5, __pyx_pybuffernd_neigh.diminfo[1].strides))), __pyx_v_ncells, __pyx_v_ndim);
      }

      /* "cgal4py/delaunay/tools.pyx":222
 *     if ncells == 0:
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         sortSerializedTess[uint32_t](&cells[0,0], &neigh[0,0], ncells, ndim)
 * @cython.boundscheck(False)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L6:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":216
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _sortSerializedTess_uint32(np.ndarray[np.uint32_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                np.ndarray[np.uint32_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cgal4py.delaunay.tools._sortSerializedTess_uint32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":226
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _sortSerializedTess_int64(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                               np.ndarray[np.int64_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_17_sortSerializedTess_int64(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7cgal4py_8delaunay_5tools_17_sortSerializedTess_int64 = {"_sortSerializedTess_int64", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_17_sortSerializedTess_int64, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_17_sortSerializedTess_int64(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_cells = 0;
  PyArrayObject *__pyx_v_neigh = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_sortSerializedTess_int64 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cells,&__pyx_n_s_neigh,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cells)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_neigh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_sortSerializedTess_int64", 1, 2, 2, 1); __PYX_ERR(0, 226, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_sortSerializedTess_int64") < 0)) __PYX_ERR(0, 226, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_cells = ((PyArrayObject *)values[0]);
    __pyx_v_neigh = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_sortSerializedTess_int64", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 226, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools._sortSerializedTess_int64", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cells), __pyx_ptype_5numpy_ndarray, 1, "cells", 0))) __PYX_ERR(0, 226, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_neigh), __pyx_ptype_5numpy_ndarray, 1, "neigh", 0))) __PYX_ERR(0, 227, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16_sortSerializedTess_int64(__pyx_self, __pyx_v_cells, __pyx_v_neigh);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16_sortSerializedTess_int64(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_neigh) {
  uint64_t __pyx_v_ncells;
  uint32_t __pyx_v_ndim;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cells;
  __Pyx_Buffer __pyx_pybuffer_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_neigh;
  __Pyx_Buffer __pyx_pybuffer_neigh;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("_sortSerializedTess_int64", 0);
  __pyx_pybuffer_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_cells.refcount = 0;
  __pyx_pybuffernd_cells.data = NULL;
  __pyx_pybuffernd_cells.rcbuffer = &__pyx_pybuffer_cells;
  __pyx_pybuffer_neigh.pybuffer.buf = NULL;
  __pyx_pybuffer_neigh.refcount = 0;
  __pyx_pybuffernd_neigh.data = NULL;
  __pyx_pybuffernd_neigh.rcbuffer = &__pyx_pybuffer_neigh;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 226, __pyx_L1_error)
  }
  __pyx_pybuffernd_cells.diminfo[0].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cells.diminfo[0].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cells.diminfo[1].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cells.diminfo[1].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer, (PyObject*)__pyx_v_neigh, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 226, __pyx_L1_error)
  }
  __pyx_pybuffernd_neigh.diminfo[0].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_neigh.diminfo[0].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_neigh.diminfo[1].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_neigh.diminfo[1].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[1];

  /* "cgal4py/delaunay/tools.pyx":228
 * def _sortSerializedTess_int64(np.ndarray[np.int64_t, ndim=2] cells,
 *                               np.ndarray[np.int64_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]             # <<<<<<<<<<<<<<
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     if ncells == 0:
 */
  __pyx_v_ncells = ((uint64_t)(__pyx_v_cells->dimensions[0]));

  /* "cgal4py/delaunay/tools.pyx":229
 *                               np.ndarray[np.int64_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]             # <<<<<<<<<<<<<<
 *     if ncells == 0:
 *         return
 */
  __pyx_v_ndim = ((uint32_t)(__pyx_v_cells->dimensions[1]));

  /* "cgal4py/delaunay/tools.pyx":230
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     if ncells == 0:             # <<<<<<<<<<<<<<
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __pyx_t_1 = ((__pyx_v_ncells == 0) != 0);
  if (__pyx_t_1) {

    /* "cgal4py/delaunay/tools.pyx":231
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     if ncells == 0:
 *         return             # <<<<<<<<<<<<<<
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         sortSerializedTess[int64_t](&cells[0,0], &neigh[0,0], ncells, ndim)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "cgal4py/delaunay/tools.pyx":230
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     if ncells == 0:             # <<<<<<<<<<<<<<
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  }

  /* "cgal4py/delaunay/tools.pyx":232
 *     if ncells == 0:
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         sortSerializedTess[int64_t](&cells[0,0], &neigh[0,0], ncells, ndim)
 * @cython.boundscheck(False)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":233
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         sortSerializedTess[int64_t](&cells[0,0], &neigh[0,0], ncells, ndim)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 */
        __pyx_t_2 = 0;
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        __pyx_t_5 = 0;
        sortSerializedTess<int64_t>(((int64_t *)(&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int64_t *, __pyx_pybuffernd_cells.rcbuffer->pybuffer.buf, __pyx_t_2, __pyx_pybuffernd_cells.diminfo[0].strides, __pyx_t_3, __pyx_pybuffernd_cells.diminfo[1].strides)))), ((int64_t *)(&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int64_t *, __pyx_pybuffernd_neigh.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_neigh.diminfo[0].strides, __pyx_t_5, __pyx_pybuffernd_neigh.diminfo[1].strides)))), __pyx_v_ncells, __pyx_v_ndim);
      }

      /* "cgal4py/delaunay/tools.pyx":232
 *     if ncells == 0:
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         sortSerializedTess[int64_t](&cells[0,0], &neigh[0,0], ncells, ndim)
 * @cython.boundscheck(False)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L6:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":226
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _sortSerializedTess_int64(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                               np.ndarray[np.int64_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cgal4py.delaunay.tools._sortSerializedTess_int64", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":236
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _sortSerializedTess_uint64(np.ndarray[np.uint64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                np.ndarray[np.uint64_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_19_sortSerializedTess_uint64(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7cgal4py_8delaunay_5tools_19_sortSerializedTess_uint64 = {"_sortSerializedTess_uint64", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_19_sortSerializedTess_uint64, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_19_sortSerializedTess_uint64(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_cells = 0;
  PyArrayObject *__pyx_v_neigh = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_sortSerializedTess_uint64 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cells,&__pyx_n_s_neigh,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cells)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_neigh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_sortSerializedTess_uint64", 1, 2, 2, 1); __PYX_ERR(0, 236, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_sortSerializedTess_uint64") < 0)) __PYX_ERR(0, 236, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_cells = ((PyArrayObject *)values[0]);
    __pyx_v_neigh = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_sortSerializedTess_uint64", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 236, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools._sortSerializedTess_uint64", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cells), __pyx_ptype_5numpy_ndarray, 1, "cells", 0))) __PYX_ERR(0, 236, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_neigh), __pyx_ptype_5numpy_ndarray, 1, "neigh", 0))) __PYX_ERR(0, 237, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_18_sortSerializedTess_uint64(__pyx_self, __pyx_v_cells, __pyx_v_neigh);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_18_sortSerializedTess_uint64(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_neigh) {
  uint64_t __pyx_v_ncells;
  uint32_t __pyx_v_ndim;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cells;
  __Pyx_Buffer __pyx_pybuffer_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_neigh;
  __Pyx_Buffer __pyx_pybuffer_neigh;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("_sortSerializedTess_uint64", 0);
  __pyx_pybuffer_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_cells.refcount = 0;
  __pyx_pybuffernd_cells.data = NULL;
  __pyx_pybuffernd_cells.rcbuffer = &__pyx_pybuffer_cells;
  __pyx_pybuffer_neigh.pybuffer.buf = NULL;
  __pyx_pybuffer_neigh.refcount = 0;
  __pyx_pybuffernd_neigh.data = NULL;
  __pyx_pybuffernd_neigh.rcbuffer = &__pyx_pybuffer_neigh;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 236, __pyx_L1_error)
  }
  __pyx_pybuffernd_cells.diminfo[0].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cells.diminfo[0].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cells.diminfo[1].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cells.diminfo[1].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer, (PyObject*)__pyx_v_neigh, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 236, __pyx_L1_error)
  }
  __pyx_pybuffernd_neigh.diminfo[0].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_neigh.diminfo[0].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_neigh.diminfo[1].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_neigh.diminfo[1].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[1];

  /* "cgal4py/delaunay/tools.pyx":238
 * def _sortSerializedTess_uint64(np.ndarray[np.uint64_t, ndim=2] cells,
 *                                np.ndarray[np.uint64_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]             # <<<<<<<<<<<<<<
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     if ncells == 0:
 */
  __pyx_v_ncells = ((uint64_t)(__pyx_v_cells->dimensions[0]));

  /* "cgal4py/delaunay/tools.pyx":239
 *                                np.ndarray[np.uint64_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]             # <<<<<<<<<<<<<<
 *     if ncells == 0:
 *         return
 */
  __pyx_v_ndim = ((uint32_t)(__pyx_v_cells->dimensions[1]));

  /* "cgal4py/delaunay/tools.pyx":240
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     if ncells == 0:             # <<<<<<<<<<<<<<
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __pyx_t_1 = ((__pyx_v_ncells == 0) != 0);
  if (__pyx_t_1) {

    /* "cgal4py/delaunay/tools.pyx":241
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     if ncells == 0:
 *         return             # <<<<<<<<<<<<<<
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         sortSerializedTess[uint64_t](&cells[0,0], &neigh[0,0], ncells, ndim)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "cgal4py/delaunay/tools.pyx":240
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     if ncells == 0:             # <<<<<<<<<<<<<<
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  }

  /* "cgal4py/delaunay/tools.pyx":242
 *     if ncells == 0:
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         sortSerializedTess[uint64_t](&cells[0,0], &neigh[0,0], ncells, ndim)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":243
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         sortSerializedTess[uint64_t](&cells[0,0], &neigh[0,0], ncells, ndim)             # <<<<<<<<<<<<<<
 * 
 * def py_sortSerializedTess(cells, neigh):
 */
        __pyx_t_2 = 0;
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        __pyx_t_5 = 0;
        sortSerializedTess<uint64_t>((&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_cells.rcbuffer->pybuffer.buf, __pyx_t_2, __pyx_pybuffernd_cells.diminfo[0].strides, __pyx_t_3, __pyx_pybuffernd_cells.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_neigh.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_neigh.diminfo[0].strides, __pyx_t_5, __pyx_pybuffernd_neigh.diminfo[1].strides))), __pyx_v_ncells, __pyx_v_ndim);
      }

      /* "cgal4py/delaunay/tools.pyx":242
 *     if ncells == 0:
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         sortSerializedTess[uint64_t](&cells[0,0], &neigh[0,0], ncells, ndim)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L6:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":236
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _sortSerializedTess_uint64(np.ndarray[np.uint64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                np.ndarray[np.uint64_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cgal4py.delaunay.tools._sortSerializedTess_uint64", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":245
 *         sortSerializedTess[uint64_t](&cells[0,0], &neigh[0,0], ncells, ndim)
 * 
 * def py_sortSerializedTess(cells, neigh):             # <<<<<<<<<<<<<<
 *     r"""Sort serialized triangulation such that the verts for each cell are in
 *     descending order, but the cells are sorted in ascending order by the verts.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_21py_sortSerializedTess(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7cgal4py_8delaunay_5tools_20py_sortSerializedTess[] = "Sort serialized triangulation such that the verts for each cell are in \n    descending order, but the cells are sorted in ascending order by the verts.\n\n    Args:\n        cells (np.ndarray of int64): (n, m+1) array of vertex indices  \n            for the n cells in a m-dimensional triangulation. \n        neigh (np.ndarray of int64): (n, m+1) array of neighboring cells \n\n    ";
static PyMethodDef __pyx_mdef_7cgal4py_8delaunay_5tools_21py_sortSerializedTess = {"py_sortSerializedTess", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_21py_sortSerializedTess, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7cgal4py_8delaunay_5tools_20py_sortSerializedTess};
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_21py_sortSerializedTess(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_cells = 0;
  PyObject *__pyx_v_neigh = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_sortSerializedTess (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cells,&__pyx_n_s_neigh,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cells)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_neigh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_sortSerializedTess", 1, 2, 2, 1); __PYX_ERR(0, 245, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_sortSerializedTess") < 0)) __PYX_ERR(0, 245, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_cells = values[0];
    __pyx_v_neigh = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_sortSerializedTess", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 245, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.py_sortSerializedTess", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20py_sortSerializedTess(__pyx_self, __pyx_v_cells, __pyx_v_neigh);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20py_sortSerializedTess(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cells, PyObject *__pyx_v_neigh) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("py_sortSerializedTess", 0);

  /* "cgal4py/delaunay/tools.pyx":255
 * 
 *     """
 *     if cells.dtype == np.int32:             # <<<<<<<<<<<<<<
 *         _sortSerializedTess_int32(cells, neigh)
 *     elif cells.dtype == np.uint32:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "cgal4py/delaunay/tools.pyx":256
 *     """
 *     if cells.dtype == np.int32:
 *         _sortSerializedTess_int32(cells, neigh)             # <<<<<<<<<<<<<<
 *     elif cells.dtype == np.uint32:
 *         _sortSerializedTess_uint32(cells, neigh)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_sortSerializedTess_int32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_cells, __pyx_v_neigh};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 256, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_cells, __pyx_v_neigh};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 256, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 256, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_1) {
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1); __pyx_t_1 = NULL;
      }
      __Pyx_INCREF(__pyx_v_cells);
      __Pyx_GIVEREF(__pyx_v_cells);
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_cells);
      __Pyx_INCREF(__pyx_v_neigh);
      __Pyx_GIVEREF(__pyx_v_neigh);
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_neigh);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 256, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cgal4py/delaunay/tools.pyx":255
 * 
 *     """
 *     if cells.dtype == np.int32:             # <<<<<<<<<<<<<<
 *         _sortSerializedTess_int32(cells, neigh)
 *     elif cells.dtype == np.uint32:
 */
    goto __pyx_L3;
  }

  /* "cgal4py/delaunay/tools.pyx":257
 *     if cells.dtype == np.int32:
 *         _sortSerializedTess_int32(cells, neigh)
 *     elif cells.dtype == np.uint32:             # <<<<<<<<<<<<<<
 *         _sortSerializedTess_uint32(cells, neigh)
 *     elif cells.dtype == np.int64:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_uint32); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_6, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "cgal4py/delaunay/tools.pyx":258
 *         _sortSerializedTess_int32(cells, neigh)
 *     elif cells.dtype == np.uint32:
 *         _sortSerializedTess_uint32(cells, neigh)             # <<<<<<<<<<<<<<
 *     elif cells.dtype == np.int64:
 *         _sortSerializedTess_int64(cells, neigh)
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_sortSerializedTess_uint32); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_cells, __pyx_v_neigh};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 258, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_cells, __pyx_v_neigh};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 258, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 258, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_v_cells);
      __Pyx_GIVEREF(__pyx_v_cells);
      PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_5, __pyx_v_cells);
      __Pyx_INCREF(__pyx_v_neigh);
      __Pyx_GIVEREF(__pyx_v_neigh);
      PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_5, __pyx_v_neigh);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 258, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "cgal4py/delaunay/tools.pyx":257
 *     if cells.dtype == np.int32:
 *         _sortSerializedTess_int32(cells, neigh)
 *     elif cells.dtype == np.uint32:             # <<<<<<<<<<<<<<
 *         _sortSerializedTess_uint32(cells, neigh)
 *     elif cells.dtype == np.int64:
 */
    goto __pyx_L3;
  }

  /* "cgal4py/delaunay/tools.pyx":259
 *     elif cells.dtype == np.uint32:
 *         _sortSerializedTess_uint32(cells, neigh)
 *     elif cells.dtype == np.int64:             # <<<<<<<<<<<<<<
 *         _sortSerializedTess_int64(cells, neigh)
 *     elif cells.dtype == np.uint64:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_int64); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyObject_RichCompare(__pyx_t_3, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_4) {

    /* "cgal4py/delaunay/tools.pyx":260
 *         _sortSerializedTess_uint32(cells, neigh)
 *     elif cells.dtype == np.int64:
 *         _sortSerializedTess_int64(cells, neigh)             # <<<<<<<<<<<<<<
 *     elif cells.dtype == np.uint64:
 *         _sortSerializedTess_uint64(cells, neigh)
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_sortSerializedTess_int64); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_cells, __pyx_v_neigh};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_cells, __pyx_v_neigh};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_v_cells);
      __Pyx_GIVEREF(__pyx_v_cells);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_5, __pyx_v_cells);
      __Pyx_INCREF(__pyx_v_neigh);
      __Pyx_GIVEREF(__pyx_v_neigh);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_5, __pyx_v_neigh);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "cgal4py/delaunay/tools.pyx":259
 *     elif cells.dtype == np.uint32:
 *         _sortSerializedTess_uint32(cells, neigh)
 *     elif cells.dtype == np.int64:             # <<<<<<<<<<<<<<
 *         _sortSerializedTess_int64(cells, neigh)
 *     elif cells.dtype == np.uint64:
 */
    goto __pyx_L3;
  }

  /* "cgal4py/delaunay/tools.pyx":261
 *     elif cells.dtype == np.int64:
 *         _sortSerializedTess_int64(cells, neigh)
 *     elif cells.dtype == np.uint64:             # <<<<<<<<<<<<<<
 *         _sortSerializedTess_uint64(cells, neigh)
 *     else:
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_dtype); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_uint64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_6, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_4)) {

    /* "cgal4py/delaunay/tools.pyx":262
 *         _sortSerializedTess_int64(cells, neigh)
 *     elif cells.dtype == np.uint64:
 *         _sortSerializedTess_uint64(cells, neigh)             # <<<<<<<<<<<<<<
 *     else:
 *         raise TypeError("Type {} not supported.".format(cells.dtype))
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_sortSerializedTess_uint64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_cells, __pyx_v_neigh};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 262, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_cells, __pyx_v_neigh};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 262, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 262, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_INCREF(__pyx_v_cells);
      __Pyx_GIVEREF(__pyx_v_cells);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_5, __pyx_v_cells);
      __Pyx_INCREF(__pyx_v_neigh);
      __Pyx_GIVEREF(__pyx_v_neigh);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_5, __pyx_v_neigh);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 262, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "cgal4py/delaunay/tools.pyx":261
 *     elif cells.dtype == np.int64:
 *         _sortSerializedTess_int64(cells, neigh)
 *     elif cells.dtype == np.uint64:             # <<<<<<<<<<<<<<
 *         _sortSerializedTess_uint64(cells, neigh)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "cgal4py/delaunay/tools.pyx":264
 *         _sortSerializedTess_uint64(cells, neigh)
 *     else:
 *         raise TypeError("Type {} not supported.".format(cells.dtype))             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Type_not_supported, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_3};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_3};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 264, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 264, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "cgal4py/delaunay/tools.pyx":245
 *         sortSerializedTess[uint64_t](&cells[0,0], &neigh[0,0], ncells, ndim)
 * 
 * def py_sortSerializedTess(cells, neigh):             # <<<<<<<<<<<<<<
 *     r"""Sort serialized triangulation such that the verts for each cell are in
 *     descending order, but the cells are sorted in ascending order by the verts.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.py_sortSerializedTess", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":268
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_quickSort_tess(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                       np.ndarray[np.int64_t, ndim=2] neigh,
 *                       np.ndarray[np.int64_t, ndim=1] idx,
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_23py_quickSort_tess(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7cgal4py_8delaunay_5tools_22py_quickSort_tess[] = "Sort triangulation between two indices such that vert groups are in \n    ascending order.\n\n    Args:\n        cells (np.ndarray of int64): (n, m+1) array of vertex indices  \n            for the n cells in a m-dimensional triangulation. \n        neigh (np.ndarray of int64): (n, m+1) array of neighboring cells \n        idx (np.ndarray of int64): (n,) array of indices that will also be \n            sorted in the same order as the cell info.\n        l (int): Index of cell to start sort at.\n        r (int): Index of cell to stop sort at (inclusive).\n\n    ";
static PyMethodDef __pyx_mdef_7cgal4py_8delaunay_5tools_23py_quickSort_tess = {"py_quickSort_tess", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_23py_quickSort_tess, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7cgal4py_8delaunay_5tools_22py_quickSort_tess};
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_23py_quickSort_tess(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_cells = 0;
  PyArrayObject *__pyx_v_neigh = 0;
  PyArrayObject *__pyx_v_idx = 0;
  int64_t __pyx_v_l;
  int64_t __pyx_v_r;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_quickSort_tess (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cells,&__pyx_n_s_neigh,&__pyx_n_s_idx,&__pyx_n_s_l,&__pyx_n_s_r,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cells)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_neigh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_quickSort_tess", 1, 5, 5, 1); __PYX_ERR(0, 268, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_quickSort_tess", 1, 5, 5, 2); __PYX_ERR(0, 268, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_l)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_quickSort_tess", 1, 5, 5, 3); __PYX_ERR(0, 268, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_quickSort_tess", 1, 5, 5, 4); __PYX_ERR(0, 268, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_quickSort_tess") < 0)) __PYX_ERR(0, 268, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_cells = ((PyArrayObject *)values[0]);
    __pyx_v_neigh = ((PyArrayObject *)values[1]);
    __pyx_v_idx = ((PyArrayObject *)values[2]);
    __pyx_v_l = __Pyx_PyInt_As_int64_t(values[3]); if (unlikely((__pyx_v_l == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 271, __pyx_L3_error)
    __pyx_v_r = __Pyx_PyInt_As_int64_t(values[4]); if (unlikely((__pyx_v_r == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 271, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_quickSort_tess", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 268, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.py_quickSort_tess", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cells), __pyx_ptype_5numpy_ndarray, 1, "cells", 0))) __PYX_ERR(0, 268, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_neigh), __pyx_ptype_5numpy_ndarray, 1, "neigh", 0))) __PYX_ERR(0, 269, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_idx), __pyx_ptype_5numpy_ndarray, 1, "idx", 0))) __PYX_ERR(0, 270, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_22py_quickSort_tess(__pyx_self, __pyx_v_cells, __pyx_v_neigh, __pyx_v_idx, __pyx_v_l, __pyx_v_r);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_22py_quickSort_tess(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_neigh, PyArrayObject *__pyx_v_idx, int64_t __pyx_v_l, int64_t __pyx_v_r) {
  uint32_t __pyx_v_ndim;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cells;
  __Pyx_Buffer __pyx_pybuffer_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx;
  __Pyx_Buffer __pyx_pybuffer_idx;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_neigh;
  __Pyx_Buffer __pyx_pybuffer_neigh;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannySetupContext("py_quickSort_tess", 0);
  __pyx_pybuffer_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_cells.refcount = 0;
  __pyx_pybuffernd_cells.data = NULL;
  __pyx_pybuffernd_cells.rcbuffer = &__pyx_pybuffer_cells;
  __pyx_pybuffer_neigh.pybuffer.buf = NULL;
  __pyx_pybuffer_neigh.refcount = 0;
  __pyx_pybuffernd_neigh.data = NULL;
  __pyx_pybuffernd_neigh.rcbuffer = &__pyx_pybuffer_neigh;
  __pyx_pybuffer_idx.pybuffer.buf = NULL;
  __pyx_pybuffer_idx.refcount = 0;
  __pyx_pybuffernd_idx.data = NULL;
  __pyx_pybuffernd_idx.rcbuffer = &__pyx_pybuffer_idx;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 268, __pyx_L1_error)
  }
  __pyx_pybuffernd_cells.diminfo[0].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cells.diminfo[0].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cells.diminfo[1].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cells.diminfo[1].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer, (PyObject*)__pyx_v_neigh, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 268, __pyx_L1_error)
  }
  __pyx_pybuffernd_neigh.diminfo[0].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_neigh.diminfo[0].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_neigh.diminfo[1].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_neigh.diminfo[1].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 268, __pyx_L1_error)
  }
  __pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];

  /* "cgal4py/delaunay/tools.pyx":285
 * 
 *     """
 *     if cells.shape[0] == 0:             # <<<<<<<<<<<<<<
 *         return
 *     assert(cells.shape[0] == neigh.shape[0])
 */
  __pyx_t_1 = (((__pyx_v_cells->dimensions[0]) == 0) != 0);
  if (__pyx_t_1) {

    /* "cgal4py/delaunay/tools.pyx":286
 *     """
 *     if cells.shape[0] == 0:
 *         return             # <<<<<<<<<<<<<<
 *     assert(cells.shape[0] == neigh.shape[0])
 *     assert(cells.shape[0] == idx.shape[0])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "cgal4py/delaunay/tools.pyx":285
 * 
 *     """
 *     if cells.shape[0] == 0:             # <<<<<<<<<<<<<<
 *         return
 *     assert(cells.shape[0] == neigh.shape[0])
 */
  }

  /* "cgal4py/delaunay/tools.pyx":287
 *     if cells.shape[0] == 0:
 *         return
 *     assert(cells.shape[0] == neigh.shape[0])             # <<<<<<<<<<<<<<
 *     assert(cells.shape[0] == idx.shape[0])
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_cells->dimensions[0]) == (__pyx_v_neigh->dimensions[0])) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 287, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":288
 *         return
 *     assert(cells.shape[0] == neigh.shape[0])
 *     assert(cells.shape[0] == idx.shape[0])             # <<<<<<<<<<<<<<
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_cells->dimensions[0]) == (__pyx_v_idx->dimensions[0])) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 288, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":289
 *     assert(cells.shape[0] == neigh.shape[0])
 *     assert(cells.shape[0] == idx.shape[0])
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]             # <<<<<<<<<<<<<<
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         quickSort_tess[int64_t](&cells[0,0], &neigh[0,0], &idx[0], ndim, l, r)
 */
  __pyx_v_ndim = ((uint32_t)(__pyx_v_cells->dimensions[1]));

  /* "cgal4py/delaunay/tools.pyx":290
 *     assert(cells.shape[0] == idx.shape[0])
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         quickSort_tess[int64_t](&cells[0,0], &neigh[0,0], &idx[0], ndim, l, r)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":291
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         quickSort_tess[int64_t](&cells[0,0], &neigh[0,0], &idx[0], ndim, l, r)             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
        __pyx_t_2 = 0;
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        __pyx_t_5 = 0;
        __pyx_t_6 = 0;
        quickSort_tess<int64_t>(((int64_t *)(&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int64_t *, __pyx_pybuffernd_cells.rcbuffer->pybuffer.buf, __pyx_t_2, __pyx_pybuffernd_cells.diminfo[0].strides, __pyx_t_3, __pyx_pybuffernd_cells.diminfo[1].strides)))), ((int64_t *)(&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int64_t *, __pyx_pybuffernd_neigh.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_neigh.diminfo[0].strides, __pyx_t_5, __pyx_pybuffernd_neigh.diminfo[1].strides)))), ((int64_t *)(&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int64_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_6, __pyx_pybuffernd_idx.diminfo[0].strides)))), __pyx_v_ndim, __pyx_v_l, __pyx_v_r);
      }

      /* "cgal4py/delaunay/tools.pyx":290
 *     assert(cells.shape[0] == idx.shape[0])
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         quickSort_tess[int64_t](&cells[0,0], &neigh[0,0], &idx[0], ndim, l, r)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L6:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":268
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_quickSort_tess(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                       np.ndarray[np.int64_t, ndim=2] neigh,
 *                       np.ndarray[np.int64_t, ndim=1] idx,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cgal4py.delaunay.tools.py_quickSort_tess", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":295
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_partition_tess(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                       np.ndarray[np.int64_t, ndim=2] neigh,
 *                       np.ndarray[np.int64_t, ndim=1] idx,
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_25py_partition_tess(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7cgal4py_8delaunay_5tools_24py_partition_tess[] = "Partition triangulation cells between two cells by value found at a \n    pivot and return the index of the boundary.\n\n    Args:\n        cells (np.ndarray of int64): (n, m+1) array of vertex indices  \n            for the n cells in a m-dimensional triangulation. \n        neigh (np.ndarray of int64): (n, m+1) array of neighboring cells \n        idx (np.ndarray of int64): (n,) array of indices that will also be \n            sorted in the same order as the cell info.\n        l (int): Index of cell to start partition at.\n        r (int): Index of cell to stop partition at (inclusive).\n        p (int): Index of cell that should be used as the pivot.\n\n    Returns:\n        int: Index of the cell at the boundary between the partitions. Cells \n            with indices less than this index are smaller than the pivot cell \n            and cells with indices greater than index are larger than the pivot \n            cell.\n\n    ";
static PyMethodDef __pyx_mdef_7cgal4py_8delaunay_5tools_25py_partition_tess = {"py_partition_tess", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_25py_partition_tess, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7cgal4py_8delaunay_5tools_24py_partition_tess};
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_25py_partition_tess(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_cells = 0;
  PyArrayObject *__pyx_v_neigh = 0;
  PyArrayObject *__pyx_v_idx = 0;
  int64_t __pyx_v_l;
  int64_t __pyx_v_r;
  int64_t __pyx_v_p;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_partition_tess (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cells,&__pyx_n_s_neigh,&__pyx_n_s_idx,&__pyx_n_s_l,&__pyx_n_s_r,&__pyx_n_s_p,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cells)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_neigh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_partition_tess", 1, 6, 6, 1); __PYX_ERR(0, 295, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_partition_tess", 1, 6, 6, 2); __PYX_ERR(0, 295, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_l)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_partition_tess", 1, 6, 6, 3); __PYX_ERR(0, 295, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_partition_tess", 1, 6, 6, 4); __PYX_ERR(0, 295, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_partition_tess", 1, 6, 6, 5); __PYX_ERR(0, 295, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_partition_tess") < 0)) __PYX_ERR(0, 295, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_cells = ((PyArrayObject *)values[0]);
    __pyx_v_neigh = ((PyArrayObject *)values[1]);
    __pyx_v_idx = ((PyArrayObject *)values[2]);
    __pyx_v_l = __Pyx_PyInt_As_int64_t(values[3]); if (unlikely((__pyx_v_l == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 298, __pyx_L3_error)
    __pyx_v_r = __Pyx_PyInt_As_int64_t(values[4]); if (unlikely((__pyx_v_r == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 298, __pyx_L3_error)
    __pyx_v_p = __Pyx_PyInt_As_int64_t(values[5]); if (unlikely((__pyx_v_p == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 298, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_partition_tess", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 295, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.py_partition_tess", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cells), __pyx_ptype_5numpy_ndarray, 1, "cells", 0))) __PYX_ERR(0, 295, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_neigh), __pyx_ptype_5numpy_ndarray, 1, "neigh", 0))) __PYX_ERR(0, 296, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_idx), __pyx_ptype_5numpy_ndarray, 1, "idx", 0))) __PYX_ERR(0, 297, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_24py_partition_tess(__pyx_self, __pyx_v_cells, __pyx_v_neigh, __pyx_v_idx, __pyx_v_l, __pyx_v_r, __pyx_v_p);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_24py_partition_tess(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_neigh, PyArrayObject *__pyx_v_idx, int64_t __pyx_v_l, int64_t __pyx_v_r, int64_t __pyx_v_p) {
  uint32_t __pyx_v_ndim;
  int64_t __pyx_v_out;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cells;
  __Pyx_Buffer __pyx_pybuffer_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx;
  __Pyx_Buffer __pyx_pybuffer_idx;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_neigh;
  __Pyx_Buffer __pyx_pybuffer_neigh;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("py_partition_tess", 0);
  __pyx_pybuffer_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_cells.refcount = 0;
  __pyx_pybuffernd_cells.data = NULL;
  __pyx_pybuffernd_cells.rcbuffer = &__pyx_pybuffer_cells;
  __pyx_pybuffer_neigh.pybuffer.buf = NULL;
  __pyx_pybuffer_neigh.refcount = 0;
  __pyx_pybuffernd_neigh.data = NULL;
  __pyx_pybuffernd_neigh.rcbuffer = &__pyx_pybuffer_neigh;
  __pyx_pybuffer_idx.pybuffer.buf = NULL;
  __pyx_pybuffer_idx.refcount = 0;
  __pyx_pybuffernd_idx.data = NULL;
  __pyx_pybuffernd_idx.rcbuffer = &__pyx_pybuffer_idx;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 295, __pyx_L1_error)
  }
  __pyx_pybuffernd_cells.diminfo[0].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cells.diminfo[0].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cells.diminfo[1].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cells.diminfo[1].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer, (PyObject*)__pyx_v_neigh, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 295, __pyx_L1_error)
  }
  __pyx_pybuffernd_neigh.diminfo[0].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_neigh.diminfo[0].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_neigh.diminfo[1].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_neigh.diminfo[1].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 295, __pyx_L1_error)
  }
  __pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];

  /* "cgal4py/delaunay/tools.pyx":319
 * 
 *     """
 *     if cells.shape[0] == 0:             # <<<<<<<<<<<<<<
 *         return
 *     assert(cells.shape[0] == neigh.shape[0])
 */
  __pyx_t_1 = (((__pyx_v_cells->dimensions[0]) == 0) != 0);
  if (__pyx_t_1) {

    /* "cgal4py/delaunay/tools.pyx":320
 *     """
 *     if cells.shape[0] == 0:
 *         return             # <<<<<<<<<<<<<<
 *     assert(cells.shape[0] == neigh.shape[0])
 *     assert(cells.shape[0] == idx.shape[0])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "cgal4py/delaunay/tools.pyx":319
 * 
 *     """
 *     if cells.shape[0] == 0:             # <<<<<<<<<<<<<<
 *         return
 *     assert(cells.shape[0] == neigh.shape[0])
 */
  }

  /* "cgal4py/delaunay/tools.pyx":321
 *     if cells.shape[0] == 0:
 *         return
 *     assert(cells.shape[0] == neigh.shape[0])             # <<<<<<<<<<<<<<
 *     assert(cells.shape[0] == idx.shape[0])
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_cells->dimensions[0]) == (__pyx_v_neigh->dimensions[0])) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 321, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":322
 *         return
 *     assert(cells.shape[0] == neigh.shape[0])
 *     assert(cells.shape[0] == idx.shape[0])             # <<<<<<<<<<<<<<
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     cdef int64_t out
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_cells->dimensions[0]) == (__pyx_v_idx->dimensions[0])) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 322, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":323
 *     assert(cells.shape[0] == neigh.shape[0])
 *     assert(cells.shape[0] == idx.shape[0])
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]             # <<<<<<<<<<<<<<
 *     cdef int64_t out
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __pyx_v_ndim = ((uint32_t)(__pyx_v_cells->dimensions[1]));

  /* "cgal4py/delaunay/tools.pyx":325
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     cdef int64_t out
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         out = partition_tess[int64_t](&cells[0,0], &neigh[0,0], &idx[0],
 *                                       ndim, l, r, p)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":326
 *     cdef int64_t out
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         out = partition_tess[int64_t](&cells[0,0], &neigh[0,0], &idx[0],             # <<<<<<<<<<<<<<
 *                                       ndim, l, r, p)
 *     return out
 */
        __pyx_t_2 = 0;
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        __pyx_t_5 = 0;
        __pyx_t_6 = 0;

        /* "cgal4py/delaunay/tools.pyx":327
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         out = partition_tess[int64_t](&cells[0,0], &neigh[0,0], &idx[0],
 *                                       ndim, l, r, p)             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
        __pyx_v_out = partition_tess<int64_t>(((int64_t *)(&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int64_t *, __pyx_pybuffernd_cells.rcbuffer->pybuffer.buf, __pyx_t_2, __pyx_pybuffernd_cells.diminfo[0].strides, __pyx_t_3, __pyx_pybuffernd_cells.diminfo[1].strides)))), ((int64_t *)(&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int64_t *, __pyx_pybuffernd_neigh.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_neigh.diminfo[0].strides, __pyx_t_5, __pyx_pybuffernd_neigh.diminfo[1].strides)))), ((int64_t *)(&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int64_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_6, __pyx_pybuffernd_idx.diminfo[0].strides)))), __pyx_v_ndim, __pyx_v_l, __pyx_v_r, __pyx_v_p);
      }

      /* "cgal4py/delaunay/tools.pyx":325
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     cdef int64_t out
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         out = partition_tess[int64_t](&cells[0,0], &neigh[0,0], &idx[0],
 *                                       ndim, l, r, p)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L6:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":328
 *         out = partition_tess[int64_t](&cells[0,0], &neigh[0,0], &idx[0],
 *                                       ndim, l, r, p)
 *     return out             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = __Pyx_PyInt_From_int64_t(__pyx_v_out); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "cgal4py/delaunay/tools.pyx":295
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_partition_tess(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                       np.ndarray[np.int64_t, ndim=2] neigh,
 *                       np.ndarray[np.int64_t, ndim=1] idx,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cgal4py.delaunay.tools.py_partition_tess", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":332
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef void _arg_sortCellVerts_int64(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                    np.ndarray[np.uint32_t, ndim=2] idx_verts):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */

static void __pyx_f_7cgal4py_8delaunay_5tools__arg_sortCellVerts_int64(PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_idx_verts) {
  uint64_t __pyx_v_ncells;
  uint32_t __pyx_v_ndim;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cells;
  __Pyx_Buffer __pyx_pybuffer_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx_verts;
  __Pyx_Buffer __pyx_pybuffer_idx_verts;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  __Pyx_RefNannySetupContext("_arg_sortCellVerts_int64", 0);
  __pyx_pybuffer_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_cells.refcount = 0;
  __pyx_pybuffernd_cells.data = NULL;
  __pyx_pybuffernd_cells.rcbuffer = &__pyx_pybuffer_cells;
  __pyx_pybuffer_idx_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_idx_verts.refcount = 0;
  __pyx_pybuffernd_idx_verts.data = NULL;
  __pyx_pybuffernd_idx_verts.rcbuffer = &__pyx_pybuffer_idx_verts;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 332, __pyx_L1_error)
  }
  __pyx_pybuffernd_cells.diminfo[0].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cells.diminfo[0].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cells.diminfo[1].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cells.diminfo[1].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 332, __pyx_L1_error)
  }
  __pyx_pybuffernd_idx_verts.diminfo[0].strides = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx_verts.diminfo[0].shape = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_idx_verts.diminfo[1].strides = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_idx_verts.diminfo[1].shape = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.shape[1];

  /* "cgal4py/delaunay/tools.pyx":334
 * cdef void _arg_sortCellVerts_int64(np.ndarray[np.int64_t, ndim=2] cells,
 *                                    np.ndarray[np.uint32_t, ndim=2] idx_verts):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]             # <<<<<<<<<<<<<<
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __pyx_v_ncells = ((uint64_t)(__pyx_v_cells->dimensions[0]));

  /* "cgal4py/delaunay/tools.pyx":335
 *                                    np.ndarray[np.uint32_t, ndim=2] idx_verts):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]             # <<<<<<<<<<<<<<
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         arg_sortCellVerts[int64_t](&cells[0,0], &idx_verts[0,0], ncells, ndim)
 */
  __pyx_v_ndim = ((uint32_t)(__pyx_v_cells->dimensions[1]));

  /* "cgal4py/delaunay/tools.pyx":336
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         arg_sortCellVerts[int64_t](&cells[0,0], &idx_verts[0,0], ncells, ndim)
 * @cython.boundscheck(False)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":337
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         arg_sortCellVerts[int64_t](&cells[0,0], &idx_verts[0,0], ncells, ndim)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 */
        __pyx_t_1 = 0;
        __pyx_t_2 = 0;
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        arg_sortCellVerts<int64_t>(((int64_t *)(&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int64_t *, __pyx_pybuffernd_cells.rcbuffer->pybuffer.buf, __pyx_t_1, __pyx_pybuffernd_cells.diminfo[0].strides, __pyx_t_2, __pyx_pybuffernd_cells.diminfo[1].strides)))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_idx_verts.diminfo[0].strides, __pyx_t_4, __pyx_pybuffernd_idx_verts.diminfo[1].strides))), __pyx_v_ncells, __pyx_v_ndim);
      }

      /* "cgal4py/delaunay/tools.pyx":336
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         arg_sortCellVerts[int64_t](&cells[0,0], &idx_verts[0,0], ncells, ndim)
 * @cython.boundscheck(False)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":332
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef void _arg_sortCellVerts_int64(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                    np.ndarray[np.uint32_t, ndim=2] idx_verts):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_WriteUnraisable("cgal4py.delaunay.tools._arg_sortCellVerts_int64", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
}

/* "cgal4py/delaunay/tools.pyx":340
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef void _arg_sortCellVerts_uint64(np.ndarray[np.uint64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                     np.ndarray[np.uint32_t, ndim=2] idx_verts):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */

static void __pyx_f_7cgal4py_8delaunay_5tools__arg_sortCellVerts_uint64(PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_idx_verts) {
  uint64_t __pyx_v_ncells;
  uint32_t __pyx_v_ndim;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cells;
  __Pyx_Buffer __pyx_pybuffer_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx_verts;
  __Pyx_Buffer __pyx_pybuffer_idx_verts;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  __Pyx_RefNannySetupContext("_arg_sortCellVerts_uint64", 0);
  __pyx_pybuffer_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_cells.refcount = 0;
  __pyx_pybuffernd_cells.data = NULL;
  __pyx_pybuffernd_cells.rcbuffer = &__pyx_pybuffer_cells;
  __pyx_pybuffer_idx_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_idx_verts.refcount = 0;
  __pyx_pybuffernd_idx_verts.data = NULL;
  __pyx_pybuffernd_idx_verts.rcbuffer = &__pyx_pybuffer_idx_verts;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 340, __pyx_L1_error)
  }
  __pyx_pybuffernd_cells.diminfo[0].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cells.diminfo[0].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cells.diminfo[1].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cells.diminfo[1].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 340, __pyx_L1_error)
  }
  __pyx_pybuffernd_idx_verts.diminfo[0].strides = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx_verts.diminfo[0].shape = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_idx_verts.diminfo[1].strides = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_idx_verts.diminfo[1].shape = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.shape[1];

  /* "cgal4py/delaunay/tools.pyx":342
 * cdef void _arg_sortCellVerts_uint64(np.ndarray[np.uint64_t, ndim=2] cells,
 *                                     np.ndarray[np.uint32_t, ndim=2] idx_verts):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]             # <<<<<<<<<<<<<<
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __pyx_v_ncells = ((uint64_t)(__pyx_v_cells->dimensions[0]));

  /* "cgal4py/delaunay/tools.pyx":343
 *                                     np.ndarray[np.uint32_t, ndim=2] idx_verts):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]             # <<<<<<<<<<<<<<
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         arg_sortCellVerts[uint64_t](&cells[0,0], &idx_verts[0,0], ncells, ndim)
 */
  __pyx_v_ndim = ((uint32_t)(__pyx_v_cells->dimensions[1]));

  /* "cgal4py/delaunay/tools.pyx":344
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         arg_sortCellVerts[uint64_t](&cells[0,0], &idx_verts[0,0], ncells, ndim)
 * @cython.boundscheck(False)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":345
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         arg_sortCellVerts[uint64_t](&cells[0,0], &idx_verts[0,0], ncells, ndim)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 */
        __pyx_t_1 = 0;
        __pyx_t_2 = 0;
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        arg_sortCellVerts<uint64_t>((&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_cells.rcbuffer->pybuffer.buf, __pyx_t_1, __pyx_pybuffernd_cells.diminfo[0].strides, __pyx_t_2, __pyx_pybuffernd_cells.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_idx_verts.diminfo[0].strides, __pyx_t_4, __pyx_pybuffernd_idx_verts.diminfo[1].strides))), __pyx_v_ncells, __pyx_v_ndim);
      }

      /* "cgal4py/delaunay/tools.pyx":344
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         arg_sortCellVerts[uint64_t](&cells[0,0], &idx_verts[0,0], ncells, ndim)
 * @cython.boundscheck(False)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":340
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef void _arg_sortCellVerts_uint64(np.ndarray[np.uint64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                     np.ndarray[np.uint32_t, ndim=2] idx_verts):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_WriteUnraisable("cgal4py.delaunay.tools._arg_sortCellVerts_uint64", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
}

/* "cgal4py/delaunay/tools.pyx":348
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef void _arg_sortCellVerts_int32(np.ndarray[np.int32_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                    np.ndarray[np.uint32_t, ndim=2] idx_verts):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */

static void __pyx_f_7cgal4py_8delaunay_5tools__arg_sortCellVerts_int32(PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_idx_verts) {
  uint64_t __pyx_v_ncells;
  uint32_t __pyx_v_ndim;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cells;
  __Pyx_Buffer __pyx_pybuffer_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx_verts;
  __Pyx_Buffer __pyx_pybuffer_idx_verts;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  __Pyx_RefNannySetupContext("_arg_sortCellVerts_int32", 0);
  __pyx_pybuffer_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_cells.refcount = 0;
  __pyx_pybuffernd_cells.data = NULL;
  __pyx_pybuffernd_cells.rcbuffer = &__pyx_pybuffer_cells;
  __pyx_pybuffer_idx_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_idx_verts.refcount = 0;
  __pyx_pybuffernd_idx_verts.data = NULL;
  __pyx_pybuffernd_idx_verts.rcbuffer = &__pyx_pybuffer_idx_verts;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 348, __pyx_L1_error)
  }
  __pyx_pybuffernd_cells.diminfo[0].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cells.diminfo[0].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cells.diminfo[1].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cells.diminfo[1].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 348, __pyx_L1_error)
  }
  __pyx_pybuffernd_idx_verts.diminfo[0].strides = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx_verts.diminfo[0].shape = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_idx_verts.diminfo[1].strides = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_idx_verts.diminfo[1].shape = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.shape[1];

  /* "cgal4py/delaunay/tools.pyx":350
 * cdef void _arg_sortCellVerts_int32(np.ndarray[np.int32_t, ndim=2] cells,
 *                                    np.ndarray[np.uint32_t, ndim=2] idx_verts):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]             # <<<<<<<<<<<<<<
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __pyx_v_ncells = ((uint64_t)(__pyx_v_cells->dimensions[0]));

  /* "cgal4py/delaunay/tools.pyx":351
 *                                    np.ndarray[np.uint32_t, ndim=2] idx_verts):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]             # <<<<<<<<<<<<<<
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         arg_sortCellVerts[int32_t](&cells[0,0], &idx_verts[0,0], ncells, ndim)
 */
  __pyx_v_ndim = ((uint32_t)(__pyx_v_cells->dimensions[1]));

  /* "cgal4py/delaunay/tools.pyx":352
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         arg_sortCellVerts[int32_t](&cells[0,0], &idx_verts[0,0], ncells, ndim)
 * @cython.boundscheck(False)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":353
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         arg_sortCellVerts[int32_t](&cells[0,0], &idx_verts[0,0], ncells, ndim)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 */
        __pyx_t_1 = 0;
        __pyx_t_2 = 0;
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        arg_sortCellVerts<int32_t>((&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_cells.rcbuffer->pybuffer.buf, __pyx_t_1, __pyx_pybuffernd_cells.diminfo[0].strides, __pyx_t_2, __pyx_pybuffernd_cells.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_idx_verts.diminfo[0].strides, __pyx_t_4, __pyx_pybuffernd_idx_verts.diminfo[1].strides))), __pyx_v_ncells, __pyx_v_ndim);
      }

      /* "cgal4py/delaunay/tools.pyx":352
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         arg_sortCellVerts[int32_t](&cells[0,0], &idx_verts[0,0], ncells, ndim)
 * @cython.boundscheck(False)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":348
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef void _arg_sortCellVerts_int32(np.ndarray[np.int32_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                    np.ndarray[np.uint32_t, ndim=2] idx_verts):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_WriteUnraisable("cgal4py.delaunay.tools._arg_sortCellVerts_int32", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
}

/* "cgal4py/delaunay/tools.pyx":356
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef void _arg_sortCellVerts_uint32(np.ndarray[np.uint32_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                     np.ndarray[np.uint32_t, ndim=2] idx_verts):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */

static void __pyx_f_7cgal4py_8delaunay_5tools__arg_sortCellVerts_uint32(PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_idx_verts) {
  uint64_t __pyx_v_ncells;
  uint32_t __pyx_v_ndim;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cells;
  __Pyx_Buffer __pyx_pybuffer_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx_verts;
  __Pyx_Buffer __pyx_pybuffer_idx_verts;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  __Pyx_RefNannySetupContext("_arg_sortCellVerts_uint32", 0);
  __pyx_pybuffer_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_cells.refcount = 0;
  __pyx_pybuffernd_cells.data = NULL;
  __pyx_pybuffernd_cells.rcbuffer = &__pyx_pybuffer_cells;
  __pyx_pybuffer_idx_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_idx_verts.refcount = 0;
  __pyx_pybuffernd_idx_verts.data = NULL;
  __pyx_pybuffernd_idx_verts.rcbuffer = &__pyx_pybuffer_idx_verts;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 356, __pyx_L1_error)
  }
  __pyx_pybuffernd_cells.diminfo[0].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cells.diminfo[0].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cells.diminfo[1].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cells.diminfo[1].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 356, __pyx_L1_error)
  }
  __pyx_pybuffernd_idx_verts.diminfo[0].strides = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx_verts.diminfo[0].shape = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_idx_verts.diminfo[1].strides = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_idx_verts.diminfo[1].shape = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.shape[1];

  /* "cgal4py/delaunay/tools.pyx":358
 * cdef void _arg_sortCellVerts_uint32(np.ndarray[np.uint32_t, ndim=2] cells,
 *                                     np.ndarray[np.uint32_t, ndim=2] idx_verts):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]             # <<<<<<<<<<<<<<
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __pyx_v_ncells = ((uint64_t)(__pyx_v_cells->dimensions[0]));

  /* "cgal4py/delaunay/tools.pyx":359
 *                                     np.ndarray[np.uint32_t, ndim=2] idx_verts):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]             # <<<<<<<<<<<<<<
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         arg_sortCellVerts[uint32_t](&cells[0,0], &idx_verts[0,0], ncells, ndim)
 */
  __pyx_v_ndim = ((uint32_t)(__pyx_v_cells->dimensions[1]));

  /* "cgal4py/delaunay/tools.pyx":360
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         arg_sortCellVerts[uint32_t](&cells[0,0], &idx_verts[0,0], ncells, ndim)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":361
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         arg_sortCellVerts[uint32_t](&cells[0,0], &idx_verts[0,0], ncells, ndim)             # <<<<<<<<<<<<<<
 * 
 * def py_arg_sortCellVerts(cells):
 */
        __pyx_t_1 = 0;
        __pyx_t_2 = 0;
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        arg_sortCellVerts<uint32_t>((&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_cells.rcbuffer->pybuffer.buf, __pyx_t_1, __pyx_pybuffernd_cells.diminfo[0].strides, __pyx_t_2, __pyx_pybuffernd_cells.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_idx_verts.diminfo[0].strides, __pyx_t_4, __pyx_pybuffernd_idx_verts.diminfo[1].strides))), __pyx_v_ncells, __pyx_v_ndim);
      }

      /* "cgal4py/delaunay/tools.pyx":360
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         arg_sortCellVerts[uint32_t](&cells[0,0], &idx_verts[0,0], ncells, ndim)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":356
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef void _arg_sortCellVerts_uint32(np.ndarray[np.uint32_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                     np.ndarray[np.uint32_t, ndim=2] idx_verts):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_WriteUnraisable("cgal4py.delaunay.tools._arg_sortCellVerts_uint32", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
}

/* "cgal4py/delaunay/tools.pyx":363
 *         arg_sortCellVerts[uint32_t](&cells[0,0], &idx_verts[0,0], ncells, ndim)
 * 
 * def py_arg_sortCellVerts(cells):             # <<<<<<<<<<<<<<
 *     r"""Sort the the vertices and neighbors for a single cell such that the
 *     vertices are in descending order.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_27py_arg_sortCellVerts(PyObject *__pyx_self, PyObject *__pyx_v_cells); /*proto*/
static char __pyx_doc_7cgal4py_8delaunay_5tools_26py_arg_sortCellVerts[] = "Sort the the vertices and neighbors for a single cell such that the \n    vertices are in descending order.\n\n    Args:\n        cells (np.ndarray of int64): (n, m+1) array of vertex indices  \n            for the n cells in a m-dimensional triangulation. \n        i (int): Index of cell that should be sorted.\n\n    Returns:\n        idx_verts (np.ndarray of uint32): (n, m+1) array of indices to sort \n            vertices in decending order for each cell.\n\n    ";
static PyMethodDef __pyx_mdef_7cgal4py_8delaunay_5tools_27py_arg_sortCellVerts = {"py_arg_sortCellVerts", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_27py_arg_sortCellVerts, METH_O, __pyx_doc_7cgal4py_8delaunay_5tools_26py_arg_sortCellVerts};
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_27py_arg_sortCellVerts(PyObject *__pyx_self, PyObject *__pyx_v_cells) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_arg_sortCellVerts (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_26py_arg_sortCellVerts(__pyx_self, ((PyObject *)__pyx_v_cells));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_26py_arg_sortCellVerts(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cells) {
  PyArrayObject *__pyx_v_idx_verts = 0;
  int __pyx_v_i;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx_verts;
  __Pyx_Buffer __pyx_pybuffer_idx_verts;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyArrayObject *__pyx_t_9 = NULL;
  long __pyx_t_10;
  long __pyx_t_11;
  __Pyx_RefNannySetupContext("py_arg_sortCellVerts", 0);
  __pyx_pybuffer_idx_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_idx_verts.refcount = 0;
  __pyx_pybuffernd_idx_verts.data = NULL;
  __pyx_pybuffernd_idx_verts.rcbuffer = &__pyx_pybuffer_idx_verts;

  /* "cgal4py/delaunay/tools.pyx":377
 * 
 *     """
 *     if len(cells.shape) != 2:             # <<<<<<<<<<<<<<
 *         return
 *     if cells.shape[0] == 0:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((__pyx_t_2 != 2) != 0);
  if (__pyx_t_3) {

    /* "cgal4py/delaunay/tools.pyx":378
 *     """
 *     if len(cells.shape) != 2:
 *         return             # <<<<<<<<<<<<<<
 *     if cells.shape[0] == 0:
 *         return
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "cgal4py/delaunay/tools.pyx":377
 * 
 *     """
 *     if len(cells.shape) != 2:             # <<<<<<<<<<<<<<
 *         return
 *     if cells.shape[0] == 0:
 */
  }

  /* "cgal4py/delaunay/tools.pyx":379
 *     if len(cells.shape) != 2:
 *         return
 *     if cells.shape[0] == 0:             # <<<<<<<<<<<<<<
 *         return
 *     cdef np.ndarray[np.uint32_t, ndim=2] idx_verts = np.zeros(cells.shape, 'uint32')
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_t_4, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "cgal4py/delaunay/tools.pyx":380
 *         return
 *     if cells.shape[0] == 0:
 *         return             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.uint32_t, ndim=2] idx_verts = np.zeros(cells.shape, 'uint32')
 *     cdef int i
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "cgal4py/delaunay/tools.pyx":379
 *     if len(cells.shape) != 2:
 *         return
 *     if cells.shape[0] == 0:             # <<<<<<<<<<<<<<
 *         return
 *     cdef np.ndarray[np.uint32_t, ndim=2] idx_verts = np.zeros(cells.shape, 'uint32')
 */
  }

  /* "cgal4py/delaunay/tools.pyx":381
 *     if cells.shape[0] == 0:
 *         return
 *     cdef np.ndarray[np.uint32_t, ndim=2] idx_verts = np.zeros(cells.shape, 'uint32')             # <<<<<<<<<<<<<<
 *     cdef int i
 *     for i in range(cells.shape[1]):
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_n_s_uint32};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 381, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_n_s_uint32};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 381, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_4);
    __Pyx_INCREF(__pyx_n_s_uint32);
    __Pyx_GIVEREF(__pyx_n_s_uint32);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_n_s_uint32);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 381, __pyx_L1_error)
  __pyx_t_9 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer, (PyObject*)__pyx_t_9, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_idx_verts = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 381, __pyx_L1_error)
    } else {__pyx_pybuffernd_idx_verts.diminfo[0].strides = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx_verts.diminfo[0].shape = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_idx_verts.diminfo[1].strides = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_idx_verts.diminfo[1].shape = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_9 = 0;
  __pyx_v_idx_verts = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":383
 *     cdef np.ndarray[np.uint32_t, ndim=2] idx_verts = np.zeros(cells.shape, 'uint32')
 *     cdef int i
 *     for i in range(cells.shape[1]):             # <<<<<<<<<<<<<<
 *         idx_verts[:,i] = <np.uint32_t>i
 *     if cells.dtype == np.int32:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_10 = __Pyx_PyInt_As_long(__pyx_t_5); if (unlikely((__pyx_t_10 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_11 = __pyx_t_10;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_11; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "cgal4py/delaunay/tools.pyx":384
 *     cdef int i
 *     for i in range(cells.shape[1]):
 *         idx_verts[:,i] = <np.uint32_t>i             # <<<<<<<<<<<<<<
 *     if cells.dtype == np.int32:
 *         _arg_sortCellVerts_int32(cells, idx_verts)
 */
    __pyx_t_5 = __Pyx_PyInt_From_npy_uint32(((__pyx_t_5numpy_uint32_t)__pyx_v_i)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 384, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 384, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 384, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_slice_);
    __Pyx_GIVEREF(__pyx_slice_);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_slice_);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_1);
    __pyx_t_1 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_idx_verts), __pyx_t_8, __pyx_t_5) < 0)) __PYX_ERR(0, 384, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "cgal4py/delaunay/tools.pyx":385
 *     for i in range(cells.shape[1]):
 *         idx_verts[:,i] = <np.uint32_t>i
 *     if cells.dtype == np.int32:             # <<<<<<<<<<<<<<
 *         _arg_sortCellVerts_int32(cells, idx_verts)
 *     elif cells.dtype == np.uint32:
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_dtype); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_int32); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyObject_RichCompare(__pyx_t_5, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (__pyx_t_3) {

    /* "cgal4py/delaunay/tools.pyx":386
 *         idx_verts[:,i] = <np.uint32_t>i
 *     if cells.dtype == np.int32:
 *         _arg_sortCellVerts_int32(cells, idx_verts)             # <<<<<<<<<<<<<<
 *     elif cells.dtype == np.uint32:
 *         _arg_sortCellVerts_uint32(cells, idx_verts)
 */
    if (!(likely(((__pyx_v_cells) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_cells, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 386, __pyx_L1_error)
    __pyx_f_7cgal4py_8delaunay_5tools__arg_sortCellVerts_int32(((PyArrayObject *)__pyx_v_cells), ((PyArrayObject *)__pyx_v_idx_verts));

    /* "cgal4py/delaunay/tools.pyx":385
 *     for i in range(cells.shape[1]):
 *         idx_verts[:,i] = <np.uint32_t>i
 *     if cells.dtype == np.int32:             # <<<<<<<<<<<<<<
 *         _arg_sortCellVerts_int32(cells, idx_verts)
 *     elif cells.dtype == np.uint32:
 */
    goto __pyx_L7;
  }

  /* "cgal4py/delaunay/tools.pyx":387
 *     if cells.dtype == np.int32:
 *         _arg_sortCellVerts_int32(cells, idx_verts)
 *     elif cells.dtype == np.uint32:             # <<<<<<<<<<<<<<
 *         _arg_sortCellVerts_uint32(cells, idx_verts)
 *     elif cells.dtype == np.int64:
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_dtype); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_uint32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_8, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "cgal4py/delaunay/tools.pyx":388
 *         _arg_sortCellVerts_int32(cells, idx_verts)
 *     elif cells.dtype == np.uint32:
 *         _arg_sortCellVerts_uint32(cells, idx_verts)             # <<<<<<<<<<<<<<
 *     elif cells.dtype == np.int64:
 *         _arg_sortCellVerts_int64(cells, idx_verts)
 */
    if (!(likely(((__pyx_v_cells) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_cells, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 388, __pyx_L1_error)
    __pyx_f_7cgal4py_8delaunay_5tools__arg_sortCellVerts_uint32(((PyArrayObject *)__pyx_v_cells), ((PyArrayObject *)__pyx_v_idx_verts));

    /* "cgal4py/delaunay/tools.pyx":387
 *     if cells.dtype == np.int32:
 *         _arg_sortCellVerts_int32(cells, idx_verts)
 *     elif cells.dtype == np.uint32:             # <<<<<<<<<<<<<<
 *         _arg_sortCellVerts_uint32(cells, idx_verts)
 *     elif cells.dtype == np.int64:
 */
    goto __pyx_L7;
  }

  /* "cgal4py/delaunay/tools.pyx":389
 *     elif cells.dtype == np.uint32:
 *         _arg_sortCellVerts_uint32(cells, idx_verts)
 *     elif cells.dtype == np.int64:             # <<<<<<<<<<<<<<
 *         _arg_sortCellVerts_int64(cells, idx_verts)
 *     elif cells.dtype == np.uint64:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_int64); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_3) {

    /* "cgal4py/delaunay/tools.pyx":390
 *         _arg_sortCellVerts_uint32(cells, idx_verts)
 *     elif cells.dtype == np.int64:
 *         _arg_sortCellVerts_int64(cells, idx_verts)             # <<<<<<<<<<<<<<
 *     elif cells.dtype == np.uint64:
 *         _arg_sortCellVerts_uint64(cells, idx_verts)
 */
    if (!(likely(((__pyx_v_cells) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_cells, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 390, __pyx_L1_error)
    __pyx_f_7cgal4py_8delaunay_5tools__arg_sortCellVerts_int64(((PyArrayObject *)__pyx_v_cells), ((PyArrayObject *)__pyx_v_idx_verts));

    /* "cgal4py/delaunay/tools.pyx":389
 *     elif cells.dtype == np.uint32:
 *         _arg_sortCellVerts_uint32(cells, idx_verts)
 *     elif cells.dtype == np.int64:             # <<<<<<<<<<<<<<
 *         _arg_sortCellVerts_int64(cells, idx_verts)
 *     elif cells.dtype == np.uint64:
 */
    goto __pyx_L7;
  }

  /* "cgal4py/delaunay/tools.pyx":391
 *     elif cells.dtype == np.int64:
 *         _arg_sortCellVerts_int64(cells, idx_verts)
 *     elif cells.dtype == np.uint64:             # <<<<<<<<<<<<<<
 *         _arg_sortCellVerts_uint64(cells, idx_verts)
 *     else:
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_dtype); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_uint64); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyObject_RichCompare(__pyx_t_5, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (likely(__pyx_t_3)) {

    /* "cgal4py/delaunay/tools.pyx":392
 *         _arg_sortCellVerts_int64(cells, idx_verts)
 *     elif cells.dtype == np.uint64:
 *         _arg_sortCellVerts_uint64(cells, idx_verts)             # <<<<<<<<<<<<<<
 *     else:
 *         raise TypeError("Type {} not supported.".format(cells.dtype))
 */
    if (!(likely(((__pyx_v_cells) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_cells, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 392, __pyx_L1_error)
    __pyx_f_7cgal4py_8delaunay_5tools__arg_sortCellVerts_uint64(((PyArrayObject *)__pyx_v_cells), ((PyArrayObject *)__pyx_v_idx_verts));

    /* "cgal4py/delaunay/tools.pyx":391
 *     elif cells.dtype == np.int64:
 *         _arg_sortCellVerts_int64(cells, idx_verts)
 *     elif cells.dtype == np.uint64:             # <<<<<<<<<<<<<<
 *         _arg_sortCellVerts_uint64(cells, idx_verts)
 *     else:
 */
    goto __pyx_L7;
  }

  /* "cgal4py/delaunay/tools.pyx":394
 *         _arg_sortCellVerts_uint64(cells, idx_verts)
 *     else:
 *         raise TypeError("Type {} not supported.".format(cells.dtype))             # <<<<<<<<<<<<<<
 *     return idx_verts
 * 
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Type_not_supported, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_dtype); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 394, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_8);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_5};
        __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 394, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_5};
        __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 394, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 394, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 394, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 394, __pyx_L1_error)
  }
  __pyx_L7:;

  /* "cgal4py/delaunay/tools.pyx":395
 *     else:
 *         raise TypeError("Type {} not supported.".format(cells.dtype))
 *     return idx_verts             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_idx_verts));
  __pyx_r = ((PyObject *)__pyx_v_idx_verts);
  goto __pyx_L0;

  /* "cgal4py/delaunay/tools.pyx":363
 *         arg_sortCellVerts[uint32_t](&cells[0,0], &idx_verts[0,0], ncells, ndim)
 * 
 * def py_arg_sortCellVerts(cells):             # <<<<<<<<<<<<<<
 *     r"""Sort the the vertices and neighbors for a single cell such that the
 *     vertices are in descending order.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cgal4py.delaunay.tools.py_arg_sortCellVerts", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_idx_verts);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":399
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _arg_sortSerializedTess_int32(np.ndarray[np.int32_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                   np.ndarray[np.uint32_t, ndim=2] idx_verts,
 *                                   np.ndarray[np.uint64_t, ndim=1] idx_cells):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_29_arg_sortSerializedTess_int32(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7cgal4py_8delaunay_5tools_29_arg_sortSerializedTess_int32 = {"_arg_sortSerializedTess_int32", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_29_arg_sortSerializedTess_int32, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_29_arg_sortSerializedTess_int32(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_cells = 0;
  PyArrayObject *__pyx_v_idx_verts = 0;
  PyArrayObject *__pyx_v_idx_cells = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_arg_sortSerializedTess_int32 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cells,&__pyx_n_s_idx_verts,&__pyx_n_s_idx_cells,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cells)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx_verts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_arg_sortSerializedTess_int32", 1, 3, 3, 1); __PYX_ERR(0, 399, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx_cells)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_arg_sortSerializedTess_int32", 1, 3, 3, 2); __PYX_ERR(0, 399, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_arg_sortSerializedTess_int32") < 0)) __PYX_ERR(0, 399, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_cells = ((PyArrayObject *)values[0]);
    __pyx_v_idx_verts = ((PyArrayObject *)values[1]);
    __pyx_v_idx_cells = ((PyArrayObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_arg_sortSerializedTess_int32", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 399, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools._arg_sortSerializedTess_int32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cells), __pyx_ptype_5numpy_ndarray, 1, "cells", 0))) __PYX_ERR(0, 399, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_idx_verts), __pyx_ptype_5numpy_ndarray, 1, "idx_verts", 0))) __PYX_ERR(0, 400, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_idx_cells), __pyx_ptype_5numpy_ndarray, 1, "idx_cells", 0))) __PYX_ERR(0, 401, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_28_arg_sortSerializedTess_int32(__pyx_self, __pyx_v_cells, __pyx_v_idx_verts, __pyx_v_idx_cells);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_28_arg_sortSerializedTess_int32(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_idx_verts, PyArrayObject *__pyx_v_idx_cells) {
  uint64_t __pyx_v_ncells;
  uint32_t __pyx_v_ndim;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cells;
  __Pyx_Buffer __pyx_pybuffer_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx_cells;
  __Pyx_Buffer __pyx_pybuffer_idx_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx_verts;
  __Pyx_Buffer __pyx_pybuffer_idx_verts;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("_arg_sortSerializedTess_int32", 0);
  __pyx_pybuffer_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_cells.refcount = 0;
  __pyx_pybuffernd_cells.data = NULL;
  __pyx_pybuffernd_cells.rcbuffer = &__pyx_pybuffer_cells;
  __pyx_pybuffer_idx_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_idx_verts.refcount = 0;
  __pyx_pybuffernd_idx_verts.data = NULL;
  __pyx_pybuffernd_idx_verts.rcbuffer = &__pyx_pybuffer_idx_verts;
  __pyx_pybuffer_idx_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_idx_cells.refcount = 0;
  __pyx_pybuffernd_idx_cells.data = NULL;
  __pyx_pybuffernd_idx_cells.rcbuffer = &__pyx_pybuffer_idx_cells;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 399, __pyx_L1_error)
  }
  __pyx_pybuffernd_cells.diminfo[0].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cells.diminfo[0].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cells.diminfo[1].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cells.diminfo[1].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 399, __pyx_L1_error)
  }
  __pyx_pybuffernd_idx_verts.diminfo[0].strides = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx_verts.diminfo[0].shape = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_idx_verts.diminfo[1].strides = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_idx_verts.diminfo[1].shape = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 399, __pyx_L1_error)
  }
  __pyx_pybuffernd_idx_cells.diminfo[0].strides = __pyx_pybuffernd_idx_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx_cells.diminfo[0].shape = __pyx_pybuffernd_idx_cells.rcbuffer->pybuffer.shape[0];

  /* "cgal4py/delaunay/tools.pyx":402
 *                                   np.ndarray[np.uint32_t, ndim=2] idx_verts,
 *                                   np.ndarray[np.uint64_t, ndim=1] idx_cells):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]             # <<<<<<<<<<<<<<
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __pyx_v_ncells = ((uint64_t)(__pyx_v_cells->dimensions[0]));

  /* "cgal4py/delaunay/tools.pyx":403
 *                                   np.ndarray[np.uint64_t, ndim=1] idx_cells):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]             # <<<<<<<<<<<<<<
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         arg_sortSerializedTess[int32_t](&cells[0,0], ncells, ndim,
 */
  __pyx_v_ndim = ((uint32_t)(__pyx_v_cells->dimensions[1]));

  /* "cgal4py/delaunay/tools.pyx":404
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         arg_sortSerializedTess[int32_t](&cells[0,0], ncells, ndim,
 *                                         &idx_verts[0,0], &idx_cells[0])
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":405
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         arg_sortSerializedTess[int32_t](&cells[0,0], ncells, ndim,             # <<<<<<<<<<<<<<
 *                                         &idx_verts[0,0], &idx_cells[0])
 * @cython.boundscheck(False)
 */
        __pyx_t_1 = 0;
        __pyx_t_2 = 0;

        /* "cgal4py/delaunay/tools.pyx":406
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         arg_sortSerializedTess[int32_t](&cells[0,0], ncells, ndim,
 *                                         &idx_verts[0,0], &idx_cells[0])             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 */
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        __pyx_t_5 = 0;

        /* "cgal4py/delaunay/tools.pyx":405
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         arg_sortSerializedTess[int32_t](&cells[0,0], ncells, ndim,             # <<<<<<<<<<<<<<
 *                                         &idx_verts[0,0], &idx_cells[0])
 * @cython.boundscheck(False)
 */
        arg_sortSerializedTess<int32_t>((&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_cells.rcbuffer->pybuffer.buf, __pyx_t_1, __pyx_pybuffernd_cells.diminfo[0].strides, __pyx_t_2, __pyx_pybuffernd_cells.diminfo[1].strides))), __pyx_v_ncells, __pyx_v_ndim, (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_idx_verts.diminfo[0].strides, __pyx_t_4, __pyx_pybuffernd_idx_verts.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_idx_cells.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_idx_cells.diminfo[0].strides))));
      }

      /* "cgal4py/delaunay/tools.pyx":404
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         arg_sortSerializedTess[int32_t](&cells[0,0], ncells, ndim,
 *                                         &idx_verts[0,0], &idx_cells[0])
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":399
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _arg_sortSerializedTess_int32(np.ndarray[np.int32_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                   np.ndarray[np.uint32_t, ndim=2] idx_verts,
 *                                   np.ndarray[np.uint64_t, ndim=1] idx_cells):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cgal4py.delaunay.tools._arg_sortSerializedTess_int32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":409
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _arg_sortSerializedTess_uint32(np.ndarray[np.uint32_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                    np.ndarray[np.uint32_t, ndim=2] idx_verts,
 *                                    np.ndarray[np.uint64_t, ndim=1] idx_cells):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_31_arg_sortSerializedTess_uint32(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7cgal4py_8delaunay_5tools_31_arg_sortSerializedTess_uint32 = {"_arg_sortSerializedTess_uint32", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_31_arg_sortSerializedTess_uint32, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_31_arg_sortSerializedTess_uint32(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_cells = 0;
  PyArrayObject *__pyx_v_idx_verts = 0;
  PyArrayObject *__pyx_v_idx_cells = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_arg_sortSerializedTess_uint32 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cells,&__pyx_n_s_idx_verts,&__pyx_n_s_idx_cells,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cells)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx_verts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_arg_sortSerializedTess_uint32", 1, 3, 3, 1); __PYX_ERR(0, 409, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx_cells)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_arg_sortSerializedTess_uint32", 1, 3, 3, 2); __PYX_ERR(0, 409, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_arg_sortSerializedTess_uint32") < 0)) __PYX_ERR(0, 409, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_cells = ((PyArrayObject *)values[0]);
    __pyx_v_idx_verts = ((PyArrayObject *)values[1]);
    __pyx_v_idx_cells = ((PyArrayObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_arg_sortSerializedTess_uint32", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 409, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools._arg_sortSerializedTess_uint32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cells), __pyx_ptype_5numpy_ndarray, 1, "cells", 0))) __PYX_ERR(0, 409, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_idx_verts), __pyx_ptype_5numpy_ndarray, 1, "idx_verts", 0))) __PYX_ERR(0, 410, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_idx_cells), __pyx_ptype_5numpy_ndarray, 1, "idx_cells", 0))) __PYX_ERR(0, 411, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_30_arg_sortSerializedTess_uint32(__pyx_self, __pyx_v_cells, __pyx_v_idx_verts, __pyx_v_idx_cells);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_30_arg_sortSerializedTess_uint32(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_idx_verts, PyArrayObject *__pyx_v_idx_cells) {
  uint64_t __pyx_v_ncells;
  uint32_t __pyx_v_ndim;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cells;
  __Pyx_Buffer __pyx_pybuffer_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx_cells;
  __Pyx_Buffer __pyx_pybuffer_idx_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx_verts;
  __Pyx_Buffer __pyx_pybuffer_idx_verts;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("_arg_sortSerializedTess_uint32", 0);
  __pyx_pybuffer_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_cells.refcount = 0;
  __pyx_pybuffernd_cells.data = NULL;
  __pyx_pybuffernd_cells.rcbuffer = &__pyx_pybuffer_cells;
  __pyx_pybuffer_idx_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_idx_verts.refcount = 0;
  __pyx_pybuffernd_idx_verts.data = NULL;
  __pyx_pybuffernd_idx_verts.rcbuffer = &__pyx_pybuffer_idx_verts;
  __pyx_pybuffer_idx_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_idx_cells.refcount = 0;
  __pyx_pybuffernd_idx_cells.data = NULL;
  __pyx_pybuffernd_idx_cells.rcbuffer = &__pyx_pybuffer_idx_cells;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 409, __pyx_L1_error)
  }
  __pyx_pybuffernd_cells.diminfo[0].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cells.diminfo[0].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cells.diminfo[1].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cells.diminfo[1].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 409, __pyx_L1_error)
  }
  __pyx_pybuffernd_idx_verts.diminfo[0].strides = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx_verts.diminfo[0].shape = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_idx_verts.diminfo[1].strides = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_idx_verts.diminfo[1].shape = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 409, __pyx_L1_error)
  }
  __pyx_pybuffernd_idx_cells.diminfo[0].strides = __pyx_pybuffernd_idx_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx_cells.diminfo[0].shape = __pyx_pybuffernd_idx_cells.rcbuffer->pybuffer.shape[0];

  /* "cgal4py/delaunay/tools.pyx":412
 *                                    np.ndarray[np.uint32_t, ndim=2] idx_verts,
 *                                    np.ndarray[np.uint64_t, ndim=1] idx_cells):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]             # <<<<<<<<<<<<<<
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __pyx_v_ncells = ((uint64_t)(__pyx_v_cells->dimensions[0]));

  /* "cgal4py/delaunay/tools.pyx":413
 *                                    np.ndarray[np.uint64_t, ndim=1] idx_cells):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]             # <<<<<<<<<<<<<<
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         arg_sortSerializedTess[uint32_t](&cells[0,0], ncells, ndim,
 */
  __pyx_v_ndim = ((uint32_t)(__pyx_v_cells->dimensions[1]));

  /* "cgal4py/delaunay/tools.pyx":414
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         arg_sortSerializedTess[uint32_t](&cells[0,0], ncells, ndim,
 *                                          &idx_verts[0,0], &idx_cells[0])
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":415
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         arg_sortSerializedTess[uint32_t](&cells[0,0], ncells, ndim,             # <<<<<<<<<<<<<<
 *                                          &idx_verts[0,0], &idx_cells[0])
 * @cython.boundscheck(False)
 */
        __pyx_t_1 = 0;
        __pyx_t_2 = 0;

        /* "cgal4py/delaunay/tools.pyx":416
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         arg_sortSerializedTess[uint32_t](&cells[0,0], ncells, ndim,
 *                                          &idx_verts[0,0], &idx_cells[0])             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 */
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        __pyx_t_5 = 0;

        /* "cgal4py/delaunay/tools.pyx":415
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         arg_sortSerializedTess[uint32_t](&cells[0,0], ncells, ndim,             # <<<<<<<<<<<<<<
 *                                          &idx_verts[0,0], &idx_cells[0])
 * @cython.boundscheck(False)
 */
        arg_sortSerializedTess<uint32_t>((&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_cells.rcbuffer->pybuffer.buf, __pyx_t_1, __pyx_pybuffernd_cells.diminfo[0].strides, __pyx_t_2, __pyx_pybuffernd_cells.diminfo[1].strides))), __pyx_v_ncells, __pyx_v_ndim, (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_idx_verts.diminfo[0].strides, __pyx_t_4, __pyx_pybuffernd_idx_verts.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_idx_cells.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_idx_cells.diminfo[0].strides))));
      }

      /* "cgal4py/delaunay/tools.pyx":414
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         arg_sortSerializedTess[uint32_t](&cells[0,0], ncells, ndim,
 *                                          &idx_verts[0,0], &idx_cells[0])
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":409
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _arg_sortSerializedTess_uint32(np.ndarray[np.uint32_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                    np.ndarray[np.uint32_t, ndim=2] idx_verts,
 *                                    np.ndarray[np.uint64_t, ndim=1] idx_cells):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cgal4py.delaunay.tools._arg_sortSerializedTess_uint32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":419
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _arg_sortSerializedTess_int64(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                   np.ndarray[np.uint32_t, ndim=2] idx_verts,
 *                                   np.ndarray[np.uint64_t, ndim=1] idx_cells):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_33_arg_sortSerializedTess_int64(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7cgal4py_8delaunay_5tools_33_arg_sortSerializedTess_int64 = {"_arg_sortSerializedTess_int64", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_33_arg_sortSerializedTess_int64, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_33_arg_sortSerializedTess_int64(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_cells = 0;
  PyArrayObject *__pyx_v_idx_verts = 0;
  PyArrayObject *__pyx_v_idx_cells = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_arg_sortSerializedTess_int64 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cells,&__pyx_n_s_idx_verts,&__pyx_n_s_idx_cells,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cells)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx_verts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_arg_sortSerializedTess_int64", 1, 3, 3, 1); __PYX_ERR(0, 419, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx_cells)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_arg_sortSerializedTess_int64", 1, 3, 3, 2); __PYX_ERR(0, 419, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_arg_sortSerializedTess_int64") < 0)) __PYX_ERR(0, 419, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_cells = ((PyArrayObject *)values[0]);
    __pyx_v_idx_verts = ((PyArrayObject *)values[1]);
    __pyx_v_idx_cells = ((PyArrayObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_arg_sortSerializedTess_int64", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 419, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools._arg_sortSerializedTess_int64", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cells), __pyx_ptype_5numpy_ndarray, 1, "cells", 0))) __PYX_ERR(0, 419, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_idx_verts), __pyx_ptype_5numpy_ndarray, 1, "idx_verts", 0))) __PYX_ERR(0, 420, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_idx_cells), __pyx_ptype_5numpy_ndarray, 1, "idx_cells", 0))) __PYX_ERR(0, 421, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_32_arg_sortSerializedTess_int64(__pyx_self, __pyx_v_cells, __pyx_v_idx_verts, __pyx_v_idx_cells);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_32_arg_sortSerializedTess_int64(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_idx_verts, PyArrayObject *__pyx_v_idx_cells) {
  uint64_t __pyx_v_ncells;
  uint32_t __pyx_v_ndim;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cells;
  __Pyx_Buffer __pyx_pybuffer_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx_cells;
  __Pyx_Buffer __pyx_pybuffer_idx_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx_verts;
  __Pyx_Buffer __pyx_pybuffer_idx_verts;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("_arg_sortSerializedTess_int64", 0);
  __pyx_pybuffer_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_cells.refcount = 0;
  __pyx_pybuffernd_cells.data = NULL;
  __pyx_pybuffernd_cells.rcbuffer = &__pyx_pybuffer_cells;
  __pyx_pybuffer_idx_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_idx_verts.refcount = 0;
  __pyx_pybuffernd_idx_verts.data = NULL;
  __pyx_pybuffernd_idx_verts.rcbuffer = &__pyx_pybuffer_idx_verts;
  __pyx_pybuffer_idx_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_idx_cells.refcount = 0;
  __pyx_pybuffernd_idx_cells.data = NULL;
  __pyx_pybuffernd_idx_cells.rcbuffer = &__pyx_pybuffer_idx_cells;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 419, __pyx_L1_error)
  }
  __pyx_pybuffernd_cells.diminfo[0].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cells.diminfo[0].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cells.diminfo[1].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cells.diminfo[1].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 419, __pyx_L1_error)
  }
  __pyx_pybuffernd_idx_verts.diminfo[0].strides = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx_verts.diminfo[0].shape = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_idx_verts.diminfo[1].strides = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_idx_verts.diminfo[1].shape = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 419, __pyx_L1_error)
  }
  __pyx_pybuffernd_idx_cells.diminfo[0].strides = __pyx_pybuffernd_idx_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx_cells.diminfo[0].shape = __pyx_pybuffernd_idx_cells.rcbuffer->pybuffer.shape[0];

  /* "cgal4py/delaunay/tools.pyx":422
 *                                   np.ndarray[np.uint32_t, ndim=2] idx_verts,
 *                                   np.ndarray[np.uint64_t, ndim=1] idx_cells):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]             # <<<<<<<<<<<<<<
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __pyx_v_ncells = ((uint64_t)(__pyx_v_cells->dimensions[0]));

  /* "cgal4py/delaunay/tools.pyx":423
 *                                   np.ndarray[np.uint64_t, ndim=1] idx_cells):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]             # <<<<<<<<<<<<<<
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         arg_sortSerializedTess[int64_t](&cells[0,0], ncells, ndim,
 */
  __pyx_v_ndim = ((uint32_t)(__pyx_v_cells->dimensions[1]));

  /* "cgal4py/delaunay/tools.pyx":424
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         arg_sortSerializedTess[int64_t](&cells[0,0], ncells, ndim,
 *                                         &idx_verts[0,0], &idx_cells[0])
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":425
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         arg_sortSerializedTess[int64_t](&cells[0,0], ncells, ndim,             # <<<<<<<<<<<<<<
 *                                         &idx_verts[0,0], &idx_cells[0])
 * @cython.boundscheck(False)
 */
        __pyx_t_1 = 0;
        __pyx_t_2 = 0;

        /* "cgal4py/delaunay/tools.pyx":426
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         arg_sortSerializedTess[int64_t](&cells[0,0], ncells, ndim,
 *                                         &idx_verts[0,0], &idx_cells[0])             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 */
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        __pyx_t_5 = 0;

        /* "cgal4py/delaunay/tools.pyx":425
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         arg_sortSerializedTess[int64_t](&cells[0,0], ncells, ndim,             # <<<<<<<<<<<<<<
 *                                         &idx_verts[0,0], &idx_cells[0])
 * @cython.boundscheck(False)
 */
        arg_sortSerializedTess<int64_t>(((int64_t *)(&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int64_t *, __pyx_pybuffernd_cells.rcbuffer->pybuffer.buf, __pyx_t_1, __pyx_pybuffernd_cells.diminfo[0].strides, __pyx_t_2, __pyx_pybuffernd_cells.diminfo[1].strides)))), __pyx_v_ncells, __pyx_v_ndim, (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_idx_verts.diminfo[0].strides, __pyx_t_4, __pyx_pybuffernd_idx_verts.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_idx_cells.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_idx_cells.diminfo[0].strides))));
      }

      /* "cgal4py/delaunay/tools.pyx":424
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         arg_sortSerializedTess[int64_t](&cells[0,0], ncells, ndim,
 *                                         &idx_verts[0,0], &idx_cells[0])
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":419
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _arg_sortSerializedTess_int64(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                   np.ndarray[np.uint32_t, ndim=2] idx_verts,
 *                                   np.ndarray[np.uint64_t, ndim=1] idx_cells):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cgal4py.delaunay.tools._arg_sortSerializedTess_int64", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":429
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _arg_sortSerializedTess_uint64(np.ndarray[np.uint64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                    np.ndarray[np.uint32_t, ndim=2] idx_verts,
 *                                    np.ndarray[np.uint64_t, ndim=1] idx_cells):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_35_arg_sortSerializedTess_uint64(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7cgal4py_8delaunay_5tools_35_arg_sortSerializedTess_uint64 = {"_arg_sortSerializedTess_uint64", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_35_arg_sortSerializedTess_uint64, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_35_arg_sortSerializedTess_uint64(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_cells = 0;
  PyArrayObject *__pyx_v_idx_verts = 0;
  PyArrayObject *__pyx_v_idx_cells = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_arg_sortSerializedTess_uint64 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cells,&__pyx_n_s_idx_verts,&__pyx_n_s_idx_cells,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cells)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx_verts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_arg_sortSerializedTess_uint64", 1, 3, 3, 1); __PYX_ERR(0, 429, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx_cells)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_arg_sortSerializedTess_uint64", 1, 3, 3, 2); __PYX_ERR(0, 429, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_arg_sortSerializedTess_uint64") < 0)) __PYX_ERR(0, 429, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_cells = ((PyArrayObject *)values[0]);
    __pyx_v_idx_verts = ((PyArrayObject *)values[1]);
    __pyx_v_idx_cells = ((PyArrayObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_arg_sortSerializedTess_uint64", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 429, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools._arg_sortSerializedTess_uint64", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cells), __pyx_ptype_5numpy_ndarray, 1, "cells", 0))) __PYX_ERR(0, 429, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_idx_verts), __pyx_ptype_5numpy_ndarray, 1, "idx_verts", 0))) __PYX_ERR(0, 430, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_idx_cells), __pyx_ptype_5numpy_ndarray, 1, "idx_cells", 0))) __PYX_ERR(0, 431, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_34_arg_sortSerializedTess_uint64(__pyx_self, __pyx_v_cells, __pyx_v_idx_verts, __pyx_v_idx_cells);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_34_arg_sortSerializedTess_uint64(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_idx_verts, PyArrayObject *__pyx_v_idx_cells) {
  uint64_t __pyx_v_ncells;
  uint32_t __pyx_v_ndim;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cells;
  __Pyx_Buffer __pyx_pybuffer_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx_cells;
  __Pyx_Buffer __pyx_pybuffer_idx_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx_verts;
  __Pyx_Buffer __pyx_pybuffer_idx_verts;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("_arg_sortSerializedTess_uint64", 0);
  __pyx_pybuffer_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_cells.refcount = 0;
  __pyx_pybuffernd_cells.data = NULL;
  __pyx_pybuffernd_cells.rcbuffer = &__pyx_pybuffer_cells;
  __pyx_pybuffer_idx_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_idx_verts.refcount = 0;
  __pyx_pybuffernd_idx_verts.data = NULL;
  __pyx_pybuffernd_idx_verts.rcbuffer = &__pyx_pybuffer_idx_verts;
  __pyx_pybuffer_idx_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_idx_cells.refcount = 0;
  __pyx_pybuffernd_idx_cells.data = NULL;
  __pyx_pybuffernd_idx_cells.rcbuffer = &__pyx_pybuffer_idx_cells;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 429, __pyx_L1_error)
  }
  __pyx_pybuffernd_cells.diminfo[0].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cells.diminfo[0].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cells.diminfo[1].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cells.diminfo[1].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 429, __pyx_L1_error)
  }
  __pyx_pybuffernd_idx_verts.diminfo[0].strides = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx_verts.diminfo[0].shape = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_idx_verts.diminfo[1].strides = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_idx_verts.diminfo[1].shape = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 429, __pyx_L1_error)
  }
  __pyx_pybuffernd_idx_cells.diminfo[0].strides = __pyx_pybuffernd_idx_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx_cells.diminfo[0].shape = __pyx_pybuffernd_idx_cells.rcbuffer->pybuffer.shape[0];

  /* "cgal4py/delaunay/tools.pyx":432
 *                                    np.ndarray[np.uint32_t, ndim=2] idx_verts,
 *                                    np.ndarray[np.uint64_t, ndim=1] idx_cells):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]             # <<<<<<<<<<<<<<
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __pyx_v_ncells = ((uint64_t)(__pyx_v_cells->dimensions[0]));

  /* "cgal4py/delaunay/tools.pyx":433
 *                                    np.ndarray[np.uint64_t, ndim=1] idx_cells):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]             # <<<<<<<<<<<<<<
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         arg_sortSerializedTess[uint64_t](&cells[0,0], ncells, ndim,
 */
  __pyx_v_ndim = ((uint32_t)(__pyx_v_cells->dimensions[1]));

  /* "cgal4py/delaunay/tools.pyx":434
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         arg_sortSerializedTess[uint64_t](&cells[0,0], ncells, ndim,
 *                                          &idx_verts[0,0], &idx_cells[0])
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":435
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         arg_sortSerializedTess[uint64_t](&cells[0,0], ncells, ndim,             # <<<<<<<<<<<<<<
 *                                          &idx_verts[0,0], &idx_cells[0])
 * 
 */
        __pyx_t_1 = 0;
        __pyx_t_2 = 0;

        /* "cgal4py/delaunay/tools.pyx":436
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         arg_sortSerializedTess[uint64_t](&cells[0,0], ncells, ndim,
 *                                          &idx_verts[0,0], &idx_cells[0])             # <<<<<<<<<<<<<<
 * 
 * def py_arg_sortSerializedTess(cells):
 */
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        __pyx_t_5 = 0;

        /* "cgal4py/delaunay/tools.pyx":435
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         arg_sortSerializedTess[uint64_t](&cells[0,0], ncells, ndim,             # <<<<<<<<<<<<<<
 *                                          &idx_verts[0,0], &idx_cells[0])
 * 
 */
        arg_sortSerializedTess<uint64_t>((&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_cells.rcbuffer->pybuffer.buf, __pyx_t_1, __pyx_pybuffernd_cells.diminfo[0].strides, __pyx_t_2, __pyx_pybuffernd_cells.diminfo[1].strides))), __pyx_v_ncells, __pyx_v_ndim, (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_idx_verts.diminfo[0].strides, __pyx_t_4, __pyx_pybuffernd_idx_verts.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_idx_cells.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_idx_cells.diminfo[0].strides))));
      }

      /* "cgal4py/delaunay/tools.pyx":434
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         arg_sortSerializedTess[uint64_t](&cells[0,0], ncells, ndim,
 *                                          &idx_verts[0,0], &idx_cells[0])
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":429
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _arg_sortSerializedTess_uint64(np.ndarray[np.uint64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                    np.ndarray[np.uint32_t, ndim=2] idx_verts,
 *                                    np.ndarray[np.uint64_t, ndim=1] idx_cells):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cgal4py.delaunay.tools._arg_sortSerializedTess_uint64", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":438
 *                                          &idx_verts[0,0], &idx_cells[0])
 * 
 * def py_arg_sortSerializedTess(cells):             # <<<<<<<<<<<<<<
 *     r"""Sort serialized triangulation such that the verts for each cell are in
 *     descending order, but the cells are sorted in ascending order by the verts.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_37py_arg_sortSerializedTess(PyObject *__pyx_self, PyObject *__pyx_v_cells); /*proto*/
static char __pyx_doc_7cgal4py_8delaunay_5tools_36py_arg_sortSerializedTess[] = "Sort serialized triangulation such that the verts for each cell are in \n    descending order, but the cells are sorted in ascending order by the verts.\n\n    Args:\n        cells (np.ndarray of int64): (n, m+1) array of vertex indices  \n            for the n cells in a m-dimensional triangulation. \n\n    Returns:\n        idx_verts (np.ndarray of uint32): (n, m+1) array of indices to sort \n            vertices in decending order for each cell.\n        idx_cells (np.ndarray of int64): (n, ) array of indices to sort cells \n            by their sorted vertices.\n            \n    ";
static PyMethodDef __pyx_mdef_7cgal4py_8delaunay_5tools_37py_arg_sortSerializedTess = {"py_arg_sortSerializedTess", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_37py_arg_sortSerializedTess, METH_O, __pyx_doc_7cgal4py_8delaunay_5tools_36py_arg_sortSerializedTess};
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_37py_arg_sortSerializedTess(PyObject *__pyx_self, PyObject *__pyx_v_cells) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_arg_sortSerializedTess (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_36py_arg_sortSerializedTess(__pyx_self, ((PyObject *)__pyx_v_cells));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_36py_arg_sortSerializedTess(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cells) {
  PyArrayObject *__pyx_v_idx_verts = 0;
  PyArrayObject *__pyx_v_idx_cells = 0;
  int __pyx_v_i;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx_cells;
  __Pyx_Buffer __pyx_pybuffer_idx_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx_verts;
  __Pyx_Buffer __pyx_pybuffer_idx_verts;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyArrayObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  long __pyx_t_13;
  long __pyx_t_14;
  PyArrayObject *__pyx_t_15 = NULL;
  Py_ssize_t __pyx_t_16;
  int __pyx_t_17;
  __Pyx_RefNannySetupContext("py_arg_sortSerializedTess", 0);
  __pyx_pybuffer_idx_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_idx_verts.refcount = 0;
  __pyx_pybuffernd_idx_verts.data = NULL;
  __pyx_pybuffernd_idx_verts.rcbuffer = &__pyx_pybuffer_idx_verts;
  __pyx_pybuffer_idx_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_idx_cells.refcount = 0;
  __pyx_pybuffernd_idx_cells.data = NULL;
  __pyx_pybuffernd_idx_cells.rcbuffer = &__pyx_pybuffer_idx_cells;

  /* "cgal4py/delaunay/tools.pyx":453
 * 
 *     """
 *     if len(cells.shape) != 2:             # <<<<<<<<<<<<<<
 *         return
 *     if cells.shape[0] == 0:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((__pyx_t_2 != 2) != 0);
  if (__pyx_t_3) {

    /* "cgal4py/delaunay/tools.pyx":454
 *     """
 *     if len(cells.shape) != 2:
 *         return             # <<<<<<<<<<<<<<
 *     if cells.shape[0] == 0:
 *         return
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "cgal4py/delaunay/tools.pyx":453
 * 
 *     """
 *     if len(cells.shape) != 2:             # <<<<<<<<<<<<<<
 *         return
 *     if cells.shape[0] == 0:
 */
  }

  /* "cgal4py/delaunay/tools.pyx":455
 *     if len(cells.shape) != 2:
 *         return
 *     if cells.shape[0] == 0:             # <<<<<<<<<<<<<<
 *         return
 *     cdef np.ndarray[np.uint32_t, ndim=2] idx_verts
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_t_4, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "cgal4py/delaunay/tools.pyx":456
 *         return
 *     if cells.shape[0] == 0:
 *         return             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.uint32_t, ndim=2] idx_verts
 *     cdef np.ndarray[np.uint64_t, ndim=1] idx_cells
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "cgal4py/delaunay/tools.pyx":455
 *     if len(cells.shape) != 2:
 *         return
 *     if cells.shape[0] == 0:             # <<<<<<<<<<<<<<
 *         return
 *     cdef np.ndarray[np.uint32_t, ndim=2] idx_verts
 */
  }

  /* "cgal4py/delaunay/tools.pyx":460
 *     cdef np.ndarray[np.uint64_t, ndim=1] idx_cells
 *     cdef int i
 *     idx_verts = np.empty(cells.shape, 'uint32')             # <<<<<<<<<<<<<<
 *     for i in range(cells.shape[1]):
 *         idx_verts[:,i] = <np.uint32_t>i
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_n_s_uint32};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 460, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_n_s_uint32};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 460, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 460, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_4);
    __Pyx_INCREF(__pyx_n_s_uint32);
    __Pyx_GIVEREF(__pyx_n_s_uint32);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_n_s_uint32);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 460, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 460, __pyx_L1_error)
  __pyx_t_9 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer);
    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer, (PyObject*)__pyx_t_9, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_7 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __pyx_t_10 = __pyx_t_11 = __pyx_t_12 = 0;
    }
    __pyx_pybuffernd_idx_verts.diminfo[0].strides = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx_verts.diminfo[0].shape = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_idx_verts.diminfo[1].strides = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_idx_verts.diminfo[1].shape = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.shape[1];
    if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 460, __pyx_L1_error)
  }
  __pyx_t_9 = 0;
  __pyx_v_idx_verts = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":461
 *     cdef int i
 *     idx_verts = np.empty(cells.shape, 'uint32')
 *     for i in range(cells.shape[1]):             # <<<<<<<<<<<<<<
 *         idx_verts[:,i] = <np.uint32_t>i
 *     idx_cells = np.empty(cells.shape[0], 'uint64')
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_13 = __Pyx_PyInt_As_long(__pyx_t_5); if (unlikely((__pyx_t_13 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 461, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_14 = __pyx_t_13;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_14; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "cgal4py/delaunay/tools.pyx":462
 *     idx_verts = np.empty(cells.shape, 'uint32')
 *     for i in range(cells.shape[1]):
 *         idx_verts[:,i] = <np.uint32_t>i             # <<<<<<<<<<<<<<
 *     idx_cells = np.empty(cells.shape[0], 'uint64')
 *     for i in range(cells.shape[0]):
 */
    __pyx_t_5 = __Pyx_PyInt_From_npy_uint32(((__pyx_t_5numpy_uint32_t)__pyx_v_i)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 462, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 462, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 462, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_slice__2);
    __Pyx_GIVEREF(__pyx_slice__2);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_slice__2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_1);
    __pyx_t_1 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_idx_verts), __pyx_t_8, __pyx_t_5) < 0)) __PYX_ERR(0, 462, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "cgal4py/delaunay/tools.pyx":463
 *     for i in range(cells.shape[1]):
 *         idx_verts[:,i] = <np.uint32_t>i
 *     idx_cells = np.empty(cells.shape[0], 'uint64')             # <<<<<<<<<<<<<<
 *     for i in range(cells.shape[0]):
 *         idx_cells[i] = <np.uint64_t>i
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_empty); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_shape); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_4, __pyx_n_s_uint64};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 463, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_4, __pyx_n_s_uint64};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 463, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 463, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_7, __pyx_t_4);
    __Pyx_INCREF(__pyx_n_s_uint64);
    __Pyx_GIVEREF(__pyx_n_s_uint64);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_7, __pyx_n_s_uint64);
    __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 463, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 463, __pyx_L1_error)
  __pyx_t_15 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_cells.rcbuffer->pybuffer);
    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx_cells.rcbuffer->pybuffer, (PyObject*)__pyx_t_15, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_7 < 0)) {
      PyErr_Fetch(&__pyx_t_12, &__pyx_t_11, &__pyx_t_10);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_12, __pyx_t_11, __pyx_t_10);
      }
      __pyx_t_12 = __pyx_t_11 = __pyx_t_10 = 0;
    }
    __pyx_pybuffernd_idx_cells.diminfo[0].strides = __pyx_pybuffernd_idx_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx_cells.diminfo[0].shape = __pyx_pybuffernd_idx_cells.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 463, __pyx_L1_error)
  }
  __pyx_t_15 = 0;
  __pyx_v_idx_cells = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "cgal4py/delaunay/tools.pyx":464
 *         idx_verts[:,i] = <np.uint32_t>i
 *     idx_cells = np.empty(cells.shape[0], 'uint64')
 *     for i in range(cells.shape[0]):             # <<<<<<<<<<<<<<
 *         idx_cells[i] = <np.uint64_t>i
 *     if cells.dtype == np.int32:
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_13 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_13 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_14 = __pyx_t_13;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_14; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "cgal4py/delaunay/tools.pyx":465
 *     idx_cells = np.empty(cells.shape[0], 'uint64')
 *     for i in range(cells.shape[0]):
 *         idx_cells[i] = <np.uint64_t>i             # <<<<<<<<<<<<<<
 *     if cells.dtype == np.int32:
 *         _arg_sortSerializedTess_int32(cells, idx_verts, idx_cells)
 */
    __pyx_t_16 = __pyx_v_i;
    __pyx_t_17 = -1;
    if (__pyx_t_16 < 0) {
      __pyx_t_16 += __pyx_pybuffernd_idx_cells.diminfo[0].shape;
      if (unlikely(__pyx_t_16 < 0)) __pyx_t_17 = 0;
    } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_idx_cells.diminfo[0].shape)) __pyx_t_17 = 0;
    if (unlikely(__pyx_t_17 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_17);
      __PYX_ERR(0, 465, __pyx_L1_error)
    }
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_idx_cells.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_idx_cells.diminfo[0].strides) = ((__pyx_t_5numpy_uint64_t)__pyx_v_i);
  }

  /* "cgal4py/delaunay/tools.pyx":466
 *     for i in range(cells.shape[0]):
 *         idx_cells[i] = <np.uint64_t>i
 *     if cells.dtype == np.int32:             # <<<<<<<<<<<<<<
 *         _arg_sortSerializedTess_int32(cells, idx_verts, idx_cells)
 *     elif cells.dtype == np.uint32:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_int32); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_t_6, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_3) {

    /* "cgal4py/delaunay/tools.pyx":467
 *         idx_cells[i] = <np.uint64_t>i
 *     if cells.dtype == np.int32:
 *         _arg_sortSerializedTess_int32(cells, idx_verts, idx_cells)             # <<<<<<<<<<<<<<
 *     elif cells.dtype == np.uint32:
 *         _arg_sortSerializedTess_uint32(cells, idx_verts, idx_cells)
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_arg_sortSerializedTess_int32); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 467, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_cells, ((PyObject *)__pyx_v_idx_verts), ((PyObject *)__pyx_v_idx_cells)};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 467, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_cells, ((PyObject *)__pyx_v_idx_verts), ((PyObject *)__pyx_v_idx_cells)};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 467, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 467, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_1) {
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1); __pyx_t_1 = NULL;
      }
      __Pyx_INCREF(__pyx_v_cells);
      __Pyx_GIVEREF(__pyx_v_cells);
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_7, __pyx_v_cells);
      __Pyx_INCREF(((PyObject *)__pyx_v_idx_verts));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_idx_verts));
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_7, ((PyObject *)__pyx_v_idx_verts));
      __Pyx_INCREF(((PyObject *)__pyx_v_idx_cells));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_idx_cells));
      PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_7, ((PyObject *)__pyx_v_idx_cells));
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 467, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "cgal4py/delaunay/tools.pyx":466
 *     for i in range(cells.shape[0]):
 *         idx_cells[i] = <np.uint64_t>i
 *     if cells.dtype == np.int32:             # <<<<<<<<<<<<<<
 *         _arg_sortSerializedTess_int32(cells, idx_verts, idx_cells)
 *     elif cells.dtype == np.uint32:
 */
    goto __pyx_L9;
  }

  /* "cgal4py/delaunay/tools.pyx":468
 *     if cells.dtype == np.int32:
 *         _arg_sortSerializedTess_int32(cells, idx_verts, idx_cells)
 *     elif cells.dtype == np.uint32:             # <<<<<<<<<<<<<<
 *         _arg_sortSerializedTess_uint32(cells, idx_verts, idx_cells)
 *     elif cells.dtype == np.int64:
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_dtype); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_uint32); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_3) {

    /* "cgal4py/delaunay/tools.pyx":469
 *         _arg_sortSerializedTess_int32(cells, idx_verts, idx_cells)
 *     elif cells.dtype == np.uint32:
 *         _arg_sortSerializedTess_uint32(cells, idx_verts, idx_cells)             # <<<<<<<<<<<<<<
 *     elif cells.dtype == np.int64:
 *         _arg_sortSerializedTess_int64(cells, idx_verts, idx_cells)
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_arg_sortSerializedTess_uint32); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_cells, ((PyObject *)__pyx_v_idx_verts), ((PyObject *)__pyx_v_idx_cells)};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 469, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_cells, ((PyObject *)__pyx_v_idx_verts), ((PyObject *)__pyx_v_idx_cells)};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 469, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 469, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_cells);
      __Pyx_GIVEREF(__pyx_v_cells);
      PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_7, __pyx_v_cells);
      __Pyx_INCREF(((PyObject *)__pyx_v_idx_verts));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_idx_verts));
      PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_7, ((PyObject *)__pyx_v_idx_verts));
      __Pyx_INCREF(((PyObject *)__pyx_v_idx_cells));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_idx_cells));
      PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_7, ((PyObject *)__pyx_v_idx_cells));
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 469, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "cgal4py/delaunay/tools.pyx":468
 *     if cells.dtype == np.int32:
 *         _arg_sortSerializedTess_int32(cells, idx_verts, idx_cells)
 *     elif cells.dtype == np.uint32:             # <<<<<<<<<<<<<<
 *         _arg_sortSerializedTess_uint32(cells, idx_verts, idx_cells)
 *     elif cells.dtype == np.int64:
 */
    goto __pyx_L9;
  }

  /* "cgal4py/delaunay/tools.pyx":470
 *     elif cells.dtype == np.uint32:
 *         _arg_sortSerializedTess_uint32(cells, idx_verts, idx_cells)
 *     elif cells.dtype == np.int64:             # <<<<<<<<<<<<<<
 *         _arg_sortSerializedTess_int64(cells, idx_verts, idx_cells)
 *     elif cells.dtype == np.uint64:
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_dtype); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int64); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_6, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_3) {

    /* "cgal4py/delaunay/tools.pyx":471
 *         _arg_sortSerializedTess_uint32(cells, idx_verts, idx_cells)
 *     elif cells.dtype == np.int64:
 *         _arg_sortSerializedTess_int64(cells, idx_verts, idx_cells)             # <<<<<<<<<<<<<<
 *     elif cells.dtype == np.uint64:
 *         _arg_sortSerializedTess_uint64(cells, idx_verts, idx_cells)
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_arg_sortSerializedTess_int64); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_cells, ((PyObject *)__pyx_v_idx_verts), ((PyObject *)__pyx_v_idx_cells)};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 471, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_cells, ((PyObject *)__pyx_v_idx_verts), ((PyObject *)__pyx_v_idx_cells)};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 471, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 471, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_INCREF(__pyx_v_cells);
      __Pyx_GIVEREF(__pyx_v_cells);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, __pyx_v_cells);
      __Pyx_INCREF(((PyObject *)__pyx_v_idx_verts));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_idx_verts));
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, ((PyObject *)__pyx_v_idx_verts));
      __Pyx_INCREF(((PyObject *)__pyx_v_idx_cells));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_idx_cells));
      PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_7, ((PyObject *)__pyx_v_idx_cells));
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 471, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "cgal4py/delaunay/tools.pyx":470
 *     elif cells.dtype == np.uint32:
 *         _arg_sortSerializedTess_uint32(cells, idx_verts, idx_cells)
 *     elif cells.dtype == np.int64:             # <<<<<<<<<<<<<<
 *         _arg_sortSerializedTess_int64(cells, idx_verts, idx_cells)
 *     elif cells.dtype == np.uint64:
 */
    goto __pyx_L9;
  }

  /* "cgal4py/delaunay/tools.pyx":472
 *     elif cells.dtype == np.int64:
 *         _arg_sortSerializedTess_int64(cells, idx_verts, idx_cells)
 *     elif cells.dtype == np.uint64:             # <<<<<<<<<<<<<<
 *         _arg_sortSerializedTess_uint64(cells, idx_verts, idx_cells)
 *     else:
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_dtype); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_uint64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_4, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_3)) {

    /* "cgal4py/delaunay/tools.pyx":473
 *         _arg_sortSerializedTess_int64(cells, idx_verts, idx_cells)
 *     elif cells.dtype == np.uint64:
 *         _arg_sortSerializedTess_uint64(cells, idx_verts, idx_cells)             # <<<<<<<<<<<<<<
 *     else:
 *         raise TypeError("Type {} not supported.".format(cells.dtype))
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_arg_sortSerializedTess_uint64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_cells, ((PyObject *)__pyx_v_idx_verts), ((PyObject *)__pyx_v_idx_cells)};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 473, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_cells, ((PyObject *)__pyx_v_idx_verts), ((PyObject *)__pyx_v_idx_cells)};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 473, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 473, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_cells);
      __Pyx_GIVEREF(__pyx_v_cells);
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_7, __pyx_v_cells);
      __Pyx_INCREF(((PyObject *)__pyx_v_idx_verts));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_idx_verts));
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_7, ((PyObject *)__pyx_v_idx_verts));
      __Pyx_INCREF(((PyObject *)__pyx_v_idx_cells));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_idx_cells));
      PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_7, ((PyObject *)__pyx_v_idx_cells));
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 473, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "cgal4py/delaunay/tools.pyx":472
 *     elif cells.dtype == np.int64:
 *         _arg_sortSerializedTess_int64(cells, idx_verts, idx_cells)
 *     elif cells.dtype == np.uint64:             # <<<<<<<<<<<<<<
 *         _arg_sortSerializedTess_uint64(cells, idx_verts, idx_cells)
 *     else:
 */
    goto __pyx_L9;
  }

  /* "cgal4py/delaunay/tools.pyx":475
 *         _arg_sortSerializedTess_uint64(cells, idx_verts, idx_cells)
 *     else:
 *         raise TypeError("Type {} not supported.".format(cells.dtype))             # <<<<<<<<<<<<<<
 *     return idx_verts, idx_cells
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Type_not_supported, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_cells, __pyx_n_s_dtype); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 475, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_6};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 475, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_6};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 475, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 475, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 475, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 475, __pyx_L1_error)
  }
  __pyx_L9:;

  /* "cgal4py/delaunay/tools.pyx":476
 *     else:
 *         raise TypeError("Type {} not supported.".format(cells.dtype))
 *     return idx_verts, idx_cells             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(((PyObject *)__pyx_v_idx_verts));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_idx_verts));
  PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_idx_verts));
  __Pyx_INCREF(((PyObject *)__pyx_v_idx_cells));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_idx_cells));
  PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_idx_cells));
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "cgal4py/delaunay/tools.pyx":438
 *                                          &idx_verts[0,0], &idx_cells[0])
 * 
 * def py_arg_sortSerializedTess(cells):             # <<<<<<<<<<<<<<
 *     r"""Sort serialized triangulation such that the verts for each cell are in
 *     descending order, but the cells are sorted in ascending order by the verts.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cgal4py.delaunay.tools.py_arg_sortSerializedTess", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_idx_verts);
  __Pyx_XDECREF((PyObject *)__pyx_v_idx_cells);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":480
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_arg_quickSort_tess(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                           np.ndarray[np.uint32_t, ndim=2] idx_verts,
 *                           np.ndarray[np.uint64_t, ndim=1] idx_cells,
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_39py_arg_quickSort_tess(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7cgal4py_8delaunay_5tools_38py_arg_quickSort_tess[] = "Sort triangulation between two indices such that vert groups are in \n    ascending order.\n\n    Args:\n        cells (np.ndarray of int64): (n, m+1) array of vertex indices  \n            for the n cells in a m-dimensional triangulation. \n        idx_verts (np.ndarray of uint32): (n, m+1) array of indices to sort \n            vertices in decending order for each cell.\n        idx_cells (np.ndarray of int64): (n, ) array of indices to sort cells \n            by their sorted vertices.\n        l (int): Index of cell to start sort at.\n        r (int): Index of cell to stop sort at (inclusive).\n\n    ";
static PyMethodDef __pyx_mdef_7cgal4py_8delaunay_5tools_39py_arg_quickSort_tess = {"py_arg_quickSort_tess", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_39py_arg_quickSort_tess, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7cgal4py_8delaunay_5tools_38py_arg_quickSort_tess};
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_39py_arg_quickSort_tess(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_cells = 0;
  PyArrayObject *__pyx_v_idx_verts = 0;
  PyArrayObject *__pyx_v_idx_cells = 0;
  int64_t __pyx_v_l;
  int64_t __pyx_v_r;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_arg_quickSort_tess (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cells,&__pyx_n_s_idx_verts,&__pyx_n_s_idx_cells,&__pyx_n_s_l,&__pyx_n_s_r,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cells)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx_verts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_arg_quickSort_tess", 1, 5, 5, 1); __PYX_ERR(0, 480, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx_cells)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_arg_quickSort_tess", 1, 5, 5, 2); __PYX_ERR(0, 480, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_l)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_arg_quickSort_tess", 1, 5, 5, 3); __PYX_ERR(0, 480, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_arg_quickSort_tess", 1, 5, 5, 4); __PYX_ERR(0, 480, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_arg_quickSort_tess") < 0)) __PYX_ERR(0, 480, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_cells = ((PyArrayObject *)values[0]);
    __pyx_v_idx_verts = ((PyArrayObject *)values[1]);
    __pyx_v_idx_cells = ((PyArrayObject *)values[2]);
    __pyx_v_l = __Pyx_PyInt_As_int64_t(values[3]); if (unlikely((__pyx_v_l == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 483, __pyx_L3_error)
    __pyx_v_r = __Pyx_PyInt_As_int64_t(values[4]); if (unlikely((__pyx_v_r == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 483, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_arg_quickSort_tess", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 480, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.py_arg_quickSort_tess", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cells), __pyx_ptype_5numpy_ndarray, 1, "cells", 0))) __PYX_ERR(0, 480, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_idx_verts), __pyx_ptype_5numpy_ndarray, 1, "idx_verts", 0))) __PYX_ERR(0, 481, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_idx_cells), __pyx_ptype_5numpy_ndarray, 1, "idx_cells", 0))) __PYX_ERR(0, 482, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_38py_arg_quickSort_tess(__pyx_self, __pyx_v_cells, __pyx_v_idx_verts, __pyx_v_idx_cells, __pyx_v_l, __pyx_v_r);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_38py_arg_quickSort_tess(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_idx_verts, PyArrayObject *__pyx_v_idx_cells, int64_t __pyx_v_l, int64_t __pyx_v_r) {
  uint32_t __pyx_v_ndim;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cells;
  __Pyx_Buffer __pyx_pybuffer_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx_cells;
  __Pyx_Buffer __pyx_pybuffer_idx_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx_verts;
  __Pyx_Buffer __pyx_pybuffer_idx_verts;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannySetupContext("py_arg_quickSort_tess", 0);
  __pyx_pybuffer_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_cells.refcount = 0;
  __pyx_pybuffernd_cells.data = NULL;
  __pyx_pybuffernd_cells.rcbuffer = &__pyx_pybuffer_cells;
  __pyx_pybuffer_idx_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_idx_verts.refcount = 0;
  __pyx_pybuffernd_idx_verts.data = NULL;
  __pyx_pybuffernd_idx_verts.rcbuffer = &__pyx_pybuffer_idx_verts;
  __pyx_pybuffer_idx_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_idx_cells.refcount = 0;
  __pyx_pybuffernd_idx_cells.data = NULL;
  __pyx_pybuffernd_idx_cells.rcbuffer = &__pyx_pybuffer_idx_cells;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 480, __pyx_L1_error)
  }
  __pyx_pybuffernd_cells.diminfo[0].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cells.diminfo[0].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cells.diminfo[1].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cells.diminfo[1].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 480, __pyx_L1_error)
  }
  __pyx_pybuffernd_idx_verts.diminfo[0].strides = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx_verts.diminfo[0].shape = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_idx_verts.diminfo[1].strides = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_idx_verts.diminfo[1].shape = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 480, __pyx_L1_error)
  }
  __pyx_pybuffernd_idx_cells.diminfo[0].strides = __pyx_pybuffernd_idx_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx_cells.diminfo[0].shape = __pyx_pybuffernd_idx_cells.rcbuffer->pybuffer.shape[0];

  /* "cgal4py/delaunay/tools.pyx":498
 * 
 *     """
 *     if cells.shape[0] == 0:             # <<<<<<<<<<<<<<
 *         return 0
 *     assert(cells.shape[0] == idx_verts.shape[0])
 */
  __pyx_t_1 = (((__pyx_v_cells->dimensions[0]) == 0) != 0);
  if (__pyx_t_1) {

    /* "cgal4py/delaunay/tools.pyx":499
 *     """
 *     if cells.shape[0] == 0:
 *         return 0             # <<<<<<<<<<<<<<
 *     assert(cells.shape[0] == idx_verts.shape[0])
 *     assert(cells.shape[0] == idx_cells.shape[0])
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;

    /* "cgal4py/delaunay/tools.pyx":498
 * 
 *     """
 *     if cells.shape[0] == 0:             # <<<<<<<<<<<<<<
 *         return 0
 *     assert(cells.shape[0] == idx_verts.shape[0])
 */
  }

  /* "cgal4py/delaunay/tools.pyx":500
 *     if cells.shape[0] == 0:
 *         return 0
 *     assert(cells.shape[0] == idx_verts.shape[0])             # <<<<<<<<<<<<<<
 *     assert(cells.shape[0] == idx_cells.shape[0])
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_cells->dimensions[0]) == (__pyx_v_idx_verts->dimensions[0])) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 500, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":501
 *         return 0
 *     assert(cells.shape[0] == idx_verts.shape[0])
 *     assert(cells.shape[0] == idx_cells.shape[0])             # <<<<<<<<<<<<<<
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_cells->dimensions[0]) == (__pyx_v_idx_cells->dimensions[0])) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 501, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":502
 *     assert(cells.shape[0] == idx_verts.shape[0])
 *     assert(cells.shape[0] == idx_cells.shape[0])
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]             # <<<<<<<<<<<<<<
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         arg_quickSort_tess[int64_t](&cells[0,0], &idx_verts[0,0], &idx_cells[0],
 */
  __pyx_v_ndim = ((uint32_t)(__pyx_v_cells->dimensions[1]));

  /* "cgal4py/delaunay/tools.pyx":503
 *     assert(cells.shape[0] == idx_cells.shape[0])
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         arg_quickSort_tess[int64_t](&cells[0,0], &idx_verts[0,0], &idx_cells[0],
 *                                     ndim, l, r)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":504
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         arg_quickSort_tess[int64_t](&cells[0,0], &idx_verts[0,0], &idx_cells[0],             # <<<<<<<<<<<<<<
 *                                     ndim, l, r)
 * 
 */
        __pyx_t_2 = 0;
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        __pyx_t_5 = 0;
        __pyx_t_6 = 0;

        /* "cgal4py/delaunay/tools.pyx":505
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         arg_quickSort_tess[int64_t](&cells[0,0], &idx_verts[0,0], &idx_cells[0],
 *                                     ndim, l, r)             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
        arg_quickSort_tess<int64_t>(((int64_t *)(&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int64_t *, __pyx_pybuffernd_cells.rcbuffer->pybuffer.buf, __pyx_t_2, __pyx_pybuffernd_cells.diminfo[0].strides, __pyx_t_3, __pyx_pybuffernd_cells.diminfo[1].strides)))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_idx_verts.diminfo[0].strides, __pyx_t_5, __pyx_pybuffernd_idx_verts.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_idx_cells.rcbuffer->pybuffer.buf, __pyx_t_6, __pyx_pybuffernd_idx_cells.diminfo[0].strides))), __pyx_v_ndim, __pyx_v_l, __pyx_v_r);
      }

      /* "cgal4py/delaunay/tools.pyx":503
 *     assert(cells.shape[0] == idx_cells.shape[0])
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         arg_quickSort_tess[int64_t](&cells[0,0], &idx_verts[0,0], &idx_cells[0],
 *                                     ndim, l, r)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L6:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":480
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_arg_quickSort_tess(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                           np.ndarray[np.uint32_t, ndim=2] idx_verts,
 *                           np.ndarray[np.uint64_t, ndim=1] idx_cells,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cgal4py.delaunay.tools.py_arg_quickSort_tess", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":509
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_arg_partition_tess(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                           np.ndarray[np.uint32_t, ndim=2] idx_verts,
 *                           np.ndarray[np.uint64_t, ndim=1] idx_cells,
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_41py_arg_partition_tess(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7cgal4py_8delaunay_5tools_40py_arg_partition_tess[] = "Partition triangulation cells between two cells by value found at a \n    pivot and return the index of the boundary.\n\n    Args:\n        cells (np.ndarray of int64): (n, m+1) array of vertex indices  \n            for the n cells in a m-dimensional triangulation. \n        idx_verts (np.ndarray of uint32): (n, m+1) array of indices to sort \n            vertices in decending order for each cell.\n        idx_cells (np.ndarray of int64): (n, ) array of indices to sort cells \n            by their sorted vertices.\n        l (int): Index of cell to start partition at.\n        r (int): Index of cell to stop partition at (inclusive).\n        p (int): Index of cell that should be used as the pivot.\n\n    Returns:\n        int: Index of the cell at the boundary between the partitions. Cells \n            with indices less than this index are smaller than the pivot cell \n            and cells with indices greater than index are larger than the pivot \n            cell.\n\n    ";
static PyMethodDef __pyx_mdef_7cgal4py_8delaunay_5tools_41py_arg_partition_tess = {"py_arg_partition_tess", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_41py_arg_partition_tess, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7cgal4py_8delaunay_5tools_40py_arg_partition_tess};
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_41py_arg_partition_tess(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_cells = 0;
  PyArrayObject *__pyx_v_idx_verts = 0;
  PyArrayObject *__pyx_v_idx_cells = 0;
  int64_t __pyx_v_l;
  int64_t __pyx_v_r;
  int64_t __pyx_v_p;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_arg_partition_tess (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cells,&__pyx_n_s_idx_verts,&__pyx_n_s_idx_cells,&__pyx_n_s_l,&__pyx_n_s_r,&__pyx_n_s_p,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cells)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx_verts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_arg_partition_tess", 1, 6, 6, 1); __PYX_ERR(0, 509, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx_cells)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_arg_partition_tess", 1, 6, 6, 2); __PYX_ERR(0, 509, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_l)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_arg_partition_tess", 1, 6, 6, 3); __PYX_ERR(0, 509, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_arg_partition_tess", 1, 6, 6, 4); __PYX_ERR(0, 509, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_arg_partition_tess", 1, 6, 6, 5); __PYX_ERR(0, 509, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_arg_partition_tess") < 0)) __PYX_ERR(0, 509, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_cells = ((PyArrayObject *)values[0]);
    __pyx_v_idx_verts = ((PyArrayObject *)values[1]);
    __pyx_v_idx_cells = ((PyArrayObject *)values[2]);
    __pyx_v_l = __Pyx_PyInt_As_int64_t(values[3]); if (unlikely((__pyx_v_l == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 512, __pyx_L3_error)
    __pyx_v_r = __Pyx_PyInt_As_int64_t(values[4]); if (unlikely((__pyx_v_r == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 512, __pyx_L3_error)
    __pyx_v_p = __Pyx_PyInt_As_int64_t(values[5]); if (unlikely((__pyx_v_p == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 512, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_arg_partition_tess", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 509, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.py_arg_partition_tess", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cells), __pyx_ptype_5numpy_ndarray, 1, "cells", 0))) __PYX_ERR(0, 509, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_idx_verts), __pyx_ptype_5numpy_ndarray, 1, "idx_verts", 0))) __PYX_ERR(0, 510, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_idx_cells), __pyx_ptype_5numpy_ndarray, 1, "idx_cells", 0))) __PYX_ERR(0, 511, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_40py_arg_partition_tess(__pyx_self, __pyx_v_cells, __pyx_v_idx_verts, __pyx_v_idx_cells, __pyx_v_l, __pyx_v_r, __pyx_v_p);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_40py_arg_partition_tess(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_cells, PyArrayObject *__pyx_v_idx_verts, PyArrayObject *__pyx_v_idx_cells, int64_t __pyx_v_l, int64_t __pyx_v_r, int64_t __pyx_v_p) {
  uint32_t __pyx_v_ndim;
  int64_t __pyx_v_out;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cells;
  __Pyx_Buffer __pyx_pybuffer_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx_cells;
  __Pyx_Buffer __pyx_pybuffer_idx_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx_verts;
  __Pyx_Buffer __pyx_pybuffer_idx_verts;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("py_arg_partition_tess", 0);
  __pyx_pybuffer_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_cells.refcount = 0;
  __pyx_pybuffernd_cells.data = NULL;
  __pyx_pybuffernd_cells.rcbuffer = &__pyx_pybuffer_cells;
  __pyx_pybuffer_idx_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_idx_verts.refcount = 0;
  __pyx_pybuffernd_idx_verts.data = NULL;
  __pyx_pybuffernd_idx_verts.rcbuffer = &__pyx_pybuffer_idx_verts;
  __pyx_pybuffer_idx_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_idx_cells.refcount = 0;
  __pyx_pybuffernd_idx_cells.data = NULL;
  __pyx_pybuffernd_idx_cells.rcbuffer = &__pyx_pybuffer_idx_cells;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 509, __pyx_L1_error)
  }
  __pyx_pybuffernd_cells.diminfo[0].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cells.diminfo[0].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cells.diminfo[1].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cells.diminfo[1].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 509, __pyx_L1_error)
  }
  __pyx_pybuffernd_idx_verts.diminfo[0].strides = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx_verts.diminfo[0].shape = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_idx_verts.diminfo[1].strides = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_idx_verts.diminfo[1].shape = __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 509, __pyx_L1_error)
  }
  __pyx_pybuffernd_idx_cells.diminfo[0].strides = __pyx_pybuffernd_idx_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx_cells.diminfo[0].shape = __pyx_pybuffernd_idx_cells.rcbuffer->pybuffer.shape[0];

  /* "cgal4py/delaunay/tools.pyx":534
 * 
 *     """
 *     if cells.shape[0] == 0:             # <<<<<<<<<<<<<<
 *         return 0
 *     assert(cells.shape[0] == idx_verts.shape[0])
 */
  __pyx_t_1 = (((__pyx_v_cells->dimensions[0]) == 0) != 0);
  if (__pyx_t_1) {

    /* "cgal4py/delaunay/tools.pyx":535
 *     """
 *     if cells.shape[0] == 0:
 *         return 0             # <<<<<<<<<<<<<<
 *     assert(cells.shape[0] == idx_verts.shape[0])
 *     assert(cells.shape[0] == idx_cells.shape[0])
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;

    /* "cgal4py/delaunay/tools.pyx":534
 * 
 *     """
 *     if cells.shape[0] == 0:             # <<<<<<<<<<<<<<
 *         return 0
 *     assert(cells.shape[0] == idx_verts.shape[0])
 */
  }

  /* "cgal4py/delaunay/tools.pyx":536
 *     if cells.shape[0] == 0:
 *         return 0
 *     assert(cells.shape[0] == idx_verts.shape[0])             # <<<<<<<<<<<<<<
 *     assert(cells.shape[0] == idx_cells.shape[0])
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_cells->dimensions[0]) == (__pyx_v_idx_verts->dimensions[0])) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 536, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":537
 *         return 0
 *     assert(cells.shape[0] == idx_verts.shape[0])
 *     assert(cells.shape[0] == idx_cells.shape[0])             # <<<<<<<<<<<<<<
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     cdef int64_t out
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_cells->dimensions[0]) == (__pyx_v_idx_cells->dimensions[0])) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 537, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":538
 *     assert(cells.shape[0] == idx_verts.shape[0])
 *     assert(cells.shape[0] == idx_cells.shape[0])
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]             # <<<<<<<<<<<<<<
 *     cdef int64_t out
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __pyx_v_ndim = ((uint32_t)(__pyx_v_cells->dimensions[1]));

  /* "cgal4py/delaunay/tools.pyx":540
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     cdef int64_t out
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         out = arg_partition_tess[int64_t](&cells[0,0], &idx_verts[0,0], &idx_cells[0],
 *                                           ndim, l, r, p)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":541
 *     cdef int64_t out
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         out = arg_partition_tess[int64_t](&cells[0,0], &idx_verts[0,0], &idx_cells[0],             # <<<<<<<<<<<<<<
 *                                           ndim, l, r, p)
 *     return out
 */
        __pyx_t_2 = 0;
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        __pyx_t_5 = 0;
        __pyx_t_6 = 0;

        /* "cgal4py/delaunay/tools.pyx":542
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         out = arg_partition_tess[int64_t](&cells[0,0], &idx_verts[0,0], &idx_cells[0],
 *                                           ndim, l, r, p)             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
        __pyx_v_out = arg_partition_tess<int64_t>(((int64_t *)(&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int64_t *, __pyx_pybuffernd_cells.rcbuffer->pybuffer.buf, __pyx_t_2, __pyx_pybuffernd_cells.diminfo[0].strides, __pyx_t_3, __pyx_pybuffernd_cells.diminfo[1].strides)))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_idx_verts.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_idx_verts.diminfo[0].strides, __pyx_t_5, __pyx_pybuffernd_idx_verts.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_idx_cells.rcbuffer->pybuffer.buf, __pyx_t_6, __pyx_pybuffernd_idx_cells.diminfo[0].strides))), __pyx_v_ndim, __pyx_v_l, __pyx_v_r, __pyx_v_p);
      }

      /* "cgal4py/delaunay/tools.pyx":540
 *     cdef uint32_t ndim = <uint32_t>cells.shape[1]
 *     cdef int64_t out
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         out = arg_partition_tess[int64_t](&cells[0,0], &idx_verts[0,0], &idx_cells[0],
 *                                           ndim, l, r, p)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L6:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":543
 *         out = arg_partition_tess[int64_t](&cells[0,0], &idx_verts[0,0], &idx_cells[0],
 *                                           ndim, l, r, p)
 *     return out             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = __Pyx_PyInt_From_int64_t(__pyx_v_out); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "cgal4py/delaunay/tools.pyx":509
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_arg_partition_tess(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                           np.ndarray[np.uint32_t, ndim=2] idx_verts,
 *                           np.ndarray[np.uint64_t, ndim=1] idx_cells,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cgal4py.delaunay.tools.py_arg_partition_tess", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_verts.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":547
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef void _swap_cells_int32(np.ndarray[np.int32_t, ndim=2] verts,             # <<<<<<<<<<<<<<
 *                             np.ndarray[np.int32_t, ndim=2] neigh,
 *                             np.uint64_t i1, np.uint64_t i2):
 */

static void __pyx_f_7cgal4py_8delaunay_5tools__swap_cells_int32(PyArrayObject *__pyx_v_verts, PyArrayObject *__pyx_v_neigh, __pyx_t_5numpy_uint64_t __pyx_v_i1, __pyx_t_5numpy_uint64_t __pyx_v_i2) {
  uint64_t __pyx_v_ncells;
  uint32_t __pyx_v_ndim;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_neigh;
  __Pyx_Buffer __pyx_pybuffer_neigh;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_verts;
  __Pyx_Buffer __pyx_pybuffer_verts;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannySetupContext("_swap_cells_int32", 0);
  __pyx_pybuffer_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_verts.refcount = 0;
  __pyx_pybuffernd_verts.data = NULL;
  __pyx_pybuffernd_verts.rcbuffer = &__pyx_pybuffer_verts;
  __pyx_pybuffer_neigh.pybuffer.buf = NULL;
  __pyx_pybuffer_neigh.refcount = 0;
  __pyx_pybuffernd_neigh.data = NULL;
  __pyx_pybuffernd_neigh.rcbuffer = &__pyx_pybuffer_neigh;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 547, __pyx_L1_error)
  }
  __pyx_pybuffernd_verts.diminfo[0].strides = __pyx_pybuffernd_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_verts.diminfo[0].shape = __pyx_pybuffernd_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_verts.diminfo[1].strides = __pyx_pybuffernd_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_verts.diminfo[1].shape = __pyx_pybuffernd_verts.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer, (PyObject*)__pyx_v_neigh, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 547, __pyx_L1_error)
  }
  __pyx_pybuffernd_neigh.diminfo[0].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_neigh.diminfo[0].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_neigh.diminfo[1].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_neigh.diminfo[1].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[1];

  /* "cgal4py/delaunay/tools.pyx":550
 *                             np.ndarray[np.int32_t, ndim=2] neigh,
 *                             np.uint64_t i1, np.uint64_t i2):
 *     if verts.ndim != 2:             # <<<<<<<<<<<<<<
 *         return
 *     assert(verts.ndim == neigh.ndim)
 */
  __pyx_t_1 = ((__pyx_v_verts->nd != 2) != 0);
  if (__pyx_t_1) {

    /* "cgal4py/delaunay/tools.pyx":551
 *                             np.uint64_t i1, np.uint64_t i2):
 *     if verts.ndim != 2:
 *         return             # <<<<<<<<<<<<<<
 *     assert(verts.ndim == neigh.ndim)
 *     assert(verts.shape[0] == neigh.shape[0])
 */
    goto __pyx_L0;

    /* "cgal4py/delaunay/tools.pyx":550
 *                             np.ndarray[np.int32_t, ndim=2] neigh,
 *                             np.uint64_t i1, np.uint64_t i2):
 *     if verts.ndim != 2:             # <<<<<<<<<<<<<<
 *         return
 *     assert(verts.ndim == neigh.ndim)
 */
  }

  /* "cgal4py/delaunay/tools.pyx":552
 *     if verts.ndim != 2:
 *         return
 *     assert(verts.ndim == neigh.ndim)             # <<<<<<<<<<<<<<
 *     assert(verts.shape[0] == neigh.shape[0])
 *     assert(verts.shape[1] == neigh.shape[1])
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_verts->nd == __pyx_v_neigh->nd) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 552, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":553
 *         return
 *     assert(verts.ndim == neigh.ndim)
 *     assert(verts.shape[0] == neigh.shape[0])             # <<<<<<<<<<<<<<
 *     assert(verts.shape[1] == neigh.shape[1])
 *     cdef uint64_t ncells = <uint64_t>verts.shape[0]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_verts->dimensions[0]) == (__pyx_v_neigh->dimensions[0])) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 553, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":554
 *     assert(verts.ndim == neigh.ndim)
 *     assert(verts.shape[0] == neigh.shape[0])
 *     assert(verts.shape[1] == neigh.shape[1])             # <<<<<<<<<<<<<<
 *     cdef uint64_t ncells = <uint64_t>verts.shape[0]
 *     cdef uint32_t ndim = <uint32_t>verts.shape[1]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_verts->dimensions[1]) == (__pyx_v_neigh->dimensions[1])) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 554, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":555
 *     assert(verts.shape[0] == neigh.shape[0])
 *     assert(verts.shape[1] == neigh.shape[1])
 *     cdef uint64_t ncells = <uint64_t>verts.shape[0]             # <<<<<<<<<<<<<<
 *     cdef uint32_t ndim = <uint32_t>verts.shape[1]
 *     if i1 >= ncells or i2 >= ncells:
 */
  __pyx_v_ncells = ((uint64_t)(__pyx_v_verts->dimensions[0]));

  /* "cgal4py/delaunay/tools.pyx":556
 *     assert(verts.shape[1] == neigh.shape[1])
 *     cdef uint64_t ncells = <uint64_t>verts.shape[0]
 *     cdef uint32_t ndim = <uint32_t>verts.shape[1]             # <<<<<<<<<<<<<<
 *     if i1 >= ncells or i2 >= ncells:
 *         return
 */
  __pyx_v_ndim = ((uint32_t)(__pyx_v_verts->dimensions[1]));

  /* "cgal4py/delaunay/tools.pyx":557
 *     cdef uint64_t ncells = <uint64_t>verts.shape[0]
 *     cdef uint32_t ndim = <uint32_t>verts.shape[1]
 *     if i1 >= ncells or i2 >= ncells:             # <<<<<<<<<<<<<<
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __pyx_t_2 = ((__pyx_v_i1 >= __pyx_v_ncells) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_i2 >= __pyx_v_ncells) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cgal4py/delaunay/tools.pyx":558
 *     cdef uint32_t ndim = <uint32_t>verts.shape[1]
 *     if i1 >= ncells or i2 >= ncells:
 *         return             # <<<<<<<<<<<<<<
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         swap_cells[int32_t](&verts[0,0], &neigh[0,0], ndim, i1, i2)
 */
    goto __pyx_L0;

    /* "cgal4py/delaunay/tools.pyx":557
 *     cdef uint64_t ncells = <uint64_t>verts.shape[0]
 *     cdef uint32_t ndim = <uint32_t>verts.shape[1]
 *     if i1 >= ncells or i2 >= ncells:             # <<<<<<<<<<<<<<
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  }

  /* "cgal4py/delaunay/tools.pyx":559
 *     if i1 >= ncells or i2 >= ncells:
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         swap_cells[int32_t](&verts[0,0], &neigh[0,0], ndim, i1, i2)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":560
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         swap_cells[int32_t](&verts[0,0], &neigh[0,0], ndim, i1, i2)             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        __pyx_t_5 = 0;
        __pyx_t_6 = 0;
        swap_cells<int32_t>((&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_verts.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_verts.diminfo[0].strides, __pyx_t_4, __pyx_pybuffernd_verts.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_neigh.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_neigh.diminfo[0].strides, __pyx_t_6, __pyx_pybuffernd_neigh.diminfo[1].strides))), __pyx_v_ndim, __pyx_v_i1, __pyx_v_i2);
      }

      /* "cgal4py/delaunay/tools.pyx":559
 *     if i1 >= ncells or i2 >= ncells:
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         swap_cells[int32_t](&verts[0,0], &neigh[0,0], ndim, i1, i2)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L9;
        }
        __pyx_L9:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":547
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef void _swap_cells_int32(np.ndarray[np.int32_t, ndim=2] verts,             # <<<<<<<<<<<<<<
 *                             np.ndarray[np.int32_t, ndim=2] neigh,
 *                             np.uint64_t i1, np.uint64_t i2):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_WriteUnraisable("cgal4py.delaunay.tools._swap_cells_int32", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
}

/* "cgal4py/delaunay/tools.pyx":564
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef void _swap_cells_uint32(np.ndarray[np.uint32_t, ndim=2] verts,             # <<<<<<<<<<<<<<
 *                              np.ndarray[np.uint32_t, ndim=2] neigh,
 *                              np.uint64_t i1, np.uint64_t i2):
 */

static void __pyx_f_7cgal4py_8delaunay_5tools__swap_cells_uint32(PyArrayObject *__pyx_v_verts, PyArrayObject *__pyx_v_neigh, __pyx_t_5numpy_uint64_t __pyx_v_i1, __pyx_t_5numpy_uint64_t __pyx_v_i2) {
  uint64_t __pyx_v_ncells;
  uint32_t __pyx_v_ndim;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_neigh;
  __Pyx_Buffer __pyx_pybuffer_neigh;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_verts;
  __Pyx_Buffer __pyx_pybuffer_verts;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannySetupContext("_swap_cells_uint32", 0);
  __pyx_pybuffer_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_verts.refcount = 0;
  __pyx_pybuffernd_verts.data = NULL;
  __pyx_pybuffernd_verts.rcbuffer = &__pyx_pybuffer_verts;
  __pyx_pybuffer_neigh.pybuffer.buf = NULL;
  __pyx_pybuffer_neigh.refcount = 0;
  __pyx_pybuffernd_neigh.data = NULL;
  __pyx_pybuffernd_neigh.rcbuffer = &__pyx_pybuffer_neigh;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 564, __pyx_L1_error)
  }
  __pyx_pybuffernd_verts.diminfo[0].strides = __pyx_pybuffernd_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_verts.diminfo[0].shape = __pyx_pybuffernd_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_verts.diminfo[1].strides = __pyx_pybuffernd_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_verts.diminfo[1].shape = __pyx_pybuffernd_verts.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer, (PyObject*)__pyx_v_neigh, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 564, __pyx_L1_error)
  }
  __pyx_pybuffernd_neigh.diminfo[0].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_neigh.diminfo[0].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_neigh.diminfo[1].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_neigh.diminfo[1].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[1];

  /* "cgal4py/delaunay/tools.pyx":567
 *                              np.ndarray[np.uint32_t, ndim=2] neigh,
 *                              np.uint64_t i1, np.uint64_t i2):
 *     if verts.ndim != 2:             # <<<<<<<<<<<<<<
 *         return
 *     assert(verts.ndim == neigh.ndim)
 */
  __pyx_t_1 = ((__pyx_v_verts->nd != 2) != 0);
  if (__pyx_t_1) {

    /* "cgal4py/delaunay/tools.pyx":568
 *                              np.uint64_t i1, np.uint64_t i2):
 *     if verts.ndim != 2:
 *         return             # <<<<<<<<<<<<<<
 *     assert(verts.ndim == neigh.ndim)
 *     assert(verts.shape[0] == neigh.shape[0])
 */
    goto __pyx_L0;

    /* "cgal4py/delaunay/tools.pyx":567
 *                              np.ndarray[np.uint32_t, ndim=2] neigh,
 *                              np.uint64_t i1, np.uint64_t i2):
 *     if verts.ndim != 2:             # <<<<<<<<<<<<<<
 *         return
 *     assert(verts.ndim == neigh.ndim)
 */
  }

  /* "cgal4py/delaunay/tools.pyx":569
 *     if verts.ndim != 2:
 *         return
 *     assert(verts.ndim == neigh.ndim)             # <<<<<<<<<<<<<<
 *     assert(verts.shape[0] == neigh.shape[0])
 *     assert(verts.shape[1] == neigh.shape[1])
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_verts->nd == __pyx_v_neigh->nd) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 569, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":570
 *         return
 *     assert(verts.ndim == neigh.ndim)
 *     assert(verts.shape[0] == neigh.shape[0])             # <<<<<<<<<<<<<<
 *     assert(verts.shape[1] == neigh.shape[1])
 *     cdef uint64_t ncells = <uint64_t>verts.shape[0]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_verts->dimensions[0]) == (__pyx_v_neigh->dimensions[0])) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 570, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":571
 *     assert(verts.ndim == neigh.ndim)
 *     assert(verts.shape[0] == neigh.shape[0])
 *     assert(verts.shape[1] == neigh.shape[1])             # <<<<<<<<<<<<<<
 *     cdef uint64_t ncells = <uint64_t>verts.shape[0]
 *     cdef uint32_t ndim = <uint32_t>verts.shape[1]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_verts->dimensions[1]) == (__pyx_v_neigh->dimensions[1])) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 571, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":572
 *     assert(verts.shape[0] == neigh.shape[0])
 *     assert(verts.shape[1] == neigh.shape[1])
 *     cdef uint64_t ncells = <uint64_t>verts.shape[0]             # <<<<<<<<<<<<<<
 *     cdef uint32_t ndim = <uint32_t>verts.shape[1]
 *     if i1 >= ncells or i2 >= ncells:
 */
  __pyx_v_ncells = ((uint64_t)(__pyx_v_verts->dimensions[0]));

  /* "cgal4py/delaunay/tools.pyx":573
 *     assert(verts.shape[1] == neigh.shape[1])
 *     cdef uint64_t ncells = <uint64_t>verts.shape[0]
 *     cdef uint32_t ndim = <uint32_t>verts.shape[1]             # <<<<<<<<<<<<<<
 *     if i1 >= ncells or i2 >= ncells:
 *         return
 */
  __pyx_v_ndim = ((uint32_t)(__pyx_v_verts->dimensions[1]));

  /* "cgal4py/delaunay/tools.pyx":574
 *     cdef uint64_t ncells = <uint64_t>verts.shape[0]
 *     cdef uint32_t ndim = <uint32_t>verts.shape[1]
 *     if i1 >= ncells or i2 >= ncells:             # <<<<<<<<<<<<<<
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __pyx_t_2 = ((__pyx_v_i1 >= __pyx_v_ncells) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_i2 >= __pyx_v_ncells) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cgal4py/delaunay/tools.pyx":575
 *     cdef uint32_t ndim = <uint32_t>verts.shape[1]
 *     if i1 >= ncells or i2 >= ncells:
 *         return             # <<<<<<<<<<<<<<
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         swap_cells[uint32_t](&verts[0,0], &neigh[0,0], ndim, i1, i2)
 */
    goto __pyx_L0;

    /* "cgal4py/delaunay/tools.pyx":574
 *     cdef uint64_t ncells = <uint64_t>verts.shape[0]
 *     cdef uint32_t ndim = <uint32_t>verts.shape[1]
 *     if i1 >= ncells or i2 >= ncells:             # <<<<<<<<<<<<<<
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  }

  /* "cgal4py/delaunay/tools.pyx":576
 *     if i1 >= ncells or i2 >= ncells:
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         swap_cells[uint32_t](&verts[0,0], &neigh[0,0], ndim, i1, i2)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":577
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         swap_cells[uint32_t](&verts[0,0], &neigh[0,0], ndim, i1, i2)             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        __pyx_t_5 = 0;
        __pyx_t_6 = 0;
        swap_cells<uint32_t>((&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_verts.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_verts.diminfo[0].strides, __pyx_t_4, __pyx_pybuffernd_verts.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_neigh.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_neigh.diminfo[0].strides, __pyx_t_6, __pyx_pybuffernd_neigh.diminfo[1].strides))), __pyx_v_ndim, __pyx_v_i1, __pyx_v_i2);
      }

      /* "cgal4py/delaunay/tools.pyx":576
 *     if i1 >= ncells or i2 >= ncells:
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         swap_cells[uint32_t](&verts[0,0], &neigh[0,0], ndim, i1, i2)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L9;
        }
        __pyx_L9:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":564
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef void _swap_cells_uint32(np.ndarray[np.uint32_t, ndim=2] verts,             # <<<<<<<<<<<<<<
 *                              np.ndarray[np.uint32_t, ndim=2] neigh,
 *                              np.uint64_t i1, np.uint64_t i2):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_WriteUnraisable("cgal4py.delaunay.tools._swap_cells_uint32", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
}

/* "cgal4py/delaunay/tools.pyx":581
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef void _swap_cells_int64(np.ndarray[np.int64_t, ndim=2] verts,             # <<<<<<<<<<<<<<
 *                             np.ndarray[np.int64_t, ndim=2] neigh,
 *                             np.uint64_t i1, np.uint64_t i2):
 */

static void __pyx_f_7cgal4py_8delaunay_5tools__swap_cells_int64(PyArrayObject *__pyx_v_verts, PyArrayObject *__pyx_v_neigh, __pyx_t_5numpy_uint64_t __pyx_v_i1, __pyx_t_5numpy_uint64_t __pyx_v_i2) {
  uint64_t __pyx_v_ncells;
  uint32_t __pyx_v_ndim;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_neigh;
  __Pyx_Buffer __pyx_pybuffer_neigh;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_verts;
  __Pyx_Buffer __pyx_pybuffer_verts;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannySetupContext("_swap_cells_int64", 0);
  __pyx_pybuffer_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_verts.refcount = 0;
  __pyx_pybuffernd_verts.data = NULL;
  __pyx_pybuffernd_verts.rcbuffer = &__pyx_pybuffer_verts;
  __pyx_pybuffer_neigh.pybuffer.buf = NULL;
  __pyx_pybuffer_neigh.refcount = 0;
  __pyx_pybuffernd_neigh.data = NULL;
  __pyx_pybuffernd_neigh.rcbuffer = &__pyx_pybuffer_neigh;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 581, __pyx_L1_error)
  }
  __pyx_pybuffernd_verts.diminfo[0].strides = __pyx_pybuffernd_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_verts.diminfo[0].shape = __pyx_pybuffernd_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_verts.diminfo[1].strides = __pyx_pybuffernd_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_verts.diminfo[1].shape = __pyx_pybuffernd_verts.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer, (PyObject*)__pyx_v_neigh, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 581, __pyx_L1_error)
  }
  __pyx_pybuffernd_neigh.diminfo[0].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_neigh.diminfo[0].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_neigh.diminfo[1].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_neigh.diminfo[1].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[1];

  /* "cgal4py/delaunay/tools.pyx":584
 *                             np.ndarray[np.int64_t, ndim=2] neigh,
 *                             np.uint64_t i1, np.uint64_t i2):
 *     if verts.ndim != 2:             # <<<<<<<<<<<<<<
 *         return
 *     assert(verts.ndim == neigh.ndim)
 */
  __pyx_t_1 = ((__pyx_v_verts->nd != 2) != 0);
  if (__pyx_t_1) {

    /* "cgal4py/delaunay/tools.pyx":585
 *                             np.uint64_t i1, np.uint64_t i2):
 *     if verts.ndim != 2:
 *         return             # <<<<<<<<<<<<<<
 *     assert(verts.ndim == neigh.ndim)
 *     assert(verts.shape[0] == neigh.shape[0])
 */
    goto __pyx_L0;

    /* "cgal4py/delaunay/tools.pyx":584
 *                             np.ndarray[np.int64_t, ndim=2] neigh,
 *                             np.uint64_t i1, np.uint64_t i2):
 *     if verts.ndim != 2:             # <<<<<<<<<<<<<<
 *         return
 *     assert(verts.ndim == neigh.ndim)
 */
  }

  /* "cgal4py/delaunay/tools.pyx":586
 *     if verts.ndim != 2:
 *         return
 *     assert(verts.ndim == neigh.ndim)             # <<<<<<<<<<<<<<
 *     assert(verts.shape[0] == neigh.shape[0])
 *     assert(verts.shape[1] == neigh.shape[1])
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_verts->nd == __pyx_v_neigh->nd) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 586, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":587
 *         return
 *     assert(verts.ndim == neigh.ndim)
 *     assert(verts.shape[0] == neigh.shape[0])             # <<<<<<<<<<<<<<
 *     assert(verts.shape[1] == neigh.shape[1])
 *     cdef uint64_t ncells = <uint64_t>verts.shape[0]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_verts->dimensions[0]) == (__pyx_v_neigh->dimensions[0])) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 587, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":588
 *     assert(verts.ndim == neigh.ndim)
 *     assert(verts.shape[0] == neigh.shape[0])
 *     assert(verts.shape[1] == neigh.shape[1])             # <<<<<<<<<<<<<<
 *     cdef uint64_t ncells = <uint64_t>verts.shape[0]
 *     cdef uint32_t ndim = <uint32_t>verts.shape[1]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_verts->dimensions[1]) == (__pyx_v_neigh->dimensions[1])) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 588, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":589
 *     assert(verts.shape[0] == neigh.shape[0])
 *     assert(verts.shape[1] == neigh.shape[1])
 *     cdef uint64_t ncells = <uint64_t>verts.shape[0]             # <<<<<<<<<<<<<<
 *     cdef uint32_t ndim = <uint32_t>verts.shape[1]
 *     if i1 >= ncells or i2 >= ncells:
 */
  __pyx_v_ncells = ((uint64_t)(__pyx_v_verts->dimensions[0]));

  /* "cgal4py/delaunay/tools.pyx":590
 *     assert(verts.shape[1] == neigh.shape[1])
 *     cdef uint64_t ncells = <uint64_t>verts.shape[0]
 *     cdef uint32_t ndim = <uint32_t>verts.shape[1]             # <<<<<<<<<<<<<<
 *     if i1 >= ncells or i2 >= ncells:
 *         return
 */
  __pyx_v_ndim = ((uint32_t)(__pyx_v_verts->dimensions[1]));

  /* "cgal4py/delaunay/tools.pyx":591
 *     cdef uint64_t ncells = <uint64_t>verts.shape[0]
 *     cdef uint32_t ndim = <uint32_t>verts.shape[1]
 *     if i1 >= ncells or i2 >= ncells:             # <<<<<<<<<<<<<<
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __pyx_t_2 = ((__pyx_v_i1 >= __pyx_v_ncells) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_i2 >= __pyx_v_ncells) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cgal4py/delaunay/tools.pyx":592
 *     cdef uint32_t ndim = <uint32_t>verts.shape[1]
 *     if i1 >= ncells or i2 >= ncells:
 *         return             # <<<<<<<<<<<<<<
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         swap_cells[int64_t](&verts[0,0], &neigh[0,0], ndim, i1, i2)
 */
    goto __pyx_L0;

    /* "cgal4py/delaunay/tools.pyx":591
 *     cdef uint64_t ncells = <uint64_t>verts.shape[0]
 *     cdef uint32_t ndim = <uint32_t>verts.shape[1]
 *     if i1 >= ncells or i2 >= ncells:             # <<<<<<<<<<<<<<
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  }

  /* "cgal4py/delaunay/tools.pyx":593
 *     if i1 >= ncells or i2 >= ncells:
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         swap_cells[int64_t](&verts[0,0], &neigh[0,0], ndim, i1, i2)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":594
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         swap_cells[int64_t](&verts[0,0], &neigh[0,0], ndim, i1, i2)             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        __pyx_t_5 = 0;
        __pyx_t_6 = 0;
        swap_cells<int64_t>(((int64_t *)(&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int64_t *, __pyx_pybuffernd_verts.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_verts.diminfo[0].strides, __pyx_t_4, __pyx_pybuffernd_verts.diminfo[1].strides)))), ((int64_t *)(&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int64_t *, __pyx_pybuffernd_neigh.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_neigh.diminfo[0].strides, __pyx_t_6, __pyx_pybuffernd_neigh.diminfo[1].strides)))), __pyx_v_ndim, __pyx_v_i1, __pyx_v_i2);
      }

      /* "cgal4py/delaunay/tools.pyx":593
 *     if i1 >= ncells or i2 >= ncells:
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         swap_cells[int64_t](&verts[0,0], &neigh[0,0], ndim, i1, i2)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L9;
        }
        __pyx_L9:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":581
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef void _swap_cells_int64(np.ndarray[np.int64_t, ndim=2] verts,             # <<<<<<<<<<<<<<
 *                             np.ndarray[np.int64_t, ndim=2] neigh,
 *                             np.uint64_t i1, np.uint64_t i2):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_WriteUnraisable("cgal4py.delaunay.tools._swap_cells_int64", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
}

/* "cgal4py/delaunay/tools.pyx":598
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef void _swap_cells_uint64(np.ndarray[np.uint64_t, ndim=2] verts,             # <<<<<<<<<<<<<<
 *                              np.ndarray[np.uint64_t, ndim=2] neigh,
 *                              np.uint64_t i1, np.uint64_t i2):
 */

static void __pyx_f_7cgal4py_8delaunay_5tools__swap_cells_uint64(PyArrayObject *__pyx_v_verts, PyArrayObject *__pyx_v_neigh, __pyx_t_5numpy_uint64_t __pyx_v_i1, __pyx_t_5numpy_uint64_t __pyx_v_i2) {
  uint64_t __pyx_v_ncells;
  uint32_t __pyx_v_ndim;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_neigh;
  __Pyx_Buffer __pyx_pybuffer_neigh;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_verts;
  __Pyx_Buffer __pyx_pybuffer_verts;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannySetupContext("_swap_cells_uint64", 0);
  __pyx_pybuffer_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_verts.refcount = 0;
  __pyx_pybuffernd_verts.data = NULL;
  __pyx_pybuffernd_verts.rcbuffer = &__pyx_pybuffer_verts;
  __pyx_pybuffer_neigh.pybuffer.buf = NULL;
  __pyx_pybuffer_neigh.refcount = 0;
  __pyx_pybuffernd_neigh.data = NULL;
  __pyx_pybuffernd_neigh.rcbuffer = &__pyx_pybuffer_neigh;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 598, __pyx_L1_error)
  }
  __pyx_pybuffernd_verts.diminfo[0].strides = __pyx_pybuffernd_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_verts.diminfo[0].shape = __pyx_pybuffernd_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_verts.diminfo[1].strides = __pyx_pybuffernd_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_verts.diminfo[1].shape = __pyx_pybuffernd_verts.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer, (PyObject*)__pyx_v_neigh, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 598, __pyx_L1_error)
  }
  __pyx_pybuffernd_neigh.diminfo[0].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_neigh.diminfo[0].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_neigh.diminfo[1].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_neigh.diminfo[1].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[1];

  /* "cgal4py/delaunay/tools.pyx":601
 *                              np.ndarray[np.uint64_t, ndim=2] neigh,
 *                              np.uint64_t i1, np.uint64_t i2):
 *     if verts.ndim != 2:             # <<<<<<<<<<<<<<
 *         return
 *     assert(verts.ndim == neigh.ndim)
 */
  __pyx_t_1 = ((__pyx_v_verts->nd != 2) != 0);
  if (__pyx_t_1) {

    /* "cgal4py/delaunay/tools.pyx":602
 *                              np.uint64_t i1, np.uint64_t i2):
 *     if verts.ndim != 2:
 *         return             # <<<<<<<<<<<<<<
 *     assert(verts.ndim == neigh.ndim)
 *     assert(verts.shape[0] == neigh.shape[0])
 */
    goto __pyx_L0;

    /* "cgal4py/delaunay/tools.pyx":601
 *                              np.ndarray[np.uint64_t, ndim=2] neigh,
 *                              np.uint64_t i1, np.uint64_t i2):
 *     if verts.ndim != 2:             # <<<<<<<<<<<<<<
 *         return
 *     assert(verts.ndim == neigh.ndim)
 */
  }

  /* "cgal4py/delaunay/tools.pyx":603
 *     if verts.ndim != 2:
 *         return
 *     assert(verts.ndim == neigh.ndim)             # <<<<<<<<<<<<<<
 *     assert(verts.shape[0] == neigh.shape[0])
 *     assert(verts.shape[1] == neigh.shape[1])
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_verts->nd == __pyx_v_neigh->nd) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 603, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":604
 *         return
 *     assert(verts.ndim == neigh.ndim)
 *     assert(verts.shape[0] == neigh.shape[0])             # <<<<<<<<<<<<<<
 *     assert(verts.shape[1] == neigh.shape[1])
 *     cdef uint64_t ncells = <uint64_t>verts.shape[0]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_verts->dimensions[0]) == (__pyx_v_neigh->dimensions[0])) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 604, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":605
 *     assert(verts.ndim == neigh.ndim)
 *     assert(verts.shape[0] == neigh.shape[0])
 *     assert(verts.shape[1] == neigh.shape[1])             # <<<<<<<<<<<<<<
 *     cdef uint64_t ncells = <uint64_t>verts.shape[0]
 *     cdef uint32_t ndim = <uint32_t>verts.shape[1]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_verts->dimensions[1]) == (__pyx_v_neigh->dimensions[1])) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 605, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":606
 *     assert(verts.shape[0] == neigh.shape[0])
 *     assert(verts.shape[1] == neigh.shape[1])
 *     cdef uint64_t ncells = <uint64_t>verts.shape[0]             # <<<<<<<<<<<<<<
 *     cdef uint32_t ndim = <uint32_t>verts.shape[1]
 *     if i1 >= ncells or i2 >= ncells:
 */
  __pyx_v_ncells = ((uint64_t)(__pyx_v_verts->dimensions[0]));

  /* "cgal4py/delaunay/tools.pyx":607
 *     assert(verts.shape[1] == neigh.shape[1])
 *     cdef uint64_t ncells = <uint64_t>verts.shape[0]
 *     cdef uint32_t ndim = <uint32_t>verts.shape[1]             # <<<<<<<<<<<<<<
 *     if i1 >= ncells or i2 >= ncells:
 *         return
 */
  __pyx_v_ndim = ((uint32_t)(__pyx_v_verts->dimensions[1]));

  /* "cgal4py/delaunay/tools.pyx":608
 *     cdef uint64_t ncells = <uint64_t>verts.shape[0]
 *     cdef uint32_t ndim = <uint32_t>verts.shape[1]
 *     if i1 >= ncells or i2 >= ncells:             # <<<<<<<<<<<<<<
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __pyx_t_2 = ((__pyx_v_i1 >= __pyx_v_ncells) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_i2 >= __pyx_v_ncells) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cgal4py/delaunay/tools.pyx":609
 *     cdef uint32_t ndim = <uint32_t>verts.shape[1]
 *     if i1 >= ncells or i2 >= ncells:
 *         return             # <<<<<<<<<<<<<<
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         swap_cells[uint64_t](&verts[0,0], &neigh[0,0], ndim, i1, i2)
 */
    goto __pyx_L0;

    /* "cgal4py/delaunay/tools.pyx":608
 *     cdef uint64_t ncells = <uint64_t>verts.shape[0]
 *     cdef uint32_t ndim = <uint32_t>verts.shape[1]
 *     if i1 >= ncells or i2 >= ncells:             # <<<<<<<<<<<<<<
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  }

  /* "cgal4py/delaunay/tools.pyx":610
 *     if i1 >= ncells or i2 >= ncells:
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         swap_cells[uint64_t](&verts[0,0], &neigh[0,0], ndim, i1, i2)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":611
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         swap_cells[uint64_t](&verts[0,0], &neigh[0,0], ndim, i1, i2)             # <<<<<<<<<<<<<<
 * 
 * def py_swap_cells(verts, neigh, i1, i2):
 */
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        __pyx_t_5 = 0;
        __pyx_t_6 = 0;
        swap_cells<uint64_t>((&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_verts.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_verts.diminfo[0].strides, __pyx_t_4, __pyx_pybuffernd_verts.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_neigh.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_neigh.diminfo[0].strides, __pyx_t_6, __pyx_pybuffernd_neigh.diminfo[1].strides))), __pyx_v_ndim, __pyx_v_i1, __pyx_v_i2);
      }

      /* "cgal4py/delaunay/tools.pyx":610
 *     if i1 >= ncells or i2 >= ncells:
 *         return
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         swap_cells[uint64_t](&verts[0,0], &neigh[0,0], ndim, i1, i2)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L9;
        }
        __pyx_L9:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":598
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef void _swap_cells_uint64(np.ndarray[np.uint64_t, ndim=2] verts,             # <<<<<<<<<<<<<<
 *                              np.ndarray[np.uint64_t, ndim=2] neigh,
 *                              np.uint64_t i1, np.uint64_t i2):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_WriteUnraisable("cgal4py.delaunay.tools._swap_cells_uint64", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
}

/* "cgal4py/delaunay/tools.pyx":613
 *         swap_cells[uint64_t](&verts[0,0], &neigh[0,0], ndim, i1, i2)
 * 
 * def py_swap_cells(verts, neigh, i1, i2):             # <<<<<<<<<<<<<<
 *     r"""Swap the verts and neighbors for two cells.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_43py_swap_cells(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7cgal4py_8delaunay_5tools_42py_swap_cells[] = "Swap the verts and neighbors for two cells.\n\n    Args:\n        verts (np.ndarray of int): Indices of cell vertices.\n        neigh (np.ndarray of int): Indices of neighboring cells.\n        i1 (uint64): Index of cell to swap with cell i2.\n        i2 (uint64): Index of cell to swap with cell i1.\n\n    ";
static PyMethodDef __pyx_mdef_7cgal4py_8delaunay_5tools_43py_swap_cells = {"py_swap_cells", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_43py_swap_cells, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7cgal4py_8delaunay_5tools_42py_swap_cells};
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_43py_swap_cells(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_verts = 0;
  PyObject *__pyx_v_neigh = 0;
  PyObject *__pyx_v_i1 = 0;
  PyObject *__pyx_v_i2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_swap_cells (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_verts,&__pyx_n_s_neigh,&__pyx_n_s_i1,&__pyx_n_s_i2,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_verts)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_neigh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_swap_cells", 1, 4, 4, 1); __PYX_ERR(0, 613, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_swap_cells", 1, 4, 4, 2); __PYX_ERR(0, 613, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_swap_cells", 1, 4, 4, 3); __PYX_ERR(0, 613, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_swap_cells") < 0)) __PYX_ERR(0, 613, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_verts = values[0];
    __pyx_v_neigh = values[1];
    __pyx_v_i1 = values[2];
    __pyx_v_i2 = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_swap_cells", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 613, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.py_swap_cells", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_42py_swap_cells(__pyx_self, __pyx_v_verts, __pyx_v_neigh, __pyx_v_i1, __pyx_v_i2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_42py_swap_cells(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_verts, PyObject *__pyx_v_neigh, PyObject *__pyx_v_i1, PyObject *__pyx_v_i2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __pyx_t_5numpy_uint64_t __pyx_t_5;
  __pyx_t_5numpy_uint64_t __pyx_t_6;
  __Pyx_RefNannySetupContext("py_swap_cells", 0);

  /* "cgal4py/delaunay/tools.pyx":623
 * 
 *     """
 *     if verts.dtype == np.int32:             # <<<<<<<<<<<<<<
 *         _swap_cells_int32(verts, neigh, i1, i2)
 *     elif verts.dtype == np.uint32:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_verts, __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "cgal4py/delaunay/tools.pyx":624
 *     """
 *     if verts.dtype == np.int32:
 *         _swap_cells_int32(verts, neigh, i1, i2)             # <<<<<<<<<<<<<<
 *     elif verts.dtype == np.uint32:
 *         _swap_cells_uint32(verts, neigh, i1, i2)
 */
    if (!(likely(((__pyx_v_verts) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_verts, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 624, __pyx_L1_error)
    if (!(likely(((__pyx_v_neigh) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_neigh, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 624, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyInt_As_npy_uint64(__pyx_v_i1); if (unlikely((__pyx_t_5 == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 624, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_As_npy_uint64(__pyx_v_i2); if (unlikely((__pyx_t_6 == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 624, __pyx_L1_error)
    __pyx_f_7cgal4py_8delaunay_5tools__swap_cells_int32(((PyArrayObject *)__pyx_v_verts), ((PyArrayObject *)__pyx_v_neigh), __pyx_t_5, __pyx_t_6);

    /* "cgal4py/delaunay/tools.pyx":623
 * 
 *     """
 *     if verts.dtype == np.int32:             # <<<<<<<<<<<<<<
 *         _swap_cells_int32(verts, neigh, i1, i2)
 *     elif verts.dtype == np.uint32:
 */
    goto __pyx_L3;
  }

  /* "cgal4py/delaunay/tools.pyx":625
 *     if verts.dtype == np.int32:
 *         _swap_cells_int32(verts, neigh, i1, i2)
 *     elif verts.dtype == np.uint32:             # <<<<<<<<<<<<<<
 *         _swap_cells_uint32(verts, neigh, i1, i2)
 *     elif verts.dtype == np.int64:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_verts, __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_uint32); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 625, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 625, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "cgal4py/delaunay/tools.pyx":626
 *         _swap_cells_int32(verts, neigh, i1, i2)
 *     elif verts.dtype == np.uint32:
 *         _swap_cells_uint32(verts, neigh, i1, i2)             # <<<<<<<<<<<<<<
 *     elif verts.dtype == np.int64:
 *         _swap_cells_int64(verts, neigh, i1, i2)
 */
    if (!(likely(((__pyx_v_verts) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_verts, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 626, __pyx_L1_error)
    if (!(likely(((__pyx_v_neigh) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_neigh, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 626, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_As_npy_uint64(__pyx_v_i1); if (unlikely((__pyx_t_6 == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 626, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyInt_As_npy_uint64(__pyx_v_i2); if (unlikely((__pyx_t_5 == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 626, __pyx_L1_error)
    __pyx_f_7cgal4py_8delaunay_5tools__swap_cells_uint32(((PyArrayObject *)__pyx_v_verts), ((PyArrayObject *)__pyx_v_neigh), __pyx_t_6, __pyx_t_5);

    /* "cgal4py/delaunay/tools.pyx":625
 *     if verts.dtype == np.int32:
 *         _swap_cells_int32(verts, neigh, i1, i2)
 *     elif verts.dtype == np.uint32:             # <<<<<<<<<<<<<<
 *         _swap_cells_uint32(verts, neigh, i1, i2)
 *     elif verts.dtype == np.int64:
 */
    goto __pyx_L3;
  }

  /* "cgal4py/delaunay/tools.pyx":627
 *     elif verts.dtype == np.uint32:
 *         _swap_cells_uint32(verts, neigh, i1, i2)
 *     elif verts.dtype == np.int64:             # <<<<<<<<<<<<<<
 *         _swap_cells_int64(verts, neigh, i1, i2)
 *     elif verts.dtype == np.uint64:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_verts, __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 627, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 627, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "cgal4py/delaunay/tools.pyx":628
 *         _swap_cells_uint32(verts, neigh, i1, i2)
 *     elif verts.dtype == np.int64:
 *         _swap_cells_int64(verts, neigh, i1, i2)             # <<<<<<<<<<<<<<
 *     elif verts.dtype == np.uint64:
 *         _swap_cells_uint64(verts, neigh, i1, i2)
 */
    if (!(likely(((__pyx_v_verts) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_verts, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 628, __pyx_L1_error)
    if (!(likely(((__pyx_v_neigh) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_neigh, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 628, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyInt_As_npy_uint64(__pyx_v_i1); if (unlikely((__pyx_t_5 == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 628, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_As_npy_uint64(__pyx_v_i2); if (unlikely((__pyx_t_6 == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 628, __pyx_L1_error)
    __pyx_f_7cgal4py_8delaunay_5tools__swap_cells_int64(((PyArrayObject *)__pyx_v_verts), ((PyArrayObject *)__pyx_v_neigh), __pyx_t_5, __pyx_t_6);

    /* "cgal4py/delaunay/tools.pyx":627
 *     elif verts.dtype == np.uint32:
 *         _swap_cells_uint32(verts, neigh, i1, i2)
 *     elif verts.dtype == np.int64:             # <<<<<<<<<<<<<<
 *         _swap_cells_int64(verts, neigh, i1, i2)
 *     elif verts.dtype == np.uint64:
 */
    goto __pyx_L3;
  }

  /* "cgal4py/delaunay/tools.pyx":629
 *     elif verts.dtype == np.int64:
 *         _swap_cells_int64(verts, neigh, i1, i2)
 *     elif verts.dtype == np.uint64:             # <<<<<<<<<<<<<<
 *         _swap_cells_uint64(verts, neigh, i1, i2)
 *     else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_verts, __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_uint64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(__pyx_t_4)) {

    /* "cgal4py/delaunay/tools.pyx":630
 *         _swap_cells_int64(verts, neigh, i1, i2)
 *     elif verts.dtype == np.uint64:
 *         _swap_cells_uint64(verts, neigh, i1, i2)             # <<<<<<<<<<<<<<
 *     else:
 *         raise TypeError
 */
    if (!(likely(((__pyx_v_verts) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_verts, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 630, __pyx_L1_error)
    if (!(likely(((__pyx_v_neigh) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_neigh, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 630, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_As_npy_uint64(__pyx_v_i1); if (unlikely((__pyx_t_6 == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 630, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyInt_As_npy_uint64(__pyx_v_i2); if (unlikely((__pyx_t_5 == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 630, __pyx_L1_error)
    __pyx_f_7cgal4py_8delaunay_5tools__swap_cells_uint64(((PyArrayObject *)__pyx_v_verts), ((PyArrayObject *)__pyx_v_neigh), __pyx_t_6, __pyx_t_5);

    /* "cgal4py/delaunay/tools.pyx":629
 *     elif verts.dtype == np.int64:
 *         _swap_cells_int64(verts, neigh, i1, i2)
 *     elif verts.dtype == np.uint64:             # <<<<<<<<<<<<<<
 *         _swap_cells_uint64(verts, neigh, i1, i2)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "cgal4py/delaunay/tools.pyx":632
 *         _swap_cells_uint64(verts, neigh, i1, i2)
 *     else:
 *         raise TypeError             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    __PYX_ERR(0, 632, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "cgal4py/delaunay/tools.pyx":613
 *         swap_cells[uint64_t](&verts[0,0], &neigh[0,0], ndim, i1, i2)
 * 
 * def py_swap_cells(verts, neigh, i1, i2):             # <<<<<<<<<<<<<<
 *     r"""Swap the verts and neighbors for two cells.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.py_swap_cells", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":636
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef sLeaves32 _vectorize_leaves_uint32(np.uint32_t ndim, object serial,             # <<<<<<<<<<<<<<
 *                                         np.ndarray[np.uint64_t] idx_start,
 *                                         np.ndarray[np.uint64_t] idx_stop):
 */

static __pyx_t_7cgal4py_8delaunay_5tools_sLeaves32 __pyx_f_7cgal4py_8delaunay_5tools__vectorize_leaves_uint32(__pyx_t_5numpy_uint32_t __pyx_v_ndim, PyObject *__pyx_v_serial, PyArrayObject *__pyx_v_idx_start, PyArrayObject *__pyx_v_idx_stop) {
  int __pyx_v_i;
  PyObject *__pyx_v_s = 0;
  __pyx_t_7cgal4py_8delaunay_5tools_sLeaves32 __pyx_v_leaves;
  __pyx_t_5numpy_uint32_t __pyx_v_idx_inf;
  int64_t __pyx_v_ncells;
  PyArrayObject *__pyx_v_verts = 0;
  PyArrayObject *__pyx_v_neigh = 0;
  PyArrayObject *__pyx_v_sort_verts = 0;
  PyArrayObject *__pyx_v_sort_cells = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx_start;
  __Pyx_Buffer __pyx_pybuffer_idx_start;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx_stop;
  __Pyx_Buffer __pyx_pybuffer_idx_stop;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_neigh;
  __Pyx_Buffer __pyx_pybuffer_neigh;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_sort_cells;
  __Pyx_Buffer __pyx_pybuffer_sort_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_sort_verts;
  __Pyx_Buffer __pyx_pybuffer_sort_verts;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_verts;
  __Pyx_Buffer __pyx_pybuffer_verts;
  __pyx_t_7cgal4py_8delaunay_5tools_sLeaves32 __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyArrayObject *__pyx_t_11 = NULL;
  __pyx_t_5numpy_uint32_t __pyx_t_12;
  PyArrayObject *__pyx_t_13 = NULL;
  PyArrayObject *__pyx_t_14 = NULL;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  __pyx_t_7cgal4py_8delaunay_5tools_sLeaf32 __pyx_t_24;
  __Pyx_RefNannySetupContext("_vectorize_leaves_uint32", 0);
  __pyx_pybuffer_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_verts.refcount = 0;
  __pyx_pybuffernd_verts.data = NULL;
  __pyx_pybuffernd_verts.rcbuffer = &__pyx_pybuffer_verts;
  __pyx_pybuffer_neigh.pybuffer.buf = NULL;
  __pyx_pybuffer_neigh.refcount = 0;
  __pyx_pybuffernd_neigh.data = NULL;
  __pyx_pybuffernd_neigh.rcbuffer = &__pyx_pybuffer_neigh;
  __pyx_pybuffer_sort_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_sort_verts.refcount = 0;
  __pyx_pybuffernd_sort_verts.data = NULL;
  __pyx_pybuffernd_sort_verts.rcbuffer = &__pyx_pybuffer_sort_verts;
  __pyx_pybuffer_sort_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_sort_cells.refcount = 0;
  __pyx_pybuffernd_sort_cells.data = NULL;
  __pyx_pybuffernd_sort_cells.rcbuffer = &__pyx_pybuffer_sort_cells;
  __pyx_pybuffer_idx_start.pybuffer.buf = NULL;
  __pyx_pybuffer_idx_start.refcount = 0;
  __pyx_pybuffernd_idx_start.data = NULL;
  __pyx_pybuffernd_idx_start.rcbuffer = &__pyx_pybuffer_idx_start;
  __pyx_pybuffer_idx_stop.pybuffer.buf = NULL;
  __pyx_pybuffer_idx_stop.refcount = 0;
  __pyx_pybuffernd_idx_stop.data = NULL;
  __pyx_pybuffernd_idx_stop.rcbuffer = &__pyx_pybuffer_idx_stop;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx_start.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx_start, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 636, __pyx_L1_error)
  }
  __pyx_pybuffernd_idx_start.diminfo[0].strides = __pyx_pybuffernd_idx_start.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx_start.diminfo[0].shape = __pyx_pybuffernd_idx_start.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx_stop.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx_stop, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 636, __pyx_L1_error)
  }
  __pyx_pybuffernd_idx_stop.diminfo[0].strides = __pyx_pybuffernd_idx_stop.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx_stop.diminfo[0].shape = __pyx_pybuffernd_idx_stop.rcbuffer->pybuffer.shape[0];

  /* "cgal4py/delaunay/tools.pyx":648
 *     cdef np.ndarray[np.uint32_t, ndim=2] sort_verts
 *     cdef np.ndarray[np.uint64_t, ndim=1] sort_cells
 *     for i,s in enumerate(serial):             # <<<<<<<<<<<<<<
 *         verts = s[0]
 *         neigh = s[1]
 */
  __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_v_serial)) || PyTuple_CheckExact(__pyx_v_serial)) {
    __pyx_t_2 = __pyx_v_serial; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_serial); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 648, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 648, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 648, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 648, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 648, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 648, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 648, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_v_i = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "cgal4py/delaunay/tools.pyx":649
 *     cdef np.ndarray[np.uint64_t, ndim=1] sort_cells
 *     for i,s in enumerate(serial):
 *         verts = s[0]             # <<<<<<<<<<<<<<
 *         neigh = s[1]
 *         idx_inf = s[2]
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_s, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 649, __pyx_L1_error)
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_verts.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
        __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
      }
      __pyx_pybuffernd_verts.diminfo[0].strides = __pyx_pybuffernd_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_verts.diminfo[0].shape = __pyx_pybuffernd_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_verts.diminfo[1].strides = __pyx_pybuffernd_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_verts.diminfo[1].shape = __pyx_pybuffernd_verts.rcbuffer->pybuffer.shape[1];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 649, __pyx_L1_error)
    }
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_verts, ((PyArrayObject *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "cgal4py/delaunay/tools.pyx":650
 *     for i,s in enumerate(serial):
 *         verts = s[0]
 *         neigh = s[1]             # <<<<<<<<<<<<<<
 *         idx_inf = s[2]
 *         sort_verts = s[3]
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_s, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 650, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 650, __pyx_L1_error)
    __pyx_t_11 = ((PyArrayObject *)__pyx_t_5);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer, (PyObject*)__pyx_v_neigh, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
        __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
      }
      __pyx_pybuffernd_neigh.diminfo[0].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_neigh.diminfo[0].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_neigh.diminfo[1].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_neigh.diminfo[1].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[1];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 650, __pyx_L1_error)
    }
    __pyx_t_11 = 0;
    __Pyx_XDECREF_SET(__pyx_v_neigh, ((PyArrayObject *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "cgal4py/delaunay/tools.pyx":651
 *         verts = s[0]
 *         neigh = s[1]
 *         idx_inf = s[2]             # <<<<<<<<<<<<<<
 *         sort_verts = s[3]
 *         sort_cells = s[4]
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_s, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 651, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_12 = __Pyx_PyInt_As_npy_uint32(__pyx_t_5); if (unlikely((__pyx_t_12 == ((npy_uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 651, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_idx_inf = __pyx_t_12;

    /* "cgal4py/delaunay/tools.pyx":652
 *         neigh = s[1]
 *         idx_inf = s[2]
 *         sort_verts = s[3]             # <<<<<<<<<<<<<<
 *         sort_cells = s[4]
 *         ncells = <int64_t>verts.shape[0]
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_s, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 652, __pyx_L1_error)
    __pyx_t_13 = ((PyArrayObject *)__pyx_t_5);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sort_verts.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sort_verts.rcbuffer->pybuffer, (PyObject*)__pyx_t_13, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sort_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_sort_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
        __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
      }
      __pyx_pybuffernd_sort_verts.diminfo[0].strides = __pyx_pybuffernd_sort_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sort_verts.diminfo[0].shape = __pyx_pybuffernd_sort_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_sort_verts.diminfo[1].strides = __pyx_pybuffernd_sort_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_sort_verts.diminfo[1].shape = __pyx_pybuffernd_sort_verts.rcbuffer->pybuffer.shape[1];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 652, __pyx_L1_error)
    }
    __pyx_t_13 = 0;
    __Pyx_XDECREF_SET(__pyx_v_sort_verts, ((PyArrayObject *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "cgal4py/delaunay/tools.pyx":653
 *         idx_inf = s[2]
 *         sort_verts = s[3]
 *         sort_cells = s[4]             # <<<<<<<<<<<<<<
 *         ncells = <int64_t>verts.shape[0]
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_s, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 653, __pyx_L1_error)
    __pyx_t_14 = ((PyArrayObject *)__pyx_t_5);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sort_cells.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sort_cells.rcbuffer->pybuffer, (PyObject*)__pyx_t_14, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sort_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_sort_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
        __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
      }
      __pyx_pybuffernd_sort_cells.diminfo[0].strides = __pyx_pybuffernd_sort_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sort_cells.diminfo[0].shape = __pyx_pybuffernd_sort_cells.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 653, __pyx_L1_error)
    }
    __pyx_t_14 = 0;
    __Pyx_XDECREF_SET(__pyx_v_sort_cells, ((PyArrayObject *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "cgal4py/delaunay/tools.pyx":654
 *         sort_verts = s[3]
 *         sort_cells = s[4]
 *         ncells = <int64_t>verts.shape[0]             # <<<<<<<<<<<<<<
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             leaves.push_back(sLeaf32(i, ndim, ncells, idx_inf,
 */
    __pyx_v_ncells = ((int64_t)(__pyx_v_verts->dimensions[0]));

    /* "cgal4py/delaunay/tools.pyx":655
 *         sort_cells = s[4]
 *         ncells = <int64_t>verts.shape[0]
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *             leaves.push_back(sLeaf32(i, ndim, ncells, idx_inf,
 *                                      &verts[0,0], &neigh[0,0],
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "cgal4py/delaunay/tools.pyx":657
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             leaves.push_back(sLeaf32(i, ndim, ncells, idx_inf,
 *                                      &verts[0,0], &neigh[0,0],             # <<<<<<<<<<<<<<
 *                                      &sort_verts[0,0], &sort_cells[0],
 *                                      idx_start[i], idx_stop[i]))
 */
          __pyx_t_15 = 0;
          __pyx_t_16 = 0;
          __pyx_t_17 = 0;
          __pyx_t_18 = 0;

          /* "cgal4py/delaunay/tools.pyx":658
 *             leaves.push_back(sLeaf32(i, ndim, ncells, idx_inf,
 *                                      &verts[0,0], &neigh[0,0],
 *                                      &sort_verts[0,0], &sort_cells[0],             # <<<<<<<<<<<<<<
 *                                      idx_start[i], idx_stop[i]))
 *     return leaves
 */
          __pyx_t_19 = 0;
          __pyx_t_20 = 0;
          __pyx_t_21 = 0;

          /* "cgal4py/delaunay/tools.pyx":659
 *                                      &verts[0,0], &neigh[0,0],
 *                                      &sort_verts[0,0], &sort_cells[0],
 *                                      idx_start[i], idx_stop[i]))             # <<<<<<<<<<<<<<
 *     return leaves
 * 
 */
          __pyx_t_22 = __pyx_v_i;
          __pyx_t_23 = __pyx_v_i;

          /* "cgal4py/delaunay/tools.pyx":656
 *         ncells = <int64_t>verts.shape[0]
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             leaves.push_back(sLeaf32(i, ndim, ncells, idx_inf,             # <<<<<<<<<<<<<<
 *                                      &verts[0,0], &neigh[0,0],
 *                                      &sort_verts[0,0], &sort_cells[0],
 */
          try {
            __pyx_t_24 = __pyx_t_7cgal4py_8delaunay_5tools_sLeaf32(__pyx_v_i, __pyx_v_ndim, __pyx_v_ncells, __pyx_v_idx_inf, (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_verts.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_verts.diminfo[0].strides, __pyx_t_16, __pyx_pybuffernd_verts.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_neigh.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_neigh.diminfo[0].strides, __pyx_t_18, __pyx_pybuffernd_neigh.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_sort_verts.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_sort_verts.diminfo[0].strides, __pyx_t_20, __pyx_pybuffernd_sort_verts.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_sort_cells.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_sort_cells.diminfo[0].strides))), (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_idx_start.rcbuffer->pybuffer.buf, __pyx_t_22, __pyx_pybuffernd_idx_start.diminfo[0].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_idx_stop.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_idx_stop.diminfo[0].strides)));
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 656, __pyx_L8_error)
          }
          try {
            __pyx_v_leaves.push_back(__pyx_t_24);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 656, __pyx_L8_error)
          }
        }

        /* "cgal4py/delaunay/tools.pyx":655
 *         sort_cells = s[4]
 *         ncells = <int64_t>verts.shape[0]
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *             leaves.push_back(sLeaf32(i, ndim, ncells, idx_inf,
 *                                      &verts[0,0], &neigh[0,0],
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L9;
          }
          __pyx_L8_error: {
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L1_error;
          }
          __pyx_L9:;
        }
    }

    /* "cgal4py/delaunay/tools.pyx":648
 *     cdef np.ndarray[np.uint32_t, ndim=2] sort_verts
 *     cdef np.ndarray[np.uint64_t, ndim=1] sort_cells
 *     for i,s in enumerate(serial):             # <<<<<<<<<<<<<<
 *         verts = s[0]
 *         neigh = s[1]
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cgal4py/delaunay/tools.pyx":660
 *                                      &sort_verts[0,0], &sort_cells[0],
 *                                      idx_start[i], idx_stop[i]))
 *     return leaves             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __pyx_r = __pyx_v_leaves;
  goto __pyx_L0;

  /* "cgal4py/delaunay/tools.pyx":636
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef sLeaves32 _vectorize_leaves_uint32(np.uint32_t ndim, object serial,             # <<<<<<<<<<<<<<
 *                                         np.ndarray[np.uint64_t] idx_start,
 *                                         np.ndarray[np.uint64_t] idx_stop):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_start.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_stop.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sort_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sort_verts.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_WriteUnraisable("cgal4py.delaunay.tools._vectorize_leaves_uint32", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_start.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_stop.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sort_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sort_verts.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF((PyObject *)__pyx_v_verts);
  __Pyx_XDECREF((PyObject *)__pyx_v_neigh);
  __Pyx_XDECREF((PyObject *)__pyx_v_sort_verts);
  __Pyx_XDECREF((PyObject *)__pyx_v_sort_cells);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":664
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef sLeaves64 _vectorize_leaves_uint64(np.uint32_t ndim, object serial,             # <<<<<<<<<<<<<<
 *                                         np.ndarray[np.uint64_t] idx_start,
 *                                         np.ndarray[np.uint64_t] idx_stop):
 */

static __pyx_t_7cgal4py_8delaunay_5tools_sLeaves64 __pyx_f_7cgal4py_8delaunay_5tools__vectorize_leaves_uint64(__pyx_t_5numpy_uint32_t __pyx_v_ndim, PyObject *__pyx_v_serial, PyArrayObject *__pyx_v_idx_start, PyArrayObject *__pyx_v_idx_stop) {
  int __pyx_v_i;
  PyObject *__pyx_v_s = 0;
  __pyx_t_7cgal4py_8delaunay_5tools_sLeaves64 __pyx_v_leaves;
  __pyx_t_5numpy_uint64_t __pyx_v_idx_inf;
  int64_t __pyx_v_ncells;
  PyArrayObject *__pyx_v_verts = 0;
  PyArrayObject *__pyx_v_neigh = 0;
  PyArrayObject *__pyx_v_sort_verts = 0;
  PyArrayObject *__pyx_v_sort_cells = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx_start;
  __Pyx_Buffer __pyx_pybuffer_idx_start;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx_stop;
  __Pyx_Buffer __pyx_pybuffer_idx_stop;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_neigh;
  __Pyx_Buffer __pyx_pybuffer_neigh;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_sort_cells;
  __Pyx_Buffer __pyx_pybuffer_sort_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_sort_verts;
  __Pyx_Buffer __pyx_pybuffer_sort_verts;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_verts;
  __Pyx_Buffer __pyx_pybuffer_verts;
  __pyx_t_7cgal4py_8delaunay_5tools_sLeaves64 __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyArrayObject *__pyx_t_11 = NULL;
  __pyx_t_5numpy_uint64_t __pyx_t_12;
  PyArrayObject *__pyx_t_13 = NULL;
  PyArrayObject *__pyx_t_14 = NULL;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  __pyx_t_7cgal4py_8delaunay_5tools_sLeaf64 __pyx_t_24;
  __Pyx_RefNannySetupContext("_vectorize_leaves_uint64", 0);
  __pyx_pybuffer_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_verts.refcount = 0;
  __pyx_pybuffernd_verts.data = NULL;
  __pyx_pybuffernd_verts.rcbuffer = &__pyx_pybuffer_verts;
  __pyx_pybuffer_neigh.pybuffer.buf = NULL;
  __pyx_pybuffer_neigh.refcount = 0;
  __pyx_pybuffernd_neigh.data = NULL;
  __pyx_pybuffernd_neigh.rcbuffer = &__pyx_pybuffer_neigh;
  __pyx_pybuffer_sort_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_sort_verts.refcount = 0;
  __pyx_pybuffernd_sort_verts.data = NULL;
  __pyx_pybuffernd_sort_verts.rcbuffer = &__pyx_pybuffer_sort_verts;
  __pyx_pybuffer_sort_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_sort_cells.refcount = 0;
  __pyx_pybuffernd_sort_cells.data = NULL;
  __pyx_pybuffernd_sort_cells.rcbuffer = &__pyx_pybuffer_sort_cells;
  __pyx_pybuffer_idx_start.pybuffer.buf = NULL;
  __pyx_pybuffer_idx_start.refcount = 0;
  __pyx_pybuffernd_idx_start.data = NULL;
  __pyx_pybuffernd_idx_start.rcbuffer = &__pyx_pybuffer_idx_start;
  __pyx_pybuffer_idx_stop.pybuffer.buf = NULL;
  __pyx_pybuffer_idx_stop.refcount = 0;
  __pyx_pybuffernd_idx_stop.data = NULL;
  __pyx_pybuffernd_idx_stop.rcbuffer = &__pyx_pybuffer_idx_stop;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx_start.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx_start, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 664, __pyx_L1_error)
  }
  __pyx_pybuffernd_idx_start.diminfo[0].strides = __pyx_pybuffernd_idx_start.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx_start.diminfo[0].shape = __pyx_pybuffernd_idx_start.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx_stop.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx_stop, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 664, __pyx_L1_error)
  }
  __pyx_pybuffernd_idx_stop.diminfo[0].strides = __pyx_pybuffernd_idx_stop.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx_stop.diminfo[0].shape = __pyx_pybuffernd_idx_stop.rcbuffer->pybuffer.shape[0];

  /* "cgal4py/delaunay/tools.pyx":676
 *     cdef np.ndarray[np.uint32_t, ndim=2] sort_verts
 *     cdef np.ndarray[np.uint64_t, ndim=1] sort_cells
 *     for i,s in enumerate(serial):             # <<<<<<<<<<<<<<
 *         verts = s[0]
 *         neigh = s[1]
 */
  __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_v_serial)) || PyTuple_CheckExact(__pyx_v_serial)) {
    __pyx_t_2 = __pyx_v_serial; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_serial); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 676, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 676, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 676, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 676, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 676, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 676, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 676, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_v_i = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "cgal4py/delaunay/tools.pyx":677
 *     cdef np.ndarray[np.uint64_t, ndim=1] sort_cells
 *     for i,s in enumerate(serial):
 *         verts = s[0]             # <<<<<<<<<<<<<<
 *         neigh = s[1]
 *         idx_inf = s[2]
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_s, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 677, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 677, __pyx_L1_error)
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_verts.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
        __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
      }
      __pyx_pybuffernd_verts.diminfo[0].strides = __pyx_pybuffernd_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_verts.diminfo[0].shape = __pyx_pybuffernd_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_verts.diminfo[1].strides = __pyx_pybuffernd_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_verts.diminfo[1].shape = __pyx_pybuffernd_verts.rcbuffer->pybuffer.shape[1];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 677, __pyx_L1_error)
    }
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_verts, ((PyArrayObject *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "cgal4py/delaunay/tools.pyx":678
 *     for i,s in enumerate(serial):
 *         verts = s[0]
 *         neigh = s[1]             # <<<<<<<<<<<<<<
 *         idx_inf = s[2]
 *         sort_verts = s[3]
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_s, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 678, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 678, __pyx_L1_error)
    __pyx_t_11 = ((PyArrayObject *)__pyx_t_5);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer, (PyObject*)__pyx_v_neigh, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
        __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
      }
      __pyx_pybuffernd_neigh.diminfo[0].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_neigh.diminfo[0].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_neigh.diminfo[1].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_neigh.diminfo[1].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[1];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 678, __pyx_L1_error)
    }
    __pyx_t_11 = 0;
    __Pyx_XDECREF_SET(__pyx_v_neigh, ((PyArrayObject *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "cgal4py/delaunay/tools.pyx":679
 *         verts = s[0]
 *         neigh = s[1]
 *         idx_inf = s[2]             # <<<<<<<<<<<<<<
 *         sort_verts = s[3]
 *         sort_cells = s[4]
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_s, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 679, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_12 = __Pyx_PyInt_As_npy_uint64(__pyx_t_5); if (unlikely((__pyx_t_12 == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 679, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_idx_inf = __pyx_t_12;

    /* "cgal4py/delaunay/tools.pyx":680
 *         neigh = s[1]
 *         idx_inf = s[2]
 *         sort_verts = s[3]             # <<<<<<<<<<<<<<
 *         sort_cells = s[4]
 *         ncells = <int64_t>verts.shape[0]
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_s, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 680, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 680, __pyx_L1_error)
    __pyx_t_13 = ((PyArrayObject *)__pyx_t_5);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sort_verts.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sort_verts.rcbuffer->pybuffer, (PyObject*)__pyx_t_13, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sort_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_sort_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
        __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
      }
      __pyx_pybuffernd_sort_verts.diminfo[0].strides = __pyx_pybuffernd_sort_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sort_verts.diminfo[0].shape = __pyx_pybuffernd_sort_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_sort_verts.diminfo[1].strides = __pyx_pybuffernd_sort_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_sort_verts.diminfo[1].shape = __pyx_pybuffernd_sort_verts.rcbuffer->pybuffer.shape[1];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 680, __pyx_L1_error)
    }
    __pyx_t_13 = 0;
    __Pyx_XDECREF_SET(__pyx_v_sort_verts, ((PyArrayObject *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "cgal4py/delaunay/tools.pyx":681
 *         idx_inf = s[2]
 *         sort_verts = s[3]
 *         sort_cells = s[4]             # <<<<<<<<<<<<<<
 *         ncells = <int64_t>verts.shape[0]
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_s, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 681, __pyx_L1_error)
    __pyx_t_14 = ((PyArrayObject *)__pyx_t_5);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sort_cells.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sort_cells.rcbuffer->pybuffer, (PyObject*)__pyx_t_14, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sort_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_sort_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
        __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
      }
      __pyx_pybuffernd_sort_cells.diminfo[0].strides = __pyx_pybuffernd_sort_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sort_cells.diminfo[0].shape = __pyx_pybuffernd_sort_cells.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 681, __pyx_L1_error)
    }
    __pyx_t_14 = 0;
    __Pyx_XDECREF_SET(__pyx_v_sort_cells, ((PyArrayObject *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "cgal4py/delaunay/tools.pyx":682
 *         sort_verts = s[3]
 *         sort_cells = s[4]
 *         ncells = <int64_t>verts.shape[0]             # <<<<<<<<<<<<<<
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             leaves.push_back(sLeaf64(i, ndim, ncells, idx_inf,
 */
    __pyx_v_ncells = ((int64_t)(__pyx_v_verts->dimensions[0]));

    /* "cgal4py/delaunay/tools.pyx":683
 *         sort_cells = s[4]
 *         ncells = <int64_t>verts.shape[0]
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *             leaves.push_back(sLeaf64(i, ndim, ncells, idx_inf,
 *                                      &verts[0,0], &neigh[0,0],
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "cgal4py/delaunay/tools.pyx":685
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             leaves.push_back(sLeaf64(i, ndim, ncells, idx_inf,
 *                                      &verts[0,0], &neigh[0,0],             # <<<<<<<<<<<<<<
 *                                      &sort_verts[0,0], &sort_cells[0],
 *                                      idx_start[i], idx_stop[i]))
 */
          __pyx_t_15 = 0;
          __pyx_t_16 = 0;
          __pyx_t_17 = 0;
          __pyx_t_18 = 0;

          /* "cgal4py/delaunay/tools.pyx":686
 *             leaves.push_back(sLeaf64(i, ndim, ncells, idx_inf,
 *                                      &verts[0,0], &neigh[0,0],
 *                                      &sort_verts[0,0], &sort_cells[0],             # <<<<<<<<<<<<<<
 *                                      idx_start[i], idx_stop[i]))
 *     return leaves
 */
          __pyx_t_19 = 0;
          __pyx_t_20 = 0;
          __pyx_t_21 = 0;

          /* "cgal4py/delaunay/tools.pyx":687
 *                                      &verts[0,0], &neigh[0,0],
 *                                      &sort_verts[0,0], &sort_cells[0],
 *                                      idx_start[i], idx_stop[i]))             # <<<<<<<<<<<<<<
 *     return leaves
 * 
 */
          __pyx_t_22 = __pyx_v_i;
          __pyx_t_23 = __pyx_v_i;

          /* "cgal4py/delaunay/tools.pyx":684
 *         ncells = <int64_t>verts.shape[0]
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             leaves.push_back(sLeaf64(i, ndim, ncells, idx_inf,             # <<<<<<<<<<<<<<
 *                                      &verts[0,0], &neigh[0,0],
 *                                      &sort_verts[0,0], &sort_cells[0],
 */
          try {
            __pyx_t_24 = __pyx_t_7cgal4py_8delaunay_5tools_sLeaf64(__pyx_v_i, __pyx_v_ndim, __pyx_v_ncells, __pyx_v_idx_inf, (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_verts.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_verts.diminfo[0].strides, __pyx_t_16, __pyx_pybuffernd_verts.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_neigh.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_neigh.diminfo[0].strides, __pyx_t_18, __pyx_pybuffernd_neigh.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_sort_verts.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_sort_verts.diminfo[0].strides, __pyx_t_20, __pyx_pybuffernd_sort_verts.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_sort_cells.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_sort_cells.diminfo[0].strides))), (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_idx_start.rcbuffer->pybuffer.buf, __pyx_t_22, __pyx_pybuffernd_idx_start.diminfo[0].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_idx_stop.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_idx_stop.diminfo[0].strides)));
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 684, __pyx_L8_error)
          }
          try {
            __pyx_v_leaves.push_back(__pyx_t_24);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 684, __pyx_L8_error)
          }
        }

        /* "cgal4py/delaunay/tools.pyx":683
 *         sort_cells = s[4]
 *         ncells = <int64_t>verts.shape[0]
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *             leaves.push_back(sLeaf64(i, ndim, ncells, idx_inf,
 *                                      &verts[0,0], &neigh[0,0],
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L9;
          }
          __pyx_L8_error: {
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L1_error;
          }
          __pyx_L9:;
        }
    }

    /* "cgal4py/delaunay/tools.pyx":676
 *     cdef np.ndarray[np.uint32_t, ndim=2] sort_verts
 *     cdef np.ndarray[np.uint64_t, ndim=1] sort_cells
 *     for i,s in enumerate(serial):             # <<<<<<<<<<<<<<
 *         verts = s[0]
 *         neigh = s[1]
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cgal4py/delaunay/tools.pyx":688
 *                                      &sort_verts[0,0], &sort_cells[0],
 *                                      idx_start[i], idx_stop[i]))
 *     return leaves             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __pyx_r = __pyx_v_leaves;
  goto __pyx_L0;

  /* "cgal4py/delaunay/tools.pyx":664
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef sLeaves64 _vectorize_leaves_uint64(np.uint32_t ndim, object serial,             # <<<<<<<<<<<<<<
 *                                         np.ndarray[np.uint64_t] idx_start,
 *                                         np.ndarray[np.uint64_t] idx_stop):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_start.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_stop.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sort_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sort_verts.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_WriteUnraisable("cgal4py.delaunay.tools._vectorize_leaves_uint64", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_start.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx_stop.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sort_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sort_verts.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF((PyObject *)__pyx_v_verts);
  __Pyx_XDECREF((PyObject *)__pyx_v_neigh);
  __Pyx_XDECREF((PyObject *)__pyx_v_sort_verts);
  __Pyx_XDECREF((PyObject *)__pyx_v_sort_cells);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":692
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef np.int64_t _consolidate_uint32_uint64(np.uint32_t ndim, np.uint64_t idx_inf,             # <<<<<<<<<<<<<<
 *                                            object serial,
 *                                            np.ndarray[np.uint64_t] leaf_start,
 */

static __pyx_t_5numpy_int64_t __pyx_f_7cgal4py_8delaunay_5tools__consolidate_uint32_uint64(__pyx_t_5numpy_uint32_t __pyx_v_ndim, __pyx_t_5numpy_uint64_t __pyx_v_idx_inf, PyObject *__pyx_v_serial, PyArrayObject *__pyx_v_leaf_start, PyArrayObject *__pyx_v_leaf_stop, PyArrayObject *__pyx_v_verts, PyArrayObject *__pyx_v_cells) {
  __pyx_t_7cgal4py_8delaunay_5tools_sLeaves32 __pyx_v_leaves;
  uint64_t __pyx_v_num_leaves;
  int64_t __pyx_v_max_ncells;
  ConsolidatedLeaves<uint64_t>  __pyx_v_obj;
  uint64_t __pyx_v_i;
  __pyx_t_5numpy_int64_t __pyx_v_ncells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cells;
  __Pyx_Buffer __pyx_pybuffer_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_leaf_start;
  __Pyx_Buffer __pyx_pybuffer_leaf_start;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_leaf_stop;
  __Pyx_Buffer __pyx_pybuffer_leaf_stop;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_verts;
  __Pyx_Buffer __pyx_pybuffer_verts;
  __pyx_t_5numpy_int64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  ConsolidatedLeaves<uint64_t>  __pyx_t_6;
  uint64_t __pyx_t_7;
  uint64_t __pyx_t_8;
  uint64_t __pyx_t_9;
  int64_t __pyx_t_10;
  __Pyx_RefNannySetupContext("_consolidate_uint32_uint64", 0);
  __pyx_pybuffer_leaf_start.pybuffer.buf = NULL;
  __pyx_pybuffer_leaf_start.refcount = 0;
  __pyx_pybuffernd_leaf_start.data = NULL;
  __pyx_pybuffernd_leaf_start.rcbuffer = &__pyx_pybuffer_leaf_start;
  __pyx_pybuffer_leaf_stop.pybuffer.buf = NULL;
  __pyx_pybuffer_leaf_stop.refcount = 0;
  __pyx_pybuffernd_leaf_stop.data = NULL;
  __pyx_pybuffernd_leaf_stop.rcbuffer = &__pyx_pybuffer_leaf_stop;
  __pyx_pybuffer_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_verts.refcount = 0;
  __pyx_pybuffernd_verts.data = NULL;
  __pyx_pybuffernd_verts.rcbuffer = &__pyx_pybuffer_verts;
  __pyx_pybuffer_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_cells.refcount = 0;
  __pyx_pybuffernd_cells.data = NULL;
  __pyx_pybuffernd_cells.rcbuffer = &__pyx_pybuffer_cells;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_leaf_start.rcbuffer->pybuffer, (PyObject*)__pyx_v_leaf_start, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 692, __pyx_L1_error)
  }
  __pyx_pybuffernd_leaf_start.diminfo[0].strides = __pyx_pybuffernd_leaf_start.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_leaf_start.diminfo[0].shape = __pyx_pybuffernd_leaf_start.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_leaf_stop.rcbuffer->pybuffer, (PyObject*)__pyx_v_leaf_stop, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 692, __pyx_L1_error)
  }
  __pyx_pybuffernd_leaf_stop.diminfo[0].strides = __pyx_pybuffernd_leaf_stop.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_leaf_stop.diminfo[0].shape = __pyx_pybuffernd_leaf_stop.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 692, __pyx_L1_error)
  }
  __pyx_pybuffernd_verts.diminfo[0].strides = __pyx_pybuffernd_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_verts.diminfo[0].shape = __pyx_pybuffernd_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_verts.diminfo[1].strides = __pyx_pybuffernd_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_verts.diminfo[1].shape = __pyx_pybuffernd_verts.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 692, __pyx_L1_error)
  }
  __pyx_pybuffernd_cells.diminfo[0].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cells.diminfo[0].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cells.diminfo[1].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cells.diminfo[1].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[1];

  /* "cgal4py/delaunay/tools.pyx":698
 *                                            np.ndarray[np.uint64_t, ndim=2] verts,
 *                                            np.ndarray[np.uint64_t, ndim=2] cells):
 *     cdef sLeaves32 leaves = _vectorize_leaves_uint32(ndim, serial, leaf_start, leaf_stop)             # <<<<<<<<<<<<<<
 *     cdef uint64_t num_leaves = <uint64_t>leaves.size()
 *     cdef int64_t max_ncells = <int64_t>verts.shape[0]
 */
  __pyx_v_leaves = __pyx_f_7cgal4py_8delaunay_5tools__vectorize_leaves_uint32(__pyx_v_ndim, __pyx_v_serial, ((PyArrayObject *)__pyx_v_leaf_start), ((PyArrayObject *)__pyx_v_leaf_stop));

  /* "cgal4py/delaunay/tools.pyx":699
 *                                            np.ndarray[np.uint64_t, ndim=2] cells):
 *     cdef sLeaves32 leaves = _vectorize_leaves_uint32(ndim, serial, leaf_start, leaf_stop)
 *     cdef uint64_t num_leaves = <uint64_t>leaves.size()             # <<<<<<<<<<<<<<
 *     cdef int64_t max_ncells = <int64_t>verts.shape[0]
 *     if max_ncells == 0:
 */
  __pyx_v_num_leaves = ((uint64_t)__pyx_v_leaves.size());

  /* "cgal4py/delaunay/tools.pyx":700
 *     cdef sLeaves32 leaves = _vectorize_leaves_uint32(ndim, serial, leaf_start, leaf_stop)
 *     cdef uint64_t num_leaves = <uint64_t>leaves.size()
 *     cdef int64_t max_ncells = <int64_t>verts.shape[0]             # <<<<<<<<<<<<<<
 *     if max_ncells == 0:
 *         return max_ncells
 */
  __pyx_v_max_ncells = ((int64_t)(__pyx_v_verts->dimensions[0]));

  /* "cgal4py/delaunay/tools.pyx":701
 *     cdef uint64_t num_leaves = <uint64_t>leaves.size()
 *     cdef int64_t max_ncells = <int64_t>verts.shape[0]
 *     if max_ncells == 0:             # <<<<<<<<<<<<<<
 *         return max_ncells
 *     assert(cells.shape[0] == max_ncells)
 */
  __pyx_t_1 = ((__pyx_v_max_ncells == 0) != 0);
  if (__pyx_t_1) {

    /* "cgal4py/delaunay/tools.pyx":702
 *     cdef int64_t max_ncells = <int64_t>verts.shape[0]
 *     if max_ncells == 0:
 *         return max_ncells             # <<<<<<<<<<<<<<
 *     assert(cells.shape[0] == max_ncells)
 *     cdef ConsolidatedLeaves[uint64_t] obj
 */
    __pyx_r = __pyx_v_max_ncells;
    goto __pyx_L0;

    /* "cgal4py/delaunay/tools.pyx":701
 *     cdef uint64_t num_leaves = <uint64_t>leaves.size()
 *     cdef int64_t max_ncells = <int64_t>verts.shape[0]
 *     if max_ncells == 0:             # <<<<<<<<<<<<<<
 *         return max_ncells
 *     assert(cells.shape[0] == max_ncells)
 */
  }

  /* "cgal4py/delaunay/tools.pyx":703
 *     if max_ncells == 0:
 *         return max_ncells
 *     assert(cells.shape[0] == max_ncells)             # <<<<<<<<<<<<<<
 *     cdef ConsolidatedLeaves[uint64_t] obj
 *     cdef uint64_t i
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_cells->dimensions[0]) == __pyx_v_max_ncells) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 703, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":706
 *     cdef ConsolidatedLeaves[uint64_t] obj
 *     cdef uint64_t i
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         obj = ConsolidatedLeaves[uint64_t](ndim, idx_inf, max_ncells,
 *                                            &verts[0,0], &cells[0,0])
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":708
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         obj = ConsolidatedLeaves[uint64_t](ndim, idx_inf, max_ncells,
 *                                            &verts[0,0], &cells[0,0])             # <<<<<<<<<<<<<<
 *         for i in range(num_leaves):
 *             obj.add_leaf[uint32_t](leaves[i])
 */
        __pyx_t_2 = 0;
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        __pyx_t_5 = 0;

        /* "cgal4py/delaunay/tools.pyx":707
 *     cdef uint64_t i
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         obj = ConsolidatedLeaves[uint64_t](ndim, idx_inf, max_ncells,             # <<<<<<<<<<<<<<
 *                                            &verts[0,0], &cells[0,0])
 *         for i in range(num_leaves):
 */
        try {
          __pyx_t_6 = ConsolidatedLeaves<uint64_t> (__pyx_v_ndim, __pyx_v_idx_inf, __pyx_v_max_ncells, (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_verts.rcbuffer->pybuffer.buf, __pyx_t_2, __pyx_pybuffernd_verts.diminfo[0].strides, __pyx_t_3, __pyx_pybuffernd_verts.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_cells.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_cells.diminfo[0].strides, __pyx_t_5, __pyx_pybuffernd_cells.diminfo[1].strides))));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 707, __pyx_L5_error)
        }
        __pyx_v_obj = __pyx_t_6;

        /* "cgal4py/delaunay/tools.pyx":709
 *         obj = ConsolidatedLeaves[uint64_t](ndim, idx_inf, max_ncells,
 *                                            &verts[0,0], &cells[0,0])
 *         for i in range(num_leaves):             # <<<<<<<<<<<<<<
 *             obj.add_leaf[uint32_t](leaves[i])
 *         obj.add_inf()
 */
        __pyx_t_7 = __pyx_v_num_leaves;
        __pyx_t_8 = __pyx_t_7;
        for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
          __pyx_v_i = __pyx_t_9;

          /* "cgal4py/delaunay/tools.pyx":710
 *                                            &verts[0,0], &cells[0,0])
 *         for i in range(num_leaves):
 *             obj.add_leaf[uint32_t](leaves[i])             # <<<<<<<<<<<<<<
 *         obj.add_inf()
 *         obj.cleanup()
 */
          __pyx_v_obj.add_leaf<uint32_t>((__pyx_v_leaves[__pyx_v_i]));
        }

        /* "cgal4py/delaunay/tools.pyx":711
 *         for i in range(num_leaves):
 *             obj.add_leaf[uint32_t](leaves[i])
 *         obj.add_inf()             # <<<<<<<<<<<<<<
 *         obj.cleanup()
 *     cdef np.int64_t ncells = obj.ncells
 */
        __pyx_v_obj.add_inf();

        /* "cgal4py/delaunay/tools.pyx":712
 *             obj.add_leaf[uint32_t](leaves[i])
 *         obj.add_inf()
 *         obj.cleanup()             # <<<<<<<<<<<<<<
 *     cdef np.int64_t ncells = obj.ncells
 *     return ncells
 */
        __pyx_v_obj.cleanup();
      }

      /* "cgal4py/delaunay/tools.pyx":706
 *     cdef ConsolidatedLeaves[uint64_t] obj
 *     cdef uint64_t i
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         obj = ConsolidatedLeaves[uint64_t](ndim, idx_inf, max_ncells,
 *                                            &verts[0,0], &cells[0,0])
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L5_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L6:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":713
 *         obj.add_inf()
 *         obj.cleanup()
 *     cdef np.int64_t ncells = obj.ncells             # <<<<<<<<<<<<<<
 *     return ncells
 * 
 */
  __pyx_t_10 = __pyx_v_obj.ncells;
  __pyx_v_ncells = __pyx_t_10;

  /* "cgal4py/delaunay/tools.pyx":714
 *         obj.cleanup()
 *     cdef np.int64_t ncells = obj.ncells
 *     return ncells             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __pyx_r = __pyx_v_ncells;
  goto __pyx_L0;

  /* "cgal4py/delaunay/tools.pyx":692
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef np.int64_t _consolidate_uint32_uint64(np.uint32_t ndim, np.uint64_t idx_inf,             # <<<<<<<<<<<<<<
 *                                            object serial,
 *                                            np.ndarray[np.uint64_t] leaf_start,
 */

  /* function exit code */
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_leaf_start.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_leaf_stop.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_WriteUnraisable("cgal4py.delaunay.tools._consolidate_uint32_uint64", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_leaf_start.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_leaf_stop.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":718
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef np.int64_t _consolidate_uint32_uint32(np.uint32_t ndim, np.uint32_t idx_inf,             # <<<<<<<<<<<<<<
 *                                            object serial,
 *                                            np.ndarray[np.uint64_t] leaf_start,
 */

static __pyx_t_5numpy_int64_t __pyx_f_7cgal4py_8delaunay_5tools__consolidate_uint32_uint32(__pyx_t_5numpy_uint32_t __pyx_v_ndim, __pyx_t_5numpy_uint32_t __pyx_v_idx_inf, PyObject *__pyx_v_serial, PyArrayObject *__pyx_v_leaf_start, PyArrayObject *__pyx_v_leaf_stop, PyArrayObject *__pyx_v_verts, PyArrayObject *__pyx_v_cells) {
  __pyx_t_7cgal4py_8delaunay_5tools_sLeaves32 __pyx_v_leaves;
  uint64_t __pyx_v_num_leaves;
  int64_t __pyx_v_max_ncells;
  ConsolidatedLeaves<uint32_t>  __pyx_v_obj;
  uint64_t __pyx_v_i;
  __pyx_t_5numpy_int64_t __pyx_v_ncells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cells;
  __Pyx_Buffer __pyx_pybuffer_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_leaf_start;
  __Pyx_Buffer __pyx_pybuffer_leaf_start;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_leaf_stop;
  __Pyx_Buffer __pyx_pybuffer_leaf_stop;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_verts;
  __Pyx_Buffer __pyx_pybuffer_verts;
  __pyx_t_5numpy_int64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  ConsolidatedLeaves<uint32_t>  __pyx_t_6;
  uint64_t __pyx_t_7;
  uint64_t __pyx_t_8;
  uint64_t __pyx_t_9;
  int64_t __pyx_t_10;
  __Pyx_RefNannySetupContext("_consolidate_uint32_uint32", 0);
  __pyx_pybuffer_leaf_start.pybuffer.buf = NULL;
  __pyx_pybuffer_leaf_start.refcount = 0;
  __pyx_pybuffernd_leaf_start.data = NULL;
  __pyx_pybuffernd_leaf_start.rcbuffer = &__pyx_pybuffer_leaf_start;
  __pyx_pybuffer_leaf_stop.pybuffer.buf = NULL;
  __pyx_pybuffer_leaf_stop.refcount = 0;
  __pyx_pybuffernd_leaf_stop.data = NULL;
  __pyx_pybuffernd_leaf_stop.rcbuffer = &__pyx_pybuffer_leaf_stop;
  __pyx_pybuffer_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_verts.refcount = 0;
  __pyx_pybuffernd_verts.data = NULL;
  __pyx_pybuffernd_verts.rcbuffer = &__pyx_pybuffer_verts;
  __pyx_pybuffer_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_cells.refcount = 0;
  __pyx_pybuffernd_cells.data = NULL;
  __pyx_pybuffernd_cells.rcbuffer = &__pyx_pybuffer_cells;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_leaf_start.rcbuffer->pybuffer, (PyObject*)__pyx_v_leaf_start, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 718, __pyx_L1_error)
  }
  __pyx_pybuffernd_leaf_start.diminfo[0].strides = __pyx_pybuffernd_leaf_start.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_leaf_start.diminfo[0].shape = __pyx_pybuffernd_leaf_start.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_leaf_stop.rcbuffer->pybuffer, (PyObject*)__pyx_v_leaf_stop, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 718, __pyx_L1_error)
  }
  __pyx_pybuffernd_leaf_stop.diminfo[0].strides = __pyx_pybuffernd_leaf_stop.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_leaf_stop.diminfo[0].shape = __pyx_pybuffernd_leaf_stop.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 718, __pyx_L1_error)
  }
  __pyx_pybuffernd_verts.diminfo[0].strides = __pyx_pybuffernd_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_verts.diminfo[0].shape = __pyx_pybuffernd_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_verts.diminfo[1].strides = __pyx_pybuffernd_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_verts.diminfo[1].shape = __pyx_pybuffernd_verts.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 718, __pyx_L1_error)
  }
  __pyx_pybuffernd_cells.diminfo[0].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cells.diminfo[0].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cells.diminfo[1].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cells.diminfo[1].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[1];

  /* "cgal4py/delaunay/tools.pyx":724
 *                                            np.ndarray[np.uint32_t, ndim=2] verts,
 *                                            np.ndarray[np.uint32_t, ndim=2] cells):
 *     cdef sLeaves32 leaves = _vectorize_leaves_uint32(ndim, serial, leaf_start, leaf_stop)             # <<<<<<<<<<<<<<
 *     cdef uint64_t num_leaves = <uint64_t>leaves.size()
 *     cdef int64_t max_ncells = <int64_t>verts.shape[0]
 */
  __pyx_v_leaves = __pyx_f_7cgal4py_8delaunay_5tools__vectorize_leaves_uint32(__pyx_v_ndim, __pyx_v_serial, ((PyArrayObject *)__pyx_v_leaf_start), ((PyArrayObject *)__pyx_v_leaf_stop));

  /* "cgal4py/delaunay/tools.pyx":725
 *                                            np.ndarray[np.uint32_t, ndim=2] cells):
 *     cdef sLeaves32 leaves = _vectorize_leaves_uint32(ndim, serial, leaf_start, leaf_stop)
 *     cdef uint64_t num_leaves = <uint64_t>leaves.size()             # <<<<<<<<<<<<<<
 *     cdef int64_t max_ncells = <int64_t>verts.shape[0]
 *     if max_ncells == 0:
 */
  __pyx_v_num_leaves = ((uint64_t)__pyx_v_leaves.size());

  /* "cgal4py/delaunay/tools.pyx":726
 *     cdef sLeaves32 leaves = _vectorize_leaves_uint32(ndim, serial, leaf_start, leaf_stop)
 *     cdef uint64_t num_leaves = <uint64_t>leaves.size()
 *     cdef int64_t max_ncells = <int64_t>verts.shape[0]             # <<<<<<<<<<<<<<
 *     if max_ncells == 0:
 *         return max_ncells
 */
  __pyx_v_max_ncells = ((int64_t)(__pyx_v_verts->dimensions[0]));

  /* "cgal4py/delaunay/tools.pyx":727
 *     cdef uint64_t num_leaves = <uint64_t>leaves.size()
 *     cdef int64_t max_ncells = <int64_t>verts.shape[0]
 *     if max_ncells == 0:             # <<<<<<<<<<<<<<
 *         return max_ncells
 *     assert(cells.shape[0] == max_ncells)
 */
  __pyx_t_1 = ((__pyx_v_max_ncells == 0) != 0);
  if (__pyx_t_1) {

    /* "cgal4py/delaunay/tools.pyx":728
 *     cdef int64_t max_ncells = <int64_t>verts.shape[0]
 *     if max_ncells == 0:
 *         return max_ncells             # <<<<<<<<<<<<<<
 *     assert(cells.shape[0] == max_ncells)
 *     cdef ConsolidatedLeaves[uint32_t] obj
 */
    __pyx_r = __pyx_v_max_ncells;
    goto __pyx_L0;

    /* "cgal4py/delaunay/tools.pyx":727
 *     cdef uint64_t num_leaves = <uint64_t>leaves.size()
 *     cdef int64_t max_ncells = <int64_t>verts.shape[0]
 *     if max_ncells == 0:             # <<<<<<<<<<<<<<
 *         return max_ncells
 *     assert(cells.shape[0] == max_ncells)
 */
  }

  /* "cgal4py/delaunay/tools.pyx":729
 *     if max_ncells == 0:
 *         return max_ncells
 *     assert(cells.shape[0] == max_ncells)             # <<<<<<<<<<<<<<
 *     cdef ConsolidatedLeaves[uint32_t] obj
 *     cdef uint64_t i
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_cells->dimensions[0]) == __pyx_v_max_ncells) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 729, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":732
 *     cdef ConsolidatedLeaves[uint32_t] obj
 *     cdef uint64_t i
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         obj = ConsolidatedLeaves[uint32_t](ndim, idx_inf, max_ncells,
 *                                            &verts[0,0], &cells[0,0])
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":734
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         obj = ConsolidatedLeaves[uint32_t](ndim, idx_inf, max_ncells,
 *                                            &verts[0,0], &cells[0,0])             # <<<<<<<<<<<<<<
 *         for i in range(num_leaves):
 *             obj.add_leaf[uint32_t](leaves[i])
 */
        __pyx_t_2 = 0;
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        __pyx_t_5 = 0;

        /* "cgal4py/delaunay/tools.pyx":733
 *     cdef uint64_t i
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         obj = ConsolidatedLeaves[uint32_t](ndim, idx_inf, max_ncells,             # <<<<<<<<<<<<<<
 *                                            &verts[0,0], &cells[0,0])
 *         for i in range(num_leaves):
 */
        try {
          __pyx_t_6 = ConsolidatedLeaves<uint32_t> (__pyx_v_ndim, __pyx_v_idx_inf, __pyx_v_max_ncells, (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_verts.rcbuffer->pybuffer.buf, __pyx_t_2, __pyx_pybuffernd_verts.diminfo[0].strides, __pyx_t_3, __pyx_pybuffernd_verts.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_cells.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_cells.diminfo[0].strides, __pyx_t_5, __pyx_pybuffernd_cells.diminfo[1].strides))));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 733, __pyx_L5_error)
        }
        __pyx_v_obj = __pyx_t_6;

        /* "cgal4py/delaunay/tools.pyx":735
 *         obj = ConsolidatedLeaves[uint32_t](ndim, idx_inf, max_ncells,
 *                                            &verts[0,0], &cells[0,0])
 *         for i in range(num_leaves):             # <<<<<<<<<<<<<<
 *             obj.add_leaf[uint32_t](leaves[i])
 *         obj.add_inf()
 */
        __pyx_t_7 = __pyx_v_num_leaves;
        __pyx_t_8 = __pyx_t_7;
        for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
          __pyx_v_i = __pyx_t_9;

          /* "cgal4py/delaunay/tools.pyx":736
 *                                            &verts[0,0], &cells[0,0])
 *         for i in range(num_leaves):
 *             obj.add_leaf[uint32_t](leaves[i])             # <<<<<<<<<<<<<<
 *         obj.add_inf()
 *         obj.cleanup()
 */
          __pyx_v_obj.add_leaf<uint32_t>((__pyx_v_leaves[__pyx_v_i]));
        }

        /* "cgal4py/delaunay/tools.pyx":737
 *         for i in range(num_leaves):
 *             obj.add_leaf[uint32_t](leaves[i])
 *         obj.add_inf()             # <<<<<<<<<<<<<<
 *         obj.cleanup()
 *     cdef np.int64_t ncells = obj.ncells
 */
        __pyx_v_obj.add_inf();

        /* "cgal4py/delaunay/tools.pyx":738
 *             obj.add_leaf[uint32_t](leaves[i])
 *         obj.add_inf()
 *         obj.cleanup()             # <<<<<<<<<<<<<<
 *     cdef np.int64_t ncells = obj.ncells
 *     return ncells
 */
        __pyx_v_obj.cleanup();
      }

      /* "cgal4py/delaunay/tools.pyx":732
 *     cdef ConsolidatedLeaves[uint32_t] obj
 *     cdef uint64_t i
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         obj = ConsolidatedLeaves[uint32_t](ndim, idx_inf, max_ncells,
 *                                            &verts[0,0], &cells[0,0])
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L5_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L6:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":739
 *         obj.add_inf()
 *         obj.cleanup()
 *     cdef np.int64_t ncells = obj.ncells             # <<<<<<<<<<<<<<
 *     return ncells
 * 
 */
  __pyx_t_10 = __pyx_v_obj.ncells;
  __pyx_v_ncells = __pyx_t_10;

  /* "cgal4py/delaunay/tools.pyx":740
 *         obj.cleanup()
 *     cdef np.int64_t ncells = obj.ncells
 *     return ncells             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __pyx_r = __pyx_v_ncells;
  goto __pyx_L0;

  /* "cgal4py/delaunay/tools.pyx":718
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef np.int64_t _consolidate_uint32_uint32(np.uint32_t ndim, np.uint32_t idx_inf,             # <<<<<<<<<<<<<<
 *                                            object serial,
 *                                            np.ndarray[np.uint64_t] leaf_start,
 */

  /* function exit code */
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_leaf_start.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_leaf_stop.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_WriteUnraisable("cgal4py.delaunay.tools._consolidate_uint32_uint32", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_leaf_start.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_leaf_stop.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":744
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef np.int64_t _consolidate_uint64_uint64(np.uint32_t ndim, np.uint64_t idx_inf,             # <<<<<<<<<<<<<<
 *                                            object serial,
 *                                            np.ndarray[np.uint64_t] leaf_start,
 */

static __pyx_t_5numpy_int64_t __pyx_f_7cgal4py_8delaunay_5tools__consolidate_uint64_uint64(__pyx_t_5numpy_uint32_t __pyx_v_ndim, __pyx_t_5numpy_uint64_t __pyx_v_idx_inf, PyObject *__pyx_v_serial, PyArrayObject *__pyx_v_leaf_start, PyArrayObject *__pyx_v_leaf_stop, PyArrayObject *__pyx_v_verts, PyArrayObject *__pyx_v_cells) {
  __pyx_t_7cgal4py_8delaunay_5tools_sLeaves64 __pyx_v_leaves;
  uint64_t __pyx_v_num_leaves;
  int64_t __pyx_v_max_ncells;
  ConsolidatedLeaves<uint64_t>  __pyx_v_obj;
  uint64_t __pyx_v_i;
  __pyx_t_5numpy_int64_t __pyx_v_ncells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cells;
  __Pyx_Buffer __pyx_pybuffer_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_leaf_start;
  __Pyx_Buffer __pyx_pybuffer_leaf_start;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_leaf_stop;
  __Pyx_Buffer __pyx_pybuffer_leaf_stop;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_verts;
  __Pyx_Buffer __pyx_pybuffer_verts;
  __pyx_t_5numpy_int64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  ConsolidatedLeaves<uint64_t>  __pyx_t_6;
  uint64_t __pyx_t_7;
  uint64_t __pyx_t_8;
  uint64_t __pyx_t_9;
  int64_t __pyx_t_10;
  __Pyx_RefNannySetupContext("_consolidate_uint64_uint64", 0);
  __pyx_pybuffer_leaf_start.pybuffer.buf = NULL;
  __pyx_pybuffer_leaf_start.refcount = 0;
  __pyx_pybuffernd_leaf_start.data = NULL;
  __pyx_pybuffernd_leaf_start.rcbuffer = &__pyx_pybuffer_leaf_start;
  __pyx_pybuffer_leaf_stop.pybuffer.buf = NULL;
  __pyx_pybuffer_leaf_stop.refcount = 0;
  __pyx_pybuffernd_leaf_stop.data = NULL;
  __pyx_pybuffernd_leaf_stop.rcbuffer = &__pyx_pybuffer_leaf_stop;
  __pyx_pybuffer_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_verts.refcount = 0;
  __pyx_pybuffernd_verts.data = NULL;
  __pyx_pybuffernd_verts.rcbuffer = &__pyx_pybuffer_verts;
  __pyx_pybuffer_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_cells.refcount = 0;
  __pyx_pybuffernd_cells.data = NULL;
  __pyx_pybuffernd_cells.rcbuffer = &__pyx_pybuffer_cells;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_leaf_start.rcbuffer->pybuffer, (PyObject*)__pyx_v_leaf_start, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 744, __pyx_L1_error)
  }
  __pyx_pybuffernd_leaf_start.diminfo[0].strides = __pyx_pybuffernd_leaf_start.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_leaf_start.diminfo[0].shape = __pyx_pybuffernd_leaf_start.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_leaf_stop.rcbuffer->pybuffer, (PyObject*)__pyx_v_leaf_stop, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 744, __pyx_L1_error)
  }
  __pyx_pybuffernd_leaf_stop.diminfo[0].strides = __pyx_pybuffernd_leaf_stop.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_leaf_stop.diminfo[0].shape = __pyx_pybuffernd_leaf_stop.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 744, __pyx_L1_error)
  }
  __pyx_pybuffernd_verts.diminfo[0].strides = __pyx_pybuffernd_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_verts.diminfo[0].shape = __pyx_pybuffernd_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_verts.diminfo[1].strides = __pyx_pybuffernd_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_verts.diminfo[1].shape = __pyx_pybuffernd_verts.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 744, __pyx_L1_error)
  }
  __pyx_pybuffernd_cells.diminfo[0].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cells.diminfo[0].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_cells.diminfo[1].strides = __pyx_pybuffernd_cells.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_cells.diminfo[1].shape = __pyx_pybuffernd_cells.rcbuffer->pybuffer.shape[1];

  /* "cgal4py/delaunay/tools.pyx":750
 *                                            np.ndarray[np.uint64_t, ndim=2] verts,
 *                                            np.ndarray[np.uint64_t, ndim=2] cells):
 *     cdef sLeaves64 leaves = _vectorize_leaves_uint64(ndim, serial, leaf_start, leaf_stop)             # <<<<<<<<<<<<<<
 *     cdef uint64_t num_leaves = <uint64_t>leaves.size()
 *     cdef int64_t max_ncells = <int64_t>verts.shape[0]
 */
  __pyx_v_leaves = __pyx_f_7cgal4py_8delaunay_5tools__vectorize_leaves_uint64(__pyx_v_ndim, __pyx_v_serial, ((PyArrayObject *)__pyx_v_leaf_start), ((PyArrayObject *)__pyx_v_leaf_stop));

  /* "cgal4py/delaunay/tools.pyx":751
 *                                            np.ndarray[np.uint64_t, ndim=2] cells):
 *     cdef sLeaves64 leaves = _vectorize_leaves_uint64(ndim, serial, leaf_start, leaf_stop)
 *     cdef uint64_t num_leaves = <uint64_t>leaves.size()             # <<<<<<<<<<<<<<
 *     cdef int64_t max_ncells = <int64_t>verts.shape[0]
 *     if max_ncells == 0:
 */
  __pyx_v_num_leaves = ((uint64_t)__pyx_v_leaves.size());

  /* "cgal4py/delaunay/tools.pyx":752
 *     cdef sLeaves64 leaves = _vectorize_leaves_uint64(ndim, serial, leaf_start, leaf_stop)
 *     cdef uint64_t num_leaves = <uint64_t>leaves.size()
 *     cdef int64_t max_ncells = <int64_t>verts.shape[0]             # <<<<<<<<<<<<<<
 *     if max_ncells == 0:
 *         return max_ncells
 */
  __pyx_v_max_ncells = ((int64_t)(__pyx_v_verts->dimensions[0]));

  /* "cgal4py/delaunay/tools.pyx":753
 *     cdef uint64_t num_leaves = <uint64_t>leaves.size()
 *     cdef int64_t max_ncells = <int64_t>verts.shape[0]
 *     if max_ncells == 0:             # <<<<<<<<<<<<<<
 *         return max_ncells
 *     assert(cells.shape[0] == max_ncells)
 */
  __pyx_t_1 = ((__pyx_v_max_ncells == 0) != 0);
  if (__pyx_t_1) {

    /* "cgal4py/delaunay/tools.pyx":754
 *     cdef int64_t max_ncells = <int64_t>verts.shape[0]
 *     if max_ncells == 0:
 *         return max_ncells             # <<<<<<<<<<<<<<
 *     assert(cells.shape[0] == max_ncells)
 *     cdef ConsolidatedLeaves[uint64_t] obj
 */
    __pyx_r = __pyx_v_max_ncells;
    goto __pyx_L0;

    /* "cgal4py/delaunay/tools.pyx":753
 *     cdef uint64_t num_leaves = <uint64_t>leaves.size()
 *     cdef int64_t max_ncells = <int64_t>verts.shape[0]
 *     if max_ncells == 0:             # <<<<<<<<<<<<<<
 *         return max_ncells
 *     assert(cells.shape[0] == max_ncells)
 */
  }

  /* "cgal4py/delaunay/tools.pyx":755
 *     if max_ncells == 0:
 *         return max_ncells
 *     assert(cells.shape[0] == max_ncells)             # <<<<<<<<<<<<<<
 *     cdef ConsolidatedLeaves[uint64_t] obj
 *     cdef uint64_t i
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_cells->dimensions[0]) == __pyx_v_max_ncells) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 755, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":758
 *     cdef ConsolidatedLeaves[uint64_t] obj
 *     cdef uint64_t i
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         obj = ConsolidatedLeaves[uint64_t](ndim, idx_inf, max_ncells,
 *                                            &verts[0,0], &cells[0,0])
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":760
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         obj = ConsolidatedLeaves[uint64_t](ndim, idx_inf, max_ncells,
 *                                            &verts[0,0], &cells[0,0])             # <<<<<<<<<<<<<<
 *         for i in range(num_leaves):
 *             obj.add_leaf[uint64_t](leaves[i])
 */
        __pyx_t_2 = 0;
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        __pyx_t_5 = 0;

        /* "cgal4py/delaunay/tools.pyx":759
 *     cdef uint64_t i
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         obj = ConsolidatedLeaves[uint64_t](ndim, idx_inf, max_ncells,             # <<<<<<<<<<<<<<
 *                                            &verts[0,0], &cells[0,0])
 *         for i in range(num_leaves):
 */
        try {
          __pyx_t_6 = ConsolidatedLeaves<uint64_t> (__pyx_v_ndim, __pyx_v_idx_inf, __pyx_v_max_ncells, (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_verts.rcbuffer->pybuffer.buf, __pyx_t_2, __pyx_pybuffernd_verts.diminfo[0].strides, __pyx_t_3, __pyx_pybuffernd_verts.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_cells.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_cells.diminfo[0].strides, __pyx_t_5, __pyx_pybuffernd_cells.diminfo[1].strides))));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 759, __pyx_L5_error)
        }
        __pyx_v_obj = __pyx_t_6;

        /* "cgal4py/delaunay/tools.pyx":761
 *         obj = ConsolidatedLeaves[uint64_t](ndim, idx_inf, max_ncells,
 *                                            &verts[0,0], &cells[0,0])
 *         for i in range(num_leaves):             # <<<<<<<<<<<<<<
 *             obj.add_leaf[uint64_t](leaves[i])
 *         obj.add_inf()
 */
        __pyx_t_7 = __pyx_v_num_leaves;
        __pyx_t_8 = __pyx_t_7;
        for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
          __pyx_v_i = __pyx_t_9;

          /* "cgal4py/delaunay/tools.pyx":762
 *                                            &verts[0,0], &cells[0,0])
 *         for i in range(num_leaves):
 *             obj.add_leaf[uint64_t](leaves[i])             # <<<<<<<<<<<<<<
 *         obj.add_inf()
 *         obj.cleanup()
 */
          __pyx_v_obj.add_leaf<uint64_t>((__pyx_v_leaves[__pyx_v_i]));
        }

        /* "cgal4py/delaunay/tools.pyx":763
 *         for i in range(num_leaves):
 *             obj.add_leaf[uint64_t](leaves[i])
 *         obj.add_inf()             # <<<<<<<<<<<<<<
 *         obj.cleanup()
 *     cdef np.int64_t ncells = obj.ncells
 */
        __pyx_v_obj.add_inf();

        /* "cgal4py/delaunay/tools.pyx":764
 *             obj.add_leaf[uint64_t](leaves[i])
 *         obj.add_inf()
 *         obj.cleanup()             # <<<<<<<<<<<<<<
 *     cdef np.int64_t ncells = obj.ncells
 *     return ncells
 */
        __pyx_v_obj.cleanup();
      }

      /* "cgal4py/delaunay/tools.pyx":758
 *     cdef ConsolidatedLeaves[uint64_t] obj
 *     cdef uint64_t i
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         obj = ConsolidatedLeaves[uint64_t](ndim, idx_inf, max_ncells,
 *                                            &verts[0,0], &cells[0,0])
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L5_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L6:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":765
 *         obj.add_inf()
 *         obj.cleanup()
 *     cdef np.int64_t ncells = obj.ncells             # <<<<<<<<<<<<<<
 *     return ncells
 * 
 */
  __pyx_t_10 = __pyx_v_obj.ncells;
  __pyx_v_ncells = __pyx_t_10;

  /* "cgal4py/delaunay/tools.pyx":766
 *         obj.cleanup()
 *     cdef np.int64_t ncells = obj.ncells
 *     return ncells             # <<<<<<<<<<<<<<
 * 
 * def consolidate_leaves(ndim, idx_inf, serial, leaf_start, leaf_stop):
 */
  __pyx_r = __pyx_v_ncells;
  goto __pyx_L0;

  /* "cgal4py/delaunay/tools.pyx":744
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef np.int64_t _consolidate_uint64_uint64(np.uint32_t ndim, np.uint64_t idx_inf,             # <<<<<<<<<<<<<<
 *                                            object serial,
 *                                            np.ndarray[np.uint64_t] leaf_start,
 */

  /* function exit code */
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_leaf_start.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_leaf_stop.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_WriteUnraisable("cgal4py.delaunay.tools._consolidate_uint64_uint64", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_leaf_start.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_leaf_stop.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":768
 *     return ncells
 * 
 * def consolidate_leaves(ndim, idx_inf, serial, leaf_start, leaf_stop):             # <<<<<<<<<<<<<<
 *     dtype_comb = type(idx_inf)
 *     dtype_leaf = serial[0][0].dtype
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_45consolidate_leaves(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7cgal4py_8delaunay_5tools_45consolidate_leaves = {"consolidate_leaves", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_45consolidate_leaves, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_45consolidate_leaves(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ndim = 0;
  PyObject *__pyx_v_idx_inf = 0;
  PyObject *__pyx_v_serial = 0;
  PyObject *__pyx_v_leaf_start = 0;
  PyObject *__pyx_v_leaf_stop = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("consolidate_leaves (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ndim,&__pyx_n_s_idx_inf,&__pyx_n_s_serial,&__pyx_n_s_leaf_start,&__pyx_n_s_leaf_stop,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ndim)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx_inf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("consolidate_leaves", 1, 5, 5, 1); __PYX_ERR(0, 768, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_serial)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("consolidate_leaves", 1, 5, 5, 2); __PYX_ERR(0, 768, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_leaf_start)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("consolidate_leaves", 1, 5, 5, 3); __PYX_ERR(0, 768, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_leaf_stop)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("consolidate_leaves", 1, 5, 5, 4); __PYX_ERR(0, 768, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "consolidate_leaves") < 0)) __PYX_ERR(0, 768, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_ndim = values[0];
    __pyx_v_idx_inf = values[1];
    __pyx_v_serial = values[2];
    __pyx_v_leaf_start = values[3];
    __pyx_v_leaf_stop = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("consolidate_leaves", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 768, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.consolidate_leaves", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_44consolidate_leaves(__pyx_self, __pyx_v_ndim, __pyx_v_idx_inf, __pyx_v_serial, __pyx_v_leaf_start, __pyx_v_leaf_stop);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_44consolidate_leaves(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ndim, PyObject *__pyx_v_idx_inf, PyObject *__pyx_v_serial, PyObject *__pyx_v_leaf_start, PyObject *__pyx_v_leaf_stop) {
  PyTypeObject *__pyx_v_dtype_comb = NULL;
  PyObject *__pyx_v_dtype_leaf = NULL;
  PyObject *__pyx_v_ncells = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_t0 = NULL;
  PyObject *__pyx_v_verts = NULL;
  PyObject *__pyx_v_neigh = NULL;
  PyObject *__pyx_v_t1 = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  __pyx_t_5numpy_uint32_t __pyx_t_11;
  __pyx_t_5numpy_uint32_t __pyx_t_12;
  __pyx_t_5numpy_uint64_t __pyx_t_13;
  __Pyx_RefNannySetupContext("consolidate_leaves", 0);

  /* "cgal4py/delaunay/tools.pyx":769
 * 
 * def consolidate_leaves(ndim, idx_inf, serial, leaf_start, leaf_stop):
 *     dtype_comb = type(idx_inf)             # <<<<<<<<<<<<<<
 *     dtype_leaf = serial[0][0].dtype
 *     ncells = 0
 */
  __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_idx_inf)));
  __pyx_v_dtype_comb = ((PyTypeObject*)((PyObject *)Py_TYPE(__pyx_v_idx_inf)));

  /* "cgal4py/delaunay/tools.pyx":770
 * def consolidate_leaves(ndim, idx_inf, serial, leaf_start, leaf_stop):
 *     dtype_comb = type(idx_inf)
 *     dtype_leaf = serial[0][0].dtype             # <<<<<<<<<<<<<<
 *     ncells = 0
 *     for s in serial:
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_serial, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_dtype_leaf = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":771
 *     dtype_comb = type(idx_inf)
 *     dtype_leaf = serial[0][0].dtype
 *     ncells = 0             # <<<<<<<<<<<<<<
 *     for s in serial:
 *         ncells += np.int64(s[5])
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_ncells = __pyx_int_0;

  /* "cgal4py/delaunay/tools.pyx":772
 *     dtype_leaf = serial[0][0].dtype
 *     ncells = 0
 *     for s in serial:             # <<<<<<<<<<<<<<
 *         ncells += np.int64(s[5])
 *     # Allocate
 */
  if (likely(PyList_CheckExact(__pyx_v_serial)) || PyTuple_CheckExact(__pyx_v_serial)) {
    __pyx_t_1 = __pyx_v_serial; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_serial); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 772, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 772, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 772, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 772, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 772, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 772, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "cgal4py/delaunay/tools.pyx":773
 *     ncells = 0
 *     for s in serial:
 *         ncells += np.int64(s[5])             # <<<<<<<<<<<<<<
 *     # Allocate
 *     t0 = time.time()
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_int64); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_s, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 773, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_5};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 773, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_5};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 773, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 773, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 773, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_InPlaceAdd(__pyx_v_ncells, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_ncells, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "cgal4py/delaunay/tools.pyx":772
 *     dtype_leaf = serial[0][0].dtype
 *     ncells = 0
 *     for s in serial:             # <<<<<<<<<<<<<<
 *         ncells += np.int64(s[5])
 *     # Allocate
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":775
 *         ncells += np.int64(s[5])
 *     # Allocate
 *     t0 = time.time()             # <<<<<<<<<<<<<<
 *     verts = np.empty((ncells, ndim+1), dtype_comb)
 *     neigh = np.empty((ncells, ndim+1), dtype_comb)
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 775, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 775, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_t0 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":776
 *     # Allocate
 *     t0 = time.time()
 *     verts = np.empty((ncells, ndim+1), dtype_comb)             # <<<<<<<<<<<<<<
 *     neigh = np.empty((ncells, ndim+1), dtype_comb)
 *     verts.fill(idx_inf)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_ndim, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_v_ncells);
  __Pyx_GIVEREF(__pyx_v_ncells);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_ncells);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_8, ((PyObject *)__pyx_v_dtype_comb)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_8, ((PyObject *)__pyx_v_dtype_comb)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_9, __pyx_t_8);
    __Pyx_INCREF(((PyObject *)__pyx_v_dtype_comb));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_dtype_comb));
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_9, ((PyObject *)__pyx_v_dtype_comb));
    __pyx_t_8 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_verts = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":777
 *     t0 = time.time()
 *     verts = np.empty((ncells, ndim+1), dtype_comb)
 *     neigh = np.empty((ncells, ndim+1), dtype_comb)             # <<<<<<<<<<<<<<
 *     verts.fill(idx_inf)
 *     neigh.fill(idx_inf)
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_v_ndim, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_v_ncells);
  __Pyx_GIVEREF(__pyx_v_ncells);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_ncells);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_8, ((PyObject *)__pyx_v_dtype_comb)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 777, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_8, ((PyObject *)__pyx_v_dtype_comb)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 777, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_2 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 777, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_9, __pyx_t_8);
    __Pyx_INCREF(((PyObject *)__pyx_v_dtype_comb));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_dtype_comb));
    PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_9, ((PyObject *)__pyx_v_dtype_comb));
    __pyx_t_8 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 777, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_neigh = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":778
 *     verts = np.empty((ncells, ndim+1), dtype_comb)
 *     neigh = np.empty((ncells, ndim+1), dtype_comb)
 *     verts.fill(idx_inf)             # <<<<<<<<<<<<<<
 *     neigh.fill(idx_inf)
 *     t1 = time.time()
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_verts, __pyx_n_s_fill); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_idx_inf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_idx_inf};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 778, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_idx_inf};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 778, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 778, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_INCREF(__pyx_v_idx_inf);
      __Pyx_GIVEREF(__pyx_v_idx_inf);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_idx_inf);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 778, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":779
 *     neigh = np.empty((ncells, ndim+1), dtype_comb)
 *     verts.fill(idx_inf)
 *     neigh.fill(idx_inf)             # <<<<<<<<<<<<<<
 *     t1 = time.time()
 *     print("Allocation took {} s".format(t1-t0))
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_neigh, __pyx_n_s_fill); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_idx_inf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_idx_inf};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 779, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_idx_inf};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 779, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 779, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_8); __pyx_t_8 = NULL;
      __Pyx_INCREF(__pyx_v_idx_inf);
      __Pyx_GIVEREF(__pyx_v_idx_inf);
      PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_idx_inf);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 779, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":780
 *     verts.fill(idx_inf)
 *     neigh.fill(idx_inf)
 *     t1 = time.time()             # <<<<<<<<<<<<<<
 *     print("Allocation took {} s".format(t1-t0))
 *     # Consolidate
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 780, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 780, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_t1 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":781
 *     neigh.fill(idx_inf)
 *     t1 = time.time()
 *     print("Allocation took {} s".format(t1-t0))             # <<<<<<<<<<<<<<
 *     # Consolidate
 *     t0 = time.time()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Allocation_took_s, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyNumber_Subtract(__pyx_v_t1, __pyx_v_t0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 781, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 781, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 781, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 781, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8); __pyx_t_8 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 781, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":783
 *     print("Allocation took {} s".format(t1-t0))
 *     # Consolidate
 *     t0 = time.time()             # <<<<<<<<<<<<<<
 *     if dtype_comb == np.uint32:
 *         if dtype_leaf == np.uint32:
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 783, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 783, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF_SET(__pyx_v_t0, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":784
 *     # Consolidate
 *     t0 = time.time()
 *     if dtype_comb == np.uint32:             # <<<<<<<<<<<<<<
 *         if dtype_leaf == np.uint32:
 *             ncells = _consolidate_uint32_uint32(ndim, idx_inf, serial,
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_uint32); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_dtype_comb), __pyx_t_6, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 784, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 784, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_10) {

    /* "cgal4py/delaunay/tools.pyx":785
 *     t0 = time.time()
 *     if dtype_comb == np.uint32:
 *         if dtype_leaf == np.uint32:             # <<<<<<<<<<<<<<
 *             ncells = _consolidate_uint32_uint32(ndim, idx_inf, serial,
 *                                                 leaf_start, leaf_stop,
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_uint32); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_dtype_leaf, __pyx_t_6, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (likely(__pyx_t_10)) {

      /* "cgal4py/delaunay/tools.pyx":786
 *     if dtype_comb == np.uint32:
 *         if dtype_leaf == np.uint32:
 *             ncells = _consolidate_uint32_uint32(ndim, idx_inf, serial,             # <<<<<<<<<<<<<<
 *                                                 leaf_start, leaf_stop,
 *                                                 verts, neigh)
 */
      __pyx_t_11 = __Pyx_PyInt_As_npy_uint32(__pyx_v_ndim); if (unlikely((__pyx_t_11 == ((npy_uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 786, __pyx_L1_error)
      __pyx_t_12 = __Pyx_PyInt_As_npy_uint32(__pyx_v_idx_inf); if (unlikely((__pyx_t_12 == ((npy_uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 786, __pyx_L1_error)

      /* "cgal4py/delaunay/tools.pyx":787
 *         if dtype_leaf == np.uint32:
 *             ncells = _consolidate_uint32_uint32(ndim, idx_inf, serial,
 *                                                 leaf_start, leaf_stop,             # <<<<<<<<<<<<<<
 *                                                 verts, neigh)
 *         # This case makes no sense so it is not currently supported
 */
      if (!(likely(((__pyx_v_leaf_start) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_leaf_start, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 787, __pyx_L1_error)
      if (!(likely(((__pyx_v_leaf_stop) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_leaf_stop, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 787, __pyx_L1_error)

      /* "cgal4py/delaunay/tools.pyx":788
 *             ncells = _consolidate_uint32_uint32(ndim, idx_inf, serial,
 *                                                 leaf_start, leaf_stop,
 *                                                 verts, neigh)             # <<<<<<<<<<<<<<
 *         # This case makes no sense so it is not currently supported
 *         # elif dtype_leaf == np.uint64:
 */
      if (!(likely(((__pyx_v_verts) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_verts, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 788, __pyx_L1_error)
      if (!(likely(((__pyx_v_neigh) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_neigh, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 788, __pyx_L1_error)

      /* "cgal4py/delaunay/tools.pyx":786
 *     if dtype_comb == np.uint32:
 *         if dtype_leaf == np.uint32:
 *             ncells = _consolidate_uint32_uint32(ndim, idx_inf, serial,             # <<<<<<<<<<<<<<
 *                                                 leaf_start, leaf_stop,
 *                                                 verts, neigh)
 */
      __pyx_t_1 = __Pyx_PyInt_From_npy_int64(__pyx_f_7cgal4py_8delaunay_5tools__consolidate_uint32_uint32(__pyx_t_11, __pyx_t_12, __pyx_v_serial, ((PyArrayObject *)__pyx_v_leaf_start), ((PyArrayObject *)__pyx_v_leaf_stop), ((PyArrayObject *)__pyx_v_verts), ((PyArrayObject *)__pyx_v_neigh))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 786, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_ncells, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "cgal4py/delaunay/tools.pyx":785
 *     t0 = time.time()
 *     if dtype_comb == np.uint32:
 *         if dtype_leaf == np.uint32:             # <<<<<<<<<<<<<<
 *             ncells = _consolidate_uint32_uint32(ndim, idx_inf, serial,
 *                                                 leaf_start, leaf_stop,
 */
      goto __pyx_L6;
    }

    /* "cgal4py/delaunay/tools.pyx":795
 *         #                                         verts, neigh)
 *         else:
 *             raise TypeError("Leaf type {} not supported.".format(dtype_leaf))             # <<<<<<<<<<<<<<
 *     elif dtype_comb == np.uint64:
 *         if dtype_leaf == np.uint32:
 */
    /*else*/ {
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Leaf_type_not_supported, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 795, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      if (!__pyx_t_2) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_dtype_leaf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 795, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_dtype_leaf};
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 795, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_GOTREF(__pyx_t_1);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_dtype_leaf};
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 795, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_GOTREF(__pyx_t_1);
        } else
        #endif
        {
          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 795, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
          __Pyx_INCREF(__pyx_v_dtype_leaf);
          __Pyx_GIVEREF(__pyx_v_dtype_leaf);
          PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_dtype_leaf);
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 795, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 795, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(0, 795, __pyx_L1_error)
    }
    __pyx_L6:;

    /* "cgal4py/delaunay/tools.pyx":784
 *     # Consolidate
 *     t0 = time.time()
 *     if dtype_comb == np.uint32:             # <<<<<<<<<<<<<<
 *         if dtype_leaf == np.uint32:
 *             ncells = _consolidate_uint32_uint32(ndim, idx_inf, serial,
 */
    goto __pyx_L5;
  }

  /* "cgal4py/delaunay/tools.pyx":796
 *         else:
 *             raise TypeError("Leaf type {} not supported.".format(dtype_leaf))
 *     elif dtype_comb == np.uint64:             # <<<<<<<<<<<<<<
 *         if dtype_leaf == np.uint32:
 *             ncells = _consolidate_uint32_uint64(ndim, idx_inf, serial,
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_uint64); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyObject_RichCompare(((PyObject *)__pyx_v_dtype_comb), __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (likely(__pyx_t_10)) {

    /* "cgal4py/delaunay/tools.pyx":797
 *             raise TypeError("Leaf type {} not supported.".format(dtype_leaf))
 *     elif dtype_comb == np.uint64:
 *         if dtype_leaf == np.uint32:             # <<<<<<<<<<<<<<
 *             ncells = _consolidate_uint32_uint64(ndim, idx_inf, serial,
 *                                                 leaf_start, leaf_stop,
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 797, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_uint32); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 797, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_RichCompare(__pyx_v_dtype_leaf, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 797, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 797, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_10) {

      /* "cgal4py/delaunay/tools.pyx":798
 *     elif dtype_comb == np.uint64:
 *         if dtype_leaf == np.uint32:
 *             ncells = _consolidate_uint32_uint64(ndim, idx_inf, serial,             # <<<<<<<<<<<<<<
 *                                                 leaf_start, leaf_stop,
 *                                                 verts, neigh)
 */
      __pyx_t_12 = __Pyx_PyInt_As_npy_uint32(__pyx_v_ndim); if (unlikely((__pyx_t_12 == ((npy_uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 798, __pyx_L1_error)
      __pyx_t_13 = __Pyx_PyInt_As_npy_uint64(__pyx_v_idx_inf); if (unlikely((__pyx_t_13 == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 798, __pyx_L1_error)

      /* "cgal4py/delaunay/tools.pyx":799
 *         if dtype_leaf == np.uint32:
 *             ncells = _consolidate_uint32_uint64(ndim, idx_inf, serial,
 *                                                 leaf_start, leaf_stop,             # <<<<<<<<<<<<<<
 *                                                 verts, neigh)
 *         elif dtype_leaf == np.uint64:
 */
      if (!(likely(((__pyx_v_leaf_start) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_leaf_start, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 799, __pyx_L1_error)
      if (!(likely(((__pyx_v_leaf_stop) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_leaf_stop, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 799, __pyx_L1_error)

      /* "cgal4py/delaunay/tools.pyx":800
 *             ncells = _consolidate_uint32_uint64(ndim, idx_inf, serial,
 *                                                 leaf_start, leaf_stop,
 *                                                 verts, neigh)             # <<<<<<<<<<<<<<
 *         elif dtype_leaf == np.uint64:
 *             ncells = _consolidate_uint64_uint64(ndim, idx_inf, serial,
 */
      if (!(likely(((__pyx_v_verts) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_verts, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 800, __pyx_L1_error)
      if (!(likely(((__pyx_v_neigh) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_neigh, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 800, __pyx_L1_error)

      /* "cgal4py/delaunay/tools.pyx":798
 *     elif dtype_comb == np.uint64:
 *         if dtype_leaf == np.uint32:
 *             ncells = _consolidate_uint32_uint64(ndim, idx_inf, serial,             # <<<<<<<<<<<<<<
 *                                                 leaf_start, leaf_stop,
 *                                                 verts, neigh)
 */
      __pyx_t_6 = __Pyx_PyInt_From_npy_int64(__pyx_f_7cgal4py_8delaunay_5tools__consolidate_uint32_uint64(__pyx_t_12, __pyx_t_13, __pyx_v_serial, ((PyArrayObject *)__pyx_v_leaf_start), ((PyArrayObject *)__pyx_v_leaf_stop), ((PyArrayObject *)__pyx_v_verts), ((PyArrayObject *)__pyx_v_neigh))); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 798, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_ncells, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "cgal4py/delaunay/tools.pyx":797
 *             raise TypeError("Leaf type {} not supported.".format(dtype_leaf))
 *     elif dtype_comb == np.uint64:
 *         if dtype_leaf == np.uint32:             # <<<<<<<<<<<<<<
 *             ncells = _consolidate_uint32_uint64(ndim, idx_inf, serial,
 *                                                 leaf_start, leaf_stop,
 */
      goto __pyx_L7;
    }

    /* "cgal4py/delaunay/tools.pyx":801
 *                                                 leaf_start, leaf_stop,
 *                                                 verts, neigh)
 *         elif dtype_leaf == np.uint64:             # <<<<<<<<<<<<<<
 *             ncells = _consolidate_uint64_uint64(ndim, idx_inf, serial,
 *                                                 leaf_start, leaf_stop,
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 801, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_uint64); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 801, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_RichCompare(__pyx_v_dtype_leaf, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 801, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 801, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (likely(__pyx_t_10)) {

      /* "cgal4py/delaunay/tools.pyx":802
 *                                                 verts, neigh)
 *         elif dtype_leaf == np.uint64:
 *             ncells = _consolidate_uint64_uint64(ndim, idx_inf, serial,             # <<<<<<<<<<<<<<
 *                                                 leaf_start, leaf_stop,
 *                                                 verts, neigh)
 */
      __pyx_t_12 = __Pyx_PyInt_As_npy_uint32(__pyx_v_ndim); if (unlikely((__pyx_t_12 == ((npy_uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 802, __pyx_L1_error)
      __pyx_t_13 = __Pyx_PyInt_As_npy_uint64(__pyx_v_idx_inf); if (unlikely((__pyx_t_13 == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 802, __pyx_L1_error)

      /* "cgal4py/delaunay/tools.pyx":803
 *         elif dtype_leaf == np.uint64:
 *             ncells = _consolidate_uint64_uint64(ndim, idx_inf, serial,
 *                                                 leaf_start, leaf_stop,             # <<<<<<<<<<<<<<
 *                                                 verts, neigh)
 *         else:
 */
      if (!(likely(((__pyx_v_leaf_start) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_leaf_start, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 803, __pyx_L1_error)
      if (!(likely(((__pyx_v_leaf_stop) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_leaf_stop, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 803, __pyx_L1_error)

      /* "cgal4py/delaunay/tools.pyx":804
 *             ncells = _consolidate_uint64_uint64(ndim, idx_inf, serial,
 *                                                 leaf_start, leaf_stop,
 *                                                 verts, neigh)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Leaf type {} not supported.".format(dtype_leaf))
 */
      if (!(likely(((__pyx_v_verts) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_verts, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 804, __pyx_L1_error)
      if (!(likely(((__pyx_v_neigh) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_neigh, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 804, __pyx_L1_error)

      /* "cgal4py/delaunay/tools.pyx":802
 *                                                 verts, neigh)
 *         elif dtype_leaf == np.uint64:
 *             ncells = _consolidate_uint64_uint64(ndim, idx_inf, serial,             # <<<<<<<<<<<<<<
 *                                                 leaf_start, leaf_stop,
 *                                                 verts, neigh)
 */
      __pyx_t_6 = __Pyx_PyInt_From_npy_int64(__pyx_f_7cgal4py_8delaunay_5tools__consolidate_uint64_uint64(__pyx_t_12, __pyx_t_13, __pyx_v_serial, ((PyArrayObject *)__pyx_v_leaf_start), ((PyArrayObject *)__pyx_v_leaf_stop), ((PyArrayObject *)__pyx_v_verts), ((PyArrayObject *)__pyx_v_neigh))); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 802, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_ncells, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "cgal4py/delaunay/tools.pyx":801
 *                                                 leaf_start, leaf_stop,
 *                                                 verts, neigh)
 *         elif dtype_leaf == np.uint64:             # <<<<<<<<<<<<<<
 *             ncells = _consolidate_uint64_uint64(ndim, idx_inf, serial,
 *                                                 leaf_start, leaf_stop,
 */
      goto __pyx_L7;
    }

    /* "cgal4py/delaunay/tools.pyx":806
 *                                                 verts, neigh)
 *         else:
 *             raise TypeError("Leaf type {} not supported.".format(dtype_leaf))             # <<<<<<<<<<<<<<
 *     else:
 *         raise TypeError("Combined type {} not supported.".format(dtype_comb))
 */
    /*else*/ {
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Leaf_type_not_supported, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 806, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_dtype_leaf); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 806, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_dtype_leaf};
          __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 806, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_6);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_dtype_leaf};
          __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 806, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_6);
        } else
        #endif
        {
          __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 806, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5); __pyx_t_5 = NULL;
          __Pyx_INCREF(__pyx_v_dtype_leaf);
          __Pyx_GIVEREF(__pyx_v_dtype_leaf);
          PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_dtype_leaf);
          __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 806, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 806, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 806, __pyx_L1_error)
    }
    __pyx_L7:;

    /* "cgal4py/delaunay/tools.pyx":796
 *         else:
 *             raise TypeError("Leaf type {} not supported.".format(dtype_leaf))
 *     elif dtype_comb == np.uint64:             # <<<<<<<<<<<<<<
 *         if dtype_leaf == np.uint32:
 *             ncells = _consolidate_uint32_uint64(ndim, idx_inf, serial,
 */
    goto __pyx_L5;
  }

  /* "cgal4py/delaunay/tools.pyx":808
 *             raise TypeError("Leaf type {} not supported.".format(dtype_leaf))
 *     else:
 *         raise TypeError("Combined type {} not supported.".format(dtype_comb))             # <<<<<<<<<<<<<<
 *     t1 = time.time()
 *     print("Consolidation (cython) took {}s".format(t1-t0))
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Combined_type_not_supported, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 808, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_2) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_6, ((PyObject *)__pyx_v_dtype_comb)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 808, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_2, ((PyObject *)__pyx_v_dtype_comb)};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 808, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_2, ((PyObject *)__pyx_v_dtype_comb)};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 808, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 808, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_dtype_comb));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_dtype_comb));
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_dtype_comb));
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 808, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 808, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 808, __pyx_L1_error)
  }
  __pyx_L5:;

  /* "cgal4py/delaunay/tools.pyx":809
 *     else:
 *         raise TypeError("Combined type {} not supported.".format(dtype_comb))
 *     t1 = time.time()             # <<<<<<<<<<<<<<
 *     print("Consolidation (cython) took {}s".format(t1-t0))
 *     verts.resize((ncells, ndim+1))
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_time); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 809, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 809, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_t1, __pyx_t_6);
  __pyx_t_6 = 0;

  /* "cgal4py/delaunay/tools.pyx":810
 *         raise TypeError("Combined type {} not supported.".format(dtype_comb))
 *     t1 = time.time()
 *     print("Consolidation (cython) took {}s".format(t1-t0))             # <<<<<<<<<<<<<<
 *     verts.resize((ncells, ndim+1))
 *     neigh.resize((ncells, ndim+1))
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Consolidation_cython_took_s, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_t1, __pyx_v_t0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 810, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_1};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 810, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_1};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 810, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 810, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 810, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_6) < 0) __PYX_ERR(0, 810, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "cgal4py/delaunay/tools.pyx":811
 *     t1 = time.time()
 *     print("Consolidation (cython) took {}s".format(t1-t0))
 *     verts.resize((ncells, ndim+1))             # <<<<<<<<<<<<<<
 *     neigh.resize((ncells, ndim+1))
 *     return verts, neigh
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_verts, __pyx_n_s_resize); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_PyInt_AddObjC(__pyx_v_ndim, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_ncells);
  __Pyx_GIVEREF(__pyx_v_ncells);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_ncells);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 811, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_1};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 811, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_1};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 811, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 811, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_8); __pyx_t_8 = NULL;
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 811, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "cgal4py/delaunay/tools.pyx":812
 *     print("Consolidation (cython) took {}s".format(t1-t0))
 *     verts.resize((ncells, ndim+1))
 *     neigh.resize((ncells, ndim+1))             # <<<<<<<<<<<<<<
 *     return verts, neigh
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_neigh, __pyx_n_s_resize); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_ndim, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_ncells);
  __Pyx_GIVEREF(__pyx_v_ncells);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_ncells);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 812, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_1};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 812, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_1};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 812, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 812, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 812, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "cgal4py/delaunay/tools.pyx":813
 *     verts.resize((ncells, ndim+1))
 *     neigh.resize((ncells, ndim+1))
 *     return verts, neigh             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_verts);
  __Pyx_GIVEREF(__pyx_v_verts);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_verts);
  __Pyx_INCREF(__pyx_v_neigh);
  __Pyx_GIVEREF(__pyx_v_neigh);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_neigh);
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "cgal4py/delaunay/tools.pyx":768
 *     return ncells
 * 
 * def consolidate_leaves(ndim, idx_inf, serial, leaf_start, leaf_stop):             # <<<<<<<<<<<<<<
 *     dtype_comb = type(idx_inf)
 *     dtype_leaf = serial[0][0].dtype
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.consolidate_leaves", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dtype_comb);
  __Pyx_XDECREF(__pyx_v_dtype_leaf);
  __Pyx_XDECREF(__pyx_v_ncells);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_t0);
  __Pyx_XDECREF(__pyx_v_verts);
  __Pyx_XDECREF(__pyx_v_neigh);
  __Pyx_XDECREF(__pyx_v_t1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":817
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef void _output_leaf_uint32(char* fname, int leaf_id, np.uint32_t idx_inf,             # <<<<<<<<<<<<<<
 *                               np.ndarray[np.uint32_t, ndim=2] verts,
 *                               np.ndarray[np.uint32_t, ndim=2] neigh,
 */

static void __pyx_f_7cgal4py_8delaunay_5tools__output_leaf_uint32(char *__pyx_v_fname, int __pyx_v_leaf_id, __pyx_t_5numpy_uint32_t __pyx_v_idx_inf, PyArrayObject *__pyx_v_verts, PyArrayObject *__pyx_v_neigh, PyArrayObject *__pyx_v_sort_verts, PyArrayObject *__pyx_v_sort_cells, __pyx_t_5numpy_uint64_t __pyx_v_idx_start, __pyx_t_5numpy_uint64_t __pyx_v_idx_stop) {
  int64_t __pyx_v_ncells;
  uint32_t __pyx_v_ndim;
  __pyx_t_7cgal4py_8delaunay_5tools_sLeaf32 __pyx_v_leaf;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_neigh;
  __Pyx_Buffer __pyx_pybuffer_neigh;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_sort_cells;
  __Pyx_Buffer __pyx_pybuffer_sort_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_sort_verts;
  __Pyx_Buffer __pyx_pybuffer_sort_verts;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_verts;
  __Pyx_Buffer __pyx_pybuffer_verts;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  __pyx_t_7cgal4py_8delaunay_5tools_sLeaf32 __pyx_t_10;
  __Pyx_RefNannySetupContext("_output_leaf_uint32", 0);
  __pyx_pybuffer_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_verts.refcount = 0;
  __pyx_pybuffernd_verts.data = NULL;
  __pyx_pybuffernd_verts.rcbuffer = &__pyx_pybuffer_verts;
  __pyx_pybuffer_neigh.pybuffer.buf = NULL;
  __pyx_pybuffer_neigh.refcount = 0;
  __pyx_pybuffernd_neigh.data = NULL;
  __pyx_pybuffernd_neigh.rcbuffer = &__pyx_pybuffer_neigh;
  __pyx_pybuffer_sort_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_sort_verts.refcount = 0;
  __pyx_pybuffernd_sort_verts.data = NULL;
  __pyx_pybuffernd_sort_verts.rcbuffer = &__pyx_pybuffer_sort_verts;
  __pyx_pybuffer_sort_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_sort_cells.refcount = 0;
  __pyx_pybuffernd_sort_cells.data = NULL;
  __pyx_pybuffernd_sort_cells.rcbuffer = &__pyx_pybuffer_sort_cells;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 817, __pyx_L1_error)
  }
  __pyx_pybuffernd_verts.diminfo[0].strides = __pyx_pybuffernd_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_verts.diminfo[0].shape = __pyx_pybuffernd_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_verts.diminfo[1].strides = __pyx_pybuffernd_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_verts.diminfo[1].shape = __pyx_pybuffernd_verts.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer, (PyObject*)__pyx_v_neigh, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 817, __pyx_L1_error)
  }
  __pyx_pybuffernd_neigh.diminfo[0].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_neigh.diminfo[0].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_neigh.diminfo[1].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_neigh.diminfo[1].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sort_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_sort_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 817, __pyx_L1_error)
  }
  __pyx_pybuffernd_sort_verts.diminfo[0].strides = __pyx_pybuffernd_sort_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sort_verts.diminfo[0].shape = __pyx_pybuffernd_sort_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_sort_verts.diminfo[1].strides = __pyx_pybuffernd_sort_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_sort_verts.diminfo[1].shape = __pyx_pybuffernd_sort_verts.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sort_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_sort_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 817, __pyx_L1_error)
  }
  __pyx_pybuffernd_sort_cells.diminfo[0].strides = __pyx_pybuffernd_sort_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sort_cells.diminfo[0].shape = __pyx_pybuffernd_sort_cells.rcbuffer->pybuffer.shape[0];

  /* "cgal4py/delaunay/tools.pyx":823
 *                               np.ndarray[np.uint64_t, ndim=1] sort_cells,
 *                               np.uint64_t idx_start, np.uint64_t idx_stop):
 *     cdef int64_t ncells = verts.shape[0]             # <<<<<<<<<<<<<<
 *     cdef uint32_t ndim = verts.shape[1]-1
 *     if (ncells == 0) or (ndim == 0):
 */
  __pyx_v_ncells = (__pyx_v_verts->dimensions[0]);

  /* "cgal4py/delaunay/tools.pyx":824
 *                               np.uint64_t idx_start, np.uint64_t idx_stop):
 *     cdef int64_t ncells = verts.shape[0]
 *     cdef uint32_t ndim = verts.shape[1]-1             # <<<<<<<<<<<<<<
 *     if (ncells == 0) or (ndim == 0):
 *         return
 */
  __pyx_v_ndim = ((__pyx_v_verts->dimensions[1]) - 1);

  /* "cgal4py/delaunay/tools.pyx":825
 *     cdef int64_t ncells = verts.shape[0]
 *     cdef uint32_t ndim = verts.shape[1]-1
 *     if (ncells == 0) or (ndim == 0):             # <<<<<<<<<<<<<<
 *         return
 *     assert(neigh.shape[0] == ncells)
 */
  __pyx_t_2 = ((__pyx_v_ncells == 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_ndim == 0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cgal4py/delaunay/tools.pyx":826
 *     cdef uint32_t ndim = verts.shape[1]-1
 *     if (ncells == 0) or (ndim == 0):
 *         return             # <<<<<<<<<<<<<<
 *     assert(neigh.shape[0] == ncells)
 *     assert(neigh.shape[1] == ndim+1)
 */
    goto __pyx_L0;

    /* "cgal4py/delaunay/tools.pyx":825
 *     cdef int64_t ncells = verts.shape[0]
 *     cdef uint32_t ndim = verts.shape[1]-1
 *     if (ncells == 0) or (ndim == 0):             # <<<<<<<<<<<<<<
 *         return
 *     assert(neigh.shape[0] == ncells)
 */
  }

  /* "cgal4py/delaunay/tools.pyx":827
 *     if (ncells == 0) or (ndim == 0):
 *         return
 *     assert(neigh.shape[0] == ncells)             # <<<<<<<<<<<<<<
 *     assert(neigh.shape[1] == ndim+1)
 *     assert(sort_verts.shape[0] == ncells)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_neigh->dimensions[0]) == __pyx_v_ncells) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 827, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":828
 *         return
 *     assert(neigh.shape[0] == ncells)
 *     assert(neigh.shape[1] == ndim+1)             # <<<<<<<<<<<<<<
 *     assert(sort_verts.shape[0] == ncells)
 *     assert(sort_verts.shape[1] == ndim+1)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_neigh->dimensions[1]) == (__pyx_v_ndim + 1)) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 828, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":829
 *     assert(neigh.shape[0] == ncells)
 *     assert(neigh.shape[1] == ndim+1)
 *     assert(sort_verts.shape[0] == ncells)             # <<<<<<<<<<<<<<
 *     assert(sort_verts.shape[1] == ndim+1)
 *     assert(sort_cells.shape[0] == ncells)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_sort_verts->dimensions[0]) == __pyx_v_ncells) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 829, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":830
 *     assert(neigh.shape[1] == ndim+1)
 *     assert(sort_verts.shape[0] == ncells)
 *     assert(sort_verts.shape[1] == ndim+1)             # <<<<<<<<<<<<<<
 *     assert(sort_cells.shape[0] == ncells)
 *     cdef sLeaf32 leaf = sLeaf32(leaf_id, ndim, ncells, idx_inf,
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_sort_verts->dimensions[1]) == (__pyx_v_ndim + 1)) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 830, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":831
 *     assert(sort_verts.shape[0] == ncells)
 *     assert(sort_verts.shape[1] == ndim+1)
 *     assert(sort_cells.shape[0] == ncells)             # <<<<<<<<<<<<<<
 *     cdef sLeaf32 leaf = sLeaf32(leaf_id, ndim, ncells, idx_inf,
 *                                 &verts[0,0], &neigh[0,0],
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_sort_cells->dimensions[0]) == __pyx_v_ncells) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 831, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":833
 *     assert(sort_cells.shape[0] == ncells)
 *     cdef sLeaf32 leaf = sLeaf32(leaf_id, ndim, ncells, idx_inf,
 *                                 &verts[0,0], &neigh[0,0],             # <<<<<<<<<<<<<<
 *                                 &sort_verts[0,0], &sort_cells[0],
 *                                 idx_start, idx_stop)
 */
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;

  /* "cgal4py/delaunay/tools.pyx":834
 *     cdef sLeaf32 leaf = sLeaf32(leaf_id, ndim, ncells, idx_inf,
 *                                 &verts[0,0], &neigh[0,0],
 *                                 &sort_verts[0,0], &sort_cells[0],             # <<<<<<<<<<<<<<
 *                                 idx_start, idx_stop)
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;

  /* "cgal4py/delaunay/tools.pyx":832
 *     assert(sort_verts.shape[1] == ndim+1)
 *     assert(sort_cells.shape[0] == ncells)
 *     cdef sLeaf32 leaf = sLeaf32(leaf_id, ndim, ncells, idx_inf,             # <<<<<<<<<<<<<<
 *                                 &verts[0,0], &neigh[0,0],
 *                                 &sort_verts[0,0], &sort_cells[0],
 */
  try {
    __pyx_t_10 = __pyx_t_7cgal4py_8delaunay_5tools_sLeaf32(__pyx_v_leaf_id, __pyx_v_ndim, __pyx_v_ncells, __pyx_v_idx_inf, (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_verts.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_verts.diminfo[0].strides, __pyx_t_4, __pyx_pybuffernd_verts.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_neigh.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_neigh.diminfo[0].strides, __pyx_t_6, __pyx_pybuffernd_neigh.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_sort_verts.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_sort_verts.diminfo[0].strides, __pyx_t_8, __pyx_pybuffernd_sort_verts.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_sort_cells.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_sort_cells.diminfo[0].strides))), __pyx_v_idx_start, __pyx_v_idx_stop);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 832, __pyx_L1_error)
  }
  __pyx_v_leaf = __pyx_t_10;

  /* "cgal4py/delaunay/tools.pyx":836
 *                                 &sort_verts[0,0], &sort_cells[0],
 *                                 idx_start, idx_stop)
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         leaf.write_to_file(fname)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":837
 *                                 idx_start, idx_stop)
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         leaf.write_to_file(fname)             # <<<<<<<<<<<<<<
 * 
 * def output_leaf(fname, leaf_id, idx_inf, verts, neigh, sort_verts, sort_cells,
 */
        __pyx_v_leaf.write_to_file(__pyx_v_fname);
      }

      /* "cgal4py/delaunay/tools.pyx":836
 *                                 &sort_verts[0,0], &sort_cells[0],
 *                                 idx_start, idx_stop)
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         leaf.write_to_file(fname)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L8;
        }
        __pyx_L8:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":817
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef void _output_leaf_uint32(char* fname, int leaf_id, np.uint32_t idx_inf,             # <<<<<<<<<<<<<<
 *                               np.ndarray[np.uint32_t, ndim=2] verts,
 *                               np.ndarray[np.uint32_t, ndim=2] neigh,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sort_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sort_verts.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_WriteUnraisable("cgal4py.delaunay.tools._output_leaf_uint32", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sort_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sort_verts.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
}

/* "cgal4py/delaunay/tools.pyx":839
 *         leaf.write_to_file(fname)
 * 
 * def output_leaf(fname, leaf_id, idx_inf, verts, neigh, sort_verts, sort_cells,             # <<<<<<<<<<<<<<
 *                 idx_start, idx_stop):
 *     cdef char* cfname = fname
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_47output_leaf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7cgal4py_8delaunay_5tools_47output_leaf = {"output_leaf", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_47output_leaf, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_47output_leaf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fname = 0;
  PyObject *__pyx_v_leaf_id = 0;
  PyObject *__pyx_v_idx_inf = 0;
  PyObject *__pyx_v_verts = 0;
  PyObject *__pyx_v_neigh = 0;
  PyObject *__pyx_v_sort_verts = 0;
  PyObject *__pyx_v_sort_cells = 0;
  PyObject *__pyx_v_idx_start = 0;
  PyObject *__pyx_v_idx_stop = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("output_leaf (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fname,&__pyx_n_s_leaf_id,&__pyx_n_s_idx_inf,&__pyx_n_s_verts,&__pyx_n_s_neigh,&__pyx_n_s_sort_verts,&__pyx_n_s_sort_cells,&__pyx_n_s_idx_start,&__pyx_n_s_idx_stop,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fname)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_leaf_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("output_leaf", 1, 9, 9, 1); __PYX_ERR(0, 839, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx_inf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("output_leaf", 1, 9, 9, 2); __PYX_ERR(0, 839, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_verts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("output_leaf", 1, 9, 9, 3); __PYX_ERR(0, 839, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_neigh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("output_leaf", 1, 9, 9, 4); __PYX_ERR(0, 839, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sort_verts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("output_leaf", 1, 9, 9, 5); __PYX_ERR(0, 839, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sort_cells)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("output_leaf", 1, 9, 9, 6); __PYX_ERR(0, 839, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx_start)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("output_leaf", 1, 9, 9, 7); __PYX_ERR(0, 839, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx_stop)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("output_leaf", 1, 9, 9, 8); __PYX_ERR(0, 839, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "output_leaf") < 0)) __PYX_ERR(0, 839, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_fname = values[0];
    __pyx_v_leaf_id = values[1];
    __pyx_v_idx_inf = values[2];
    __pyx_v_verts = values[3];
    __pyx_v_neigh = values[4];
    __pyx_v_sort_verts = values[5];
    __pyx_v_sort_cells = values[6];
    __pyx_v_idx_start = values[7];
    __pyx_v_idx_stop = values[8];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("output_leaf", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 839, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.output_leaf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_46output_leaf(__pyx_self, __pyx_v_fname, __pyx_v_leaf_id, __pyx_v_idx_inf, __pyx_v_verts, __pyx_v_neigh, __pyx_v_sort_verts, __pyx_v_sort_cells, __pyx_v_idx_start, __pyx_v_idx_stop);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_46output_leaf(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fname, PyObject *__pyx_v_leaf_id, PyObject *__pyx_v_idx_inf, PyObject *__pyx_v_verts, PyObject *__pyx_v_neigh, PyObject *__pyx_v_sort_verts, PyObject *__pyx_v_sort_cells, PyObject *__pyx_v_idx_start, PyObject *__pyx_v_idx_stop) {
  char *__pyx_v_cfname;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  __pyx_t_5numpy_uint32_t __pyx_t_7;
  __pyx_t_5numpy_uint64_t __pyx_t_8;
  __pyx_t_5numpy_uint64_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("output_leaf", 0);

  /* "cgal4py/delaunay/tools.pyx":841
 * def output_leaf(fname, leaf_id, idx_inf, verts, neigh, sort_verts, sort_cells,
 *                 idx_start, idx_stop):
 *     cdef char* cfname = fname             # <<<<<<<<<<<<<<
 *     if verts.dtype == np.uint32:
 *         _output_leaf_uint32(cfname, leaf_id, idx_inf, verts, neigh,
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_fname); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(0, 841, __pyx_L1_error)
  __pyx_v_cfname = __pyx_t_1;

  /* "cgal4py/delaunay/tools.pyx":842
 *                 idx_start, idx_stop):
 *     cdef char* cfname = fname
 *     if verts.dtype == np.uint32:             # <<<<<<<<<<<<<<
 *         _output_leaf_uint32(cfname, leaf_id, idx_inf, verts, neigh,
 *                             sort_verts, sort_cells, idx_start, idx_stop)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_verts, __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_uint32); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_5) {

    /* "cgal4py/delaunay/tools.pyx":843
 *     cdef char* cfname = fname
 *     if verts.dtype == np.uint32:
 *         _output_leaf_uint32(cfname, leaf_id, idx_inf, verts, neigh,             # <<<<<<<<<<<<<<
 *                             sort_verts, sort_cells, idx_start, idx_stop)
 *     else:
 */
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_leaf_id); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 843, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyInt_As_npy_uint32(__pyx_v_idx_inf); if (unlikely((__pyx_t_7 == ((npy_uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 843, __pyx_L1_error)
    if (!(likely(((__pyx_v_verts) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_verts, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 843, __pyx_L1_error)
    if (!(likely(((__pyx_v_neigh) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_neigh, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 843, __pyx_L1_error)

    /* "cgal4py/delaunay/tools.pyx":844
 *     if verts.dtype == np.uint32:
 *         _output_leaf_uint32(cfname, leaf_id, idx_inf, verts, neigh,
 *                             sort_verts, sort_cells, idx_start, idx_stop)             # <<<<<<<<<<<<<<
 *     else:
 *         NotImplementedError("Output of leaves with template type {} not supported".format(type(idx_inf)))
 */
    if (!(likely(((__pyx_v_sort_verts) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_sort_verts, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 844, __pyx_L1_error)
    if (!(likely(((__pyx_v_sort_cells) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_sort_cells, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 844, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyInt_As_npy_uint64(__pyx_v_idx_start); if (unlikely((__pyx_t_8 == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 844, __pyx_L1_error)
    __pyx_t_9 = __Pyx_PyInt_As_npy_uint64(__pyx_v_idx_stop); if (unlikely((__pyx_t_9 == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 844, __pyx_L1_error)

    /* "cgal4py/delaunay/tools.pyx":843
 *     cdef char* cfname = fname
 *     if verts.dtype == np.uint32:
 *         _output_leaf_uint32(cfname, leaf_id, idx_inf, verts, neigh,             # <<<<<<<<<<<<<<
 *                             sort_verts, sort_cells, idx_start, idx_stop)
 *     else:
 */
    __pyx_f_7cgal4py_8delaunay_5tools__output_leaf_uint32(__pyx_v_cfname, __pyx_t_6, __pyx_t_7, ((PyArrayObject *)__pyx_v_verts), ((PyArrayObject *)__pyx_v_neigh), ((PyArrayObject *)__pyx_v_sort_verts), ((PyArrayObject *)__pyx_v_sort_cells), __pyx_t_8, __pyx_t_9);

    /* "cgal4py/delaunay/tools.pyx":842
 *                 idx_start, idx_stop):
 *     cdef char* cfname = fname
 *     if verts.dtype == np.uint32:             # <<<<<<<<<<<<<<
 *         _output_leaf_uint32(cfname, leaf_id, idx_inf, verts, neigh,
 *                             sort_verts, sort_cells, idx_start, idx_stop)
 */
    goto __pyx_L3;
  }

  /* "cgal4py/delaunay/tools.pyx":846
 *                             sort_verts, sort_cells, idx_start, idx_stop)
 *     else:
 *         NotImplementedError("Output of leaves with template type {} not supported".format(type(idx_inf)))             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Output_of_leaves_with_template_t, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 846, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_2) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)Py_TYPE(__pyx_v_idx_inf))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 846, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_2, ((PyObject *)Py_TYPE(__pyx_v_idx_inf))};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 846, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_2, ((PyObject *)Py_TYPE(__pyx_v_idx_inf))};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 846, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 846, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2); __pyx_t_2 = NULL;
        __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_idx_inf)));
        __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_v_idx_inf)));
        PyTuple_SET_ITEM(__pyx_t_10, 0+1, ((PyObject *)Py_TYPE(__pyx_v_idx_inf)));
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 846, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_NotImplementedError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 846, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "cgal4py/delaunay/tools.pyx":839
 *         leaf.write_to_file(fname)
 * 
 * def output_leaf(fname, leaf_id, idx_inf, verts, neigh, sort_verts, sort_cells,             # <<<<<<<<<<<<<<
 *                 idx_start, idx_stop):
 *     cdef char* cfname = fname
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.output_leaf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":850
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _add_leaf_uint32_uint32(np.uint32_t ndim, np.uint64_t ncells, np.uint32_t idx_inf,             # <<<<<<<<<<<<<<
 *                             np.ndarray[np.uint32_t, ndim=2] all_verts,
 *                             np.ndarray[np.uint32_t, ndim=2] all_neigh,
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_49_add_leaf_uint32_uint32(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7cgal4py_8delaunay_5tools_49_add_leaf_uint32_uint32 = {"_add_leaf_uint32_uint32", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_49_add_leaf_uint32_uint32, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_49_add_leaf_uint32_uint32(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_5numpy_uint32_t __pyx_v_ndim;
  __pyx_t_5numpy_uint64_t __pyx_v_ncells;
  __pyx_t_5numpy_uint32_t __pyx_v_idx_inf;
  PyArrayObject *__pyx_v_all_verts = 0;
  PyArrayObject *__pyx_v_all_neigh = 0;
  PyArrayObject *__pyx_v_leaf_start = 0;
  PyArrayObject *__pyx_v_leaf_stop = 0;
  PyArrayObject *__pyx_v_key_split_map = 0;
  PyArrayObject *__pyx_v_val_split_map = 0;
  PyArrayObject *__pyx_v_key_inf_map = 0;
  PyArrayObject *__pyx_v_val_inf_map = 0;
  int __pyx_v_leaf_id;
  __pyx_t_5numpy_uint32_t __pyx_v_leaf_idx_inf;
  PyArrayObject *__pyx_v_leaf_verts = 0;
  PyArrayObject *__pyx_v_leaf_neigh = 0;
  PyArrayObject *__pyx_v_leaf_sort_verts = 0;
  PyArrayObject *__pyx_v_leaf_sort_cells = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_add_leaf_uint32_uint32 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ndim,&__pyx_n_s_ncells,&__pyx_n_s_idx_inf,&__pyx_n_s_all_verts,&__pyx_n_s_all_neigh,&__pyx_n_s_leaf_start,&__pyx_n_s_leaf_stop,&__pyx_n_s_key_split_map,&__pyx_n_s_val_split_map,&__pyx_n_s_key_inf_map,&__pyx_n_s_val_inf_map,&__pyx_n_s_leaf_id,&__pyx_n_s_leaf_idx_inf,&__pyx_n_s_leaf_verts,&__pyx_n_s_leaf_neigh,&__pyx_n_s_leaf_sort_verts,&__pyx_n_s_leaf_sort_cells,0};
    PyObject* values[17] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ndim)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ncells)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_add_leaf_uint32_uint32", 1, 17, 17, 1); __PYX_ERR(0, 850, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx_inf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_add_leaf_uint32_uint32", 1, 17, 17, 2); __PYX_ERR(0, 850, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_all_verts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_add_leaf_uint32_uint32", 1, 17, 17, 3); __PYX_ERR(0, 850, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_all_neigh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_add_leaf_uint32_uint32", 1, 17, 17, 4); __PYX_ERR(0, 850, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_leaf_start)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_add_leaf_uint32_uint32", 1, 17, 17, 5); __PYX_ERR(0, 850, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_leaf_stop)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_add_leaf_uint32_uint32", 1, 17, 17, 6); __PYX_ERR(0, 850, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key_split_map)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_add_leaf_uint32_uint32", 1, 17, 17, 7); __PYX_ERR(0, 850, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_val_split_map)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_add_leaf_uint32_uint32", 1, 17, 17, 8); __PYX_ERR(0, 850, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key_inf_map)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_add_leaf_uint32_uint32", 1, 17, 17, 9); __PYX_ERR(0, 850, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_val_inf_map)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_add_leaf_uint32_uint32", 1, 17, 17, 10); __PYX_ERR(0, 850, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_leaf_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_add_leaf_uint32_uint32", 1, 17, 17, 11); __PYX_ERR(0, 850, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_leaf_idx_inf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_add_leaf_uint32_uint32", 1, 17, 17, 12); __PYX_ERR(0, 850, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_leaf_verts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_add_leaf_uint32_uint32", 1, 17, 17, 13); __PYX_ERR(0, 850, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (likely((values[14] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_leaf_neigh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_add_leaf_uint32_uint32", 1, 17, 17, 14); __PYX_ERR(0, 850, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (likely((values[15] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_leaf_sort_verts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_add_leaf_uint32_uint32", 1, 17, 17, 15); __PYX_ERR(0, 850, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 16:
        if (likely((values[16] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_leaf_sort_cells)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_add_leaf_uint32_uint32", 1, 17, 17, 16); __PYX_ERR(0, 850, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_add_leaf_uint32_uint32") < 0)) __PYX_ERR(0, 850, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 17) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
      values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
    }
    __pyx_v_ndim = __Pyx_PyInt_As_npy_uint32(values[0]); if (unlikely((__pyx_v_ndim == ((npy_uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 850, __pyx_L3_error)
    __pyx_v_ncells = __Pyx_PyInt_As_npy_uint64(values[1]); if (unlikely((__pyx_v_ncells == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 850, __pyx_L3_error)
    __pyx_v_idx_inf = __Pyx_PyInt_As_npy_uint32(values[2]); if (unlikely((__pyx_v_idx_inf == ((npy_uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 850, __pyx_L3_error)
    __pyx_v_all_verts = ((PyArrayObject *)values[3]);
    __pyx_v_all_neigh = ((PyArrayObject *)values[4]);
    __pyx_v_leaf_start = ((PyArrayObject *)values[5]);
    __pyx_v_leaf_stop = ((PyArrayObject *)values[6]);
    __pyx_v_key_split_map = ((PyArrayObject *)values[7]);
    __pyx_v_val_split_map = ((PyArrayObject *)values[8]);
    __pyx_v_key_inf_map = ((PyArrayObject *)values[9]);
    __pyx_v_val_inf_map = ((PyArrayObject *)values[10]);
    __pyx_v_leaf_id = __Pyx_PyInt_As_int(values[11]); if (unlikely((__pyx_v_leaf_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 859, __pyx_L3_error)
    __pyx_v_leaf_idx_inf = __Pyx_PyInt_As_npy_uint32(values[12]); if (unlikely((__pyx_v_leaf_idx_inf == ((npy_uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 859, __pyx_L3_error)
    __pyx_v_leaf_verts = ((PyArrayObject *)values[13]);
    __pyx_v_leaf_neigh = ((PyArrayObject *)values[14]);
    __pyx_v_leaf_sort_verts = ((PyArrayObject *)values[15]);
    __pyx_v_leaf_sort_cells = ((PyArrayObject *)values[16]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_add_leaf_uint32_uint32", 1, 17, 17, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 850, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools._add_leaf_uint32_uint32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_all_verts), __pyx_ptype_5numpy_ndarray, 1, "all_verts", 0))) __PYX_ERR(0, 851, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_all_neigh), __pyx_ptype_5numpy_ndarray, 1, "all_neigh", 0))) __PYX_ERR(0, 852, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_leaf_start), __pyx_ptype_5numpy_ndarray, 1, "leaf_start", 0))) __PYX_ERR(0, 853, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_leaf_stop), __pyx_ptype_5numpy_ndarray, 1, "leaf_stop", 0))) __PYX_ERR(0, 854, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key_split_map), __pyx_ptype_5numpy_ndarray, 1, "key_split_map", 0))) __PYX_ERR(0, 855, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_val_split_map), __pyx_ptype_5numpy_ndarray, 1, "val_split_map", 0))) __PYX_ERR(0, 856, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key_inf_map), __pyx_ptype_5numpy_ndarray, 1, "key_inf_map", 0))) __PYX_ERR(0, 857, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_val_inf_map), __pyx_ptype_5numpy_ndarray, 1, "val_inf_map", 0))) __PYX_ERR(0, 858, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_leaf_verts), __pyx_ptype_5numpy_ndarray, 1, "leaf_verts", 0))) __PYX_ERR(0, 860, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_leaf_neigh), __pyx_ptype_5numpy_ndarray, 1, "leaf_neigh", 0))) __PYX_ERR(0, 861, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_leaf_sort_verts), __pyx_ptype_5numpy_ndarray, 1, "leaf_sort_verts", 0))) __PYX_ERR(0, 862, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_leaf_sort_cells), __pyx_ptype_5numpy_ndarray, 1, "leaf_sort_cells", 0))) __PYX_ERR(0, 863, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_48_add_leaf_uint32_uint32(__pyx_self, __pyx_v_ndim, __pyx_v_ncells, __pyx_v_idx_inf, __pyx_v_all_verts, __pyx_v_all_neigh, __pyx_v_leaf_start, __pyx_v_leaf_stop, __pyx_v_key_split_map, __pyx_v_val_split_map, __pyx_v_key_inf_map, __pyx_v_val_inf_map, __pyx_v_leaf_id, __pyx_v_leaf_idx_inf, __pyx_v_leaf_verts, __pyx_v_leaf_neigh, __pyx_v_leaf_sort_verts, __pyx_v_leaf_sort_cells);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_48_add_leaf_uint32_uint32(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_5numpy_uint32_t __pyx_v_ndim, __pyx_t_5numpy_uint64_t __pyx_v_ncells, __pyx_t_5numpy_uint32_t __pyx_v_idx_inf, PyArrayObject *__pyx_v_all_verts, PyArrayObject *__pyx_v_all_neigh, PyArrayObject *__pyx_v_leaf_start, PyArrayObject *__pyx_v_leaf_stop, PyArrayObject *__pyx_v_key_split_map, PyArrayObject *__pyx_v_val_split_map, PyArrayObject *__pyx_v_key_inf_map, PyArrayObject *__pyx_v_val_inf_map, int __pyx_v_leaf_id, __pyx_t_5numpy_uint32_t __pyx_v_leaf_idx_inf, PyArrayObject *__pyx_v_leaf_verts, PyArrayObject *__pyx_v_leaf_neigh, PyArrayObject *__pyx_v_leaf_sort_verts, PyArrayObject *__pyx_v_leaf_sort_cells) {
  float __pyx_v_t1;
  float __pyx_v_t0;
  CYTHON_UNUSED uint64_t __pyx_v_num_leaves;
  int64_t __pyx_v_max_ncells;
  uint64_t __pyx_v_n_split_map;
  uint64_t __pyx_v_n_inf_map;
  int64_t __pyx_v_leaf_ncells;
  __pyx_t_7cgal4py_8delaunay_5tools_sLeaf32 __pyx_v_leaf;
  ConsolidatedLeaves<uint32_t>  __pyx_v_obj;
  PyArrayObject *__pyx_v_val_split_map0 = 0;
  PyArrayObject *__pyx_v_key_split_map0 = 0;
  PyArrayObject *__pyx_v_val_inf_map0 = 0;
  PyArrayObject *__pyx_v_key_inf_map0 = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_all_neigh;
  __Pyx_Buffer __pyx_pybuffer_all_neigh;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_all_verts;
  __Pyx_Buffer __pyx_pybuffer_all_verts;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_key_inf_map;
  __Pyx_Buffer __pyx_pybuffer_key_inf_map;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_key_inf_map0;
  __Pyx_Buffer __pyx_pybuffer_key_inf_map0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_key_split_map;
  __Pyx_Buffer __pyx_pybuffer_key_split_map;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_key_split_map0;
  __Pyx_Buffer __pyx_pybuffer_key_split_map0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_leaf_neigh;
  __Pyx_Buffer __pyx_pybuffer_leaf_neigh;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_leaf_sort_cells;
  __Pyx_Buffer __pyx_pybuffer_leaf_sort_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_leaf_sort_verts;
  __Pyx_Buffer __pyx_pybuffer_leaf_sort_verts;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_leaf_start;
  __Pyx_Buffer __pyx_pybuffer_leaf_start;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_leaf_stop;
  __Pyx_Buffer __pyx_pybuffer_leaf_stop;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_leaf_verts;
  __Pyx_Buffer __pyx_pybuffer_leaf_verts;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_val_inf_map;
  __Pyx_Buffer __pyx_pybuffer_val_inf_map;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_val_inf_map0;
  __Pyx_Buffer __pyx_pybuffer_val_inf_map0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_val_split_map;
  __Pyx_Buffer __pyx_pybuffer_val_split_map;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_val_split_map0;
  __Pyx_Buffer __pyx_pybuffer_val_split_map0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  float __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  uint64_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  __pyx_t_7cgal4py_8delaunay_5tools_sLeaf32 __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  Py_ssize_t __pyx_t_26;
  Py_ssize_t __pyx_t_27;
  Py_ssize_t __pyx_t_28;
  Py_ssize_t __pyx_t_29;
  ConsolidatedLeaves<uint32_t>  __pyx_t_30;
  int __pyx_t_31;
  PyArrayObject *__pyx_t_32 = NULL;
  PyObject *__pyx_t_33 = NULL;
  PyObject *__pyx_t_34 = NULL;
  PyObject *__pyx_t_35 = NULL;
  PyArrayObject *__pyx_t_36 = NULL;
  Py_ssize_t __pyx_t_37;
  Py_ssize_t __pyx_t_38;
  Py_ssize_t __pyx_t_39;
  PyArrayObject *__pyx_t_40 = NULL;
  PyArrayObject *__pyx_t_41 = NULL;
  Py_ssize_t __pyx_t_42;
  Py_ssize_t __pyx_t_43;
  Py_ssize_t __pyx_t_44;
  int64_t __pyx_t_45;
  __Pyx_RefNannySetupContext("_add_leaf_uint32_uint32", 0);
  __pyx_pybuffer_val_split_map0.pybuffer.buf = NULL;
  __pyx_pybuffer_val_split_map0.refcount = 0;
  __pyx_pybuffernd_val_split_map0.data = NULL;
  __pyx_pybuffernd_val_split_map0.rcbuffer = &__pyx_pybuffer_val_split_map0;
  __pyx_pybuffer_key_split_map0.pybuffer.buf = NULL;
  __pyx_pybuffer_key_split_map0.refcount = 0;
  __pyx_pybuffernd_key_split_map0.data = NULL;
  __pyx_pybuffernd_key_split_map0.rcbuffer = &__pyx_pybuffer_key_split_map0;
  __pyx_pybuffer_val_inf_map0.pybuffer.buf = NULL;
  __pyx_pybuffer_val_inf_map0.refcount = 0;
  __pyx_pybuffernd_val_inf_map0.data = NULL;
  __pyx_pybuffernd_val_inf_map0.rcbuffer = &__pyx_pybuffer_val_inf_map0;
  __pyx_pybuffer_key_inf_map0.pybuffer.buf = NULL;
  __pyx_pybuffer_key_inf_map0.refcount = 0;
  __pyx_pybuffernd_key_inf_map0.data = NULL;
  __pyx_pybuffernd_key_inf_map0.rcbuffer = &__pyx_pybuffer_key_inf_map0;
  __pyx_pybuffer_all_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_all_verts.refcount = 0;
  __pyx_pybuffernd_all_verts.data = NULL;
  __pyx_pybuffernd_all_verts.rcbuffer = &__pyx_pybuffer_all_verts;
  __pyx_pybuffer_all_neigh.pybuffer.buf = NULL;
  __pyx_pybuffer_all_neigh.refcount = 0;
  __pyx_pybuffernd_all_neigh.data = NULL;
  __pyx_pybuffernd_all_neigh.rcbuffer = &__pyx_pybuffer_all_neigh;
  __pyx_pybuffer_leaf_start.pybuffer.buf = NULL;
  __pyx_pybuffer_leaf_start.refcount = 0;
  __pyx_pybuffernd_leaf_start.data = NULL;
  __pyx_pybuffernd_leaf_start.rcbuffer = &__pyx_pybuffer_leaf_start;
  __pyx_pybuffer_leaf_stop.pybuffer.buf = NULL;
  __pyx_pybuffer_leaf_stop.refcount = 0;
  __pyx_pybuffernd_leaf_stop.data = NULL;
  __pyx_pybuffernd_leaf_stop.rcbuffer = &__pyx_pybuffer_leaf_stop;
  __pyx_pybuffer_key_split_map.pybuffer.buf = NULL;
  __pyx_pybuffer_key_split_map.refcount = 0;
  __pyx_pybuffernd_key_split_map.data = NULL;
  __pyx_pybuffernd_key_split_map.rcbuffer = &__pyx_pybuffer_key_split_map;
  __pyx_pybuffer_val_split_map.pybuffer.buf = NULL;
  __pyx_pybuffer_val_split_map.refcount = 0;
  __pyx_pybuffernd_val_split_map.data = NULL;
  __pyx_pybuffernd_val_split_map.rcbuffer = &__pyx_pybuffer_val_split_map;
  __pyx_pybuffer_key_inf_map.pybuffer.buf = NULL;
  __pyx_pybuffer_key_inf_map.refcount = 0;
  __pyx_pybuffernd_key_inf_map.data = NULL;
  __pyx_pybuffernd_key_inf_map.rcbuffer = &__pyx_pybuffer_key_inf_map;
  __pyx_pybuffer_val_inf_map.pybuffer.buf = NULL;
  __pyx_pybuffer_val_inf_map.refcount = 0;
  __pyx_pybuffernd_val_inf_map.data = NULL;
  __pyx_pybuffernd_val_inf_map.rcbuffer = &__pyx_pybuffer_val_inf_map;
  __pyx_pybuffer_leaf_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_leaf_verts.refcount = 0;
  __pyx_pybuffernd_leaf_verts.data = NULL;
  __pyx_pybuffernd_leaf_verts.rcbuffer = &__pyx_pybuffer_leaf_verts;
  __pyx_pybuffer_leaf_neigh.pybuffer.buf = NULL;
  __pyx_pybuffer_leaf_neigh.refcount = 0;
  __pyx_pybuffernd_leaf_neigh.data = NULL;
  __pyx_pybuffernd_leaf_neigh.rcbuffer = &__pyx_pybuffer_leaf_neigh;
  __pyx_pybuffer_leaf_sort_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_leaf_sort_verts.refcount = 0;
  __pyx_pybuffernd_leaf_sort_verts.data = NULL;
  __pyx_pybuffernd_leaf_sort_verts.rcbuffer = &__pyx_pybuffer_leaf_sort_verts;
  __pyx_pybuffer_leaf_sort_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_leaf_sort_cells.refcount = 0;
  __pyx_pybuffernd_leaf_sort_cells.data = NULL;
  __pyx_pybuffernd_leaf_sort_cells.rcbuffer = &__pyx_pybuffer_leaf_sort_cells;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_all_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_all_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 850, __pyx_L1_error)
  }
  __pyx_pybuffernd_all_verts.diminfo[0].strides = __pyx_pybuffernd_all_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_all_verts.diminfo[0].shape = __pyx_pybuffernd_all_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_all_verts.diminfo[1].strides = __pyx_pybuffernd_all_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_all_verts.diminfo[1].shape = __pyx_pybuffernd_all_verts.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_all_neigh.rcbuffer->pybuffer, (PyObject*)__pyx_v_all_neigh, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 850, __pyx_L1_error)
  }
  __pyx_pybuffernd_all_neigh.diminfo[0].strides = __pyx_pybuffernd_all_neigh.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_all_neigh.diminfo[0].shape = __pyx_pybuffernd_all_neigh.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_all_neigh.diminfo[1].strides = __pyx_pybuffernd_all_neigh.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_all_neigh.diminfo[1].shape = __pyx_pybuffernd_all_neigh.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_leaf_start.rcbuffer->pybuffer, (PyObject*)__pyx_v_leaf_start, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 850, __pyx_L1_error)
  }
  __pyx_pybuffernd_leaf_start.diminfo[0].strides = __pyx_pybuffernd_leaf_start.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_leaf_start.diminfo[0].shape = __pyx_pybuffernd_leaf_start.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_leaf_stop.rcbuffer->pybuffer, (PyObject*)__pyx_v_leaf_stop, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 850, __pyx_L1_error)
  }
  __pyx_pybuffernd_leaf_stop.diminfo[0].strides = __pyx_pybuffernd_leaf_stop.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_leaf_stop.diminfo[0].shape = __pyx_pybuffernd_leaf_stop.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_key_split_map.rcbuffer->pybuffer, (PyObject*)__pyx_v_key_split_map, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 850, __pyx_L1_error)
  }
  __pyx_pybuffernd_key_split_map.diminfo[0].strides = __pyx_pybuffernd_key_split_map.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_key_split_map.diminfo[0].shape = __pyx_pybuffernd_key_split_map.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_key_split_map.diminfo[1].strides = __pyx_pybuffernd_key_split_map.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_key_split_map.diminfo[1].shape = __pyx_pybuffernd_key_split_map.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_val_split_map.rcbuffer->pybuffer, (PyObject*)__pyx_v_val_split_map, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 850, __pyx_L1_error)
  }
  __pyx_pybuffernd_val_split_map.diminfo[0].strides = __pyx_pybuffernd_val_split_map.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_val_split_map.diminfo[0].shape = __pyx_pybuffernd_val_split_map.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_key_inf_map.rcbuffer->pybuffer, (PyObject*)__pyx_v_key_inf_map, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 850, __pyx_L1_error)
  }
  __pyx_pybuffernd_key_inf_map.diminfo[0].strides = __pyx_pybuffernd_key_inf_map.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_key_inf_map.diminfo[0].shape = __pyx_pybuffernd_key_inf_map.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_key_inf_map.diminfo[1].strides = __pyx_pybuffernd_key_inf_map.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_key_inf_map.diminfo[1].shape = __pyx_pybuffernd_key_inf_map.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_val_inf_map.rcbuffer->pybuffer, (PyObject*)__pyx_v_val_inf_map, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 850, __pyx_L1_error)
  }
  __pyx_pybuffernd_val_inf_map.diminfo[0].strides = __pyx_pybuffernd_val_inf_map.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_val_inf_map.diminfo[0].shape = __pyx_pybuffernd_val_inf_map.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_leaf_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_leaf_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 850, __pyx_L1_error)
  }
  __pyx_pybuffernd_leaf_verts.diminfo[0].strides = __pyx_pybuffernd_leaf_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_leaf_verts.diminfo[0].shape = __pyx_pybuffernd_leaf_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_leaf_verts.diminfo[1].strides = __pyx_pybuffernd_leaf_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_leaf_verts.diminfo[1].shape = __pyx_pybuffernd_leaf_verts.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_leaf_neigh.rcbuffer->pybuffer, (PyObject*)__pyx_v_leaf_neigh, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 850, __pyx_L1_error)
  }
  __pyx_pybuffernd_leaf_neigh.diminfo[0].strides = __pyx_pybuffernd_leaf_neigh.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_leaf_neigh.diminfo[0].shape = __pyx_pybuffernd_leaf_neigh.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_leaf_neigh.diminfo[1].strides = __pyx_pybuffernd_leaf_neigh.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_leaf_neigh.diminfo[1].shape = __pyx_pybuffernd_leaf_neigh.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_leaf_sort_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_leaf_sort_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 850, __pyx_L1_error)
  }
  __pyx_pybuffernd_leaf_sort_verts.diminfo[0].strides = __pyx_pybuffernd_leaf_sort_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_leaf_sort_verts.diminfo[0].shape = __pyx_pybuffernd_leaf_sort_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_leaf_sort_verts.diminfo[1].strides = __pyx_pybuffernd_leaf_sort_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_leaf_sort_verts.diminfo[1].shape = __pyx_pybuffernd_leaf_sort_verts.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_leaf_sort_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_leaf_sort_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 850, __pyx_L1_error)
  }
  __pyx_pybuffernd_leaf_sort_cells.diminfo[0].strides = __pyx_pybuffernd_leaf_sort_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_leaf_sort_cells.diminfo[0].shape = __pyx_pybuffernd_leaf_sort_cells.rcbuffer->pybuffer.shape[0];

  /* "cgal4py/delaunay/tools.pyx":866
 *     cdef float t1, t0
 *     # Checking to ensure no out-of-bounds things
 *     t0 = time.time()             # <<<<<<<<<<<<<<
 *     assert(leaf_start.size == leaf_stop.size)
 *     assert(all_verts.size == all_neigh.size)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 866, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 866, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 866, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_t0 = __pyx_t_4;

  /* "cgal4py/delaunay/tools.pyx":867
 *     # Checking to ensure no out-of-bounds things
 *     t0 = time.time()
 *     assert(leaf_start.size == leaf_stop.size)             # <<<<<<<<<<<<<<
 *     assert(all_verts.size == all_neigh.size)
 *     assert(key_split_map.size == val_split_map.size*(ndim+1))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_leaf_start), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 867, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_leaf_stop), __pyx_n_s_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 867, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 867, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 867, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_5)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 867, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":868
 *     t0 = time.time()
 *     assert(leaf_start.size == leaf_stop.size)
 *     assert(all_verts.size == all_neigh.size)             # <<<<<<<<<<<<<<
 *     assert(key_split_map.size == val_split_map.size*(ndim+1))
 *     assert(key_inf_map.size == val_inf_map.size*(ndim+1))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_all_verts), __pyx_n_s_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 868, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_all_neigh), __pyx_n_s_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 868, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 868, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 868, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_5)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 868, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":869
 *     assert(leaf_start.size == leaf_stop.size)
 *     assert(all_verts.size == all_neigh.size)
 *     assert(key_split_map.size == val_split_map.size*(ndim+1))             # <<<<<<<<<<<<<<
 *     assert(key_inf_map.size == val_inf_map.size*(ndim+1))
 *     assert(leaf_verts.size == leaf_neigh.size)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_key_split_map), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 869, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_val_split_map), __pyx_n_s_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 869, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_v_ndim + 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 869, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PyNumber_Multiply(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 869, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_6, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 869, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 869, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_5)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 869, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":870
 *     assert(all_verts.size == all_neigh.size)
 *     assert(key_split_map.size == val_split_map.size*(ndim+1))
 *     assert(key_inf_map.size == val_inf_map.size*(ndim+1))             # <<<<<<<<<<<<<<
 *     assert(leaf_verts.size == leaf_neigh.size)
 *     if all_verts.shape[0] == 0 or leaf_verts.shape[0] == 0:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_key_inf_map), __pyx_n_s_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 870, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_val_inf_map), __pyx_n_s_size); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 870, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyInt_From_long((__pyx_v_ndim + 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 870, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyNumber_Multiply(__pyx_t_6, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 870, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 870, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 870, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_5)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 870, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":871
 *     assert(key_split_map.size == val_split_map.size*(ndim+1))
 *     assert(key_inf_map.size == val_inf_map.size*(ndim+1))
 *     assert(leaf_verts.size == leaf_neigh.size)             # <<<<<<<<<<<<<<
 *     if all_verts.shape[0] == 0 or leaf_verts.shape[0] == 0:
 *         return ncells, (key_split_map, val_split_map), (key_inf_map, val_inf_map)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_leaf_verts), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 871, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_leaf_neigh), __pyx_n_s_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 871, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 871, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 871, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_5)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 871, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":872
 *     assert(key_inf_map.size == val_inf_map.size*(ndim+1))
 *     assert(leaf_verts.size == leaf_neigh.size)
 *     if all_verts.shape[0] == 0 or leaf_verts.shape[0] == 0:             # <<<<<<<<<<<<<<
 *         return ncells, (key_split_map, val_split_map), (key_inf_map, val_inf_map)
 *     t1 = time.time()
 */
  __pyx_t_7 = (((__pyx_v_all_verts->dimensions[0]) == 0) != 0);
  if (!__pyx_t_7) {
  } else {
    __pyx_t_5 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_7 = (((__pyx_v_leaf_verts->dimensions[0]) == 0) != 0);
  __pyx_t_5 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_5) {

    /* "cgal4py/delaunay/tools.pyx":873
 *     assert(leaf_verts.size == leaf_neigh.size)
 *     if all_verts.shape[0] == 0 or leaf_verts.shape[0] == 0:
 *         return ncells, (key_split_map, val_split_map), (key_inf_map, val_inf_map)             # <<<<<<<<<<<<<<
 *     t1 = time.time()
 *     print("Assertions took {} s".format(t1-t0))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_npy_uint64(__pyx_v_ncells); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 873, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 873, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)__pyx_v_key_split_map));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_key_split_map));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_key_split_map));
    __Pyx_INCREF(((PyObject *)__pyx_v_val_split_map));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_val_split_map));
    PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_val_split_map));
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 873, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)__pyx_v_key_inf_map));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_key_inf_map));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_key_inf_map));
    __Pyx_INCREF(((PyObject *)__pyx_v_val_inf_map));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_val_inf_map));
    PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_val_inf_map));
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 873, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "cgal4py/delaunay/tools.pyx":872
 *     assert(key_inf_map.size == val_inf_map.size*(ndim+1))
 *     assert(leaf_verts.size == leaf_neigh.size)
 *     if all_verts.shape[0] == 0 or leaf_verts.shape[0] == 0:             # <<<<<<<<<<<<<<
 *         return ncells, (key_split_map, val_split_map), (key_inf_map, val_inf_map)
 *     t1 = time.time()
 */
  }

  /* "cgal4py/delaunay/tools.pyx":874
 *     if all_verts.shape[0] == 0 or leaf_verts.shape[0] == 0:
 *         return ncells, (key_split_map, val_split_map), (key_inf_map, val_inf_map)
 *     t1 = time.time()             # <<<<<<<<<<<<<<
 *     print("Assertions took {} s".format(t1-t0))
 *     # Variables from sizes
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 874, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 874, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 874, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 874, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_6); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 874, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_t1 = __pyx_t_4;

  /* "cgal4py/delaunay/tools.pyx":875
 *         return ncells, (key_split_map, val_split_map), (key_inf_map, val_inf_map)
 *     t1 = time.time()
 *     print("Assertions took {} s".format(t1-t0))             # <<<<<<<<<<<<<<
 *     # Variables from sizes
 *     cdef uint64_t num_leaves = <uint64_t>leaf_start.size
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Assertions_took_s, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_t1 - __pyx_v_t0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 875, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_1};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 875, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_1};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 875, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 875, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 875, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_6) < 0) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "cgal4py/delaunay/tools.pyx":877
 *     print("Assertions took {} s".format(t1-t0))
 *     # Variables from sizes
 *     cdef uint64_t num_leaves = <uint64_t>leaf_start.size             # <<<<<<<<<<<<<<
 *     cdef int64_t max_ncells = <int64_t>all_verts.shape[0]
 *     cdef uint64_t n_split_map = <uint64_t>val_split_map.size
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_leaf_start), __pyx_n_s_size); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 877, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_9 = __Pyx_PyInt_As_uint64_t(__pyx_t_6); if (unlikely((__pyx_t_9 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 877, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_num_leaves = ((uint64_t)__pyx_t_9);

  /* "cgal4py/delaunay/tools.pyx":878
 *     # Variables from sizes
 *     cdef uint64_t num_leaves = <uint64_t>leaf_start.size
 *     cdef int64_t max_ncells = <int64_t>all_verts.shape[0]             # <<<<<<<<<<<<<<
 *     cdef uint64_t n_split_map = <uint64_t>val_split_map.size
 *     cdef uint64_t n_inf_map = <uint64_t>val_inf_map.size
 */
  __pyx_v_max_ncells = ((int64_t)(__pyx_v_all_verts->dimensions[0]));

  /* "cgal4py/delaunay/tools.pyx":879
 *     cdef uint64_t num_leaves = <uint64_t>leaf_start.size
 *     cdef int64_t max_ncells = <int64_t>all_verts.shape[0]
 *     cdef uint64_t n_split_map = <uint64_t>val_split_map.size             # <<<<<<<<<<<<<<
 *     cdef uint64_t n_inf_map = <uint64_t>val_inf_map.size
 *     cdef int64_t leaf_ncells = <int64_t>leaf_verts.shape[0]
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_val_split_map), __pyx_n_s_size); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_9 = __Pyx_PyInt_As_uint64_t(__pyx_t_6); if (unlikely((__pyx_t_9 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 879, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_n_split_map = ((uint64_t)__pyx_t_9);

  /* "cgal4py/delaunay/tools.pyx":880
 *     cdef int64_t max_ncells = <int64_t>all_verts.shape[0]
 *     cdef uint64_t n_split_map = <uint64_t>val_split_map.size
 *     cdef uint64_t n_inf_map = <uint64_t>val_inf_map.size             # <<<<<<<<<<<<<<
 *     cdef int64_t leaf_ncells = <int64_t>leaf_verts.shape[0]
 *     # Create a serialized leaf object
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_val_inf_map), __pyx_n_s_size); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_9 = __Pyx_PyInt_As_uint64_t(__pyx_t_6); if (unlikely((__pyx_t_9 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 880, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_n_inf_map = ((uint64_t)__pyx_t_9);

  /* "cgal4py/delaunay/tools.pyx":881
 *     cdef uint64_t n_split_map = <uint64_t>val_split_map.size
 *     cdef uint64_t n_inf_map = <uint64_t>val_inf_map.size
 *     cdef int64_t leaf_ncells = <int64_t>leaf_verts.shape[0]             # <<<<<<<<<<<<<<
 *     # Create a serialized leaf object
 *     t0 = time.time()
 */
  __pyx_v_leaf_ncells = ((int64_t)(__pyx_v_leaf_verts->dimensions[0]));

  /* "cgal4py/delaunay/tools.pyx":883
 *     cdef int64_t leaf_ncells = <int64_t>leaf_verts.shape[0]
 *     # Create a serialized leaf object
 *     t0 = time.time()             # <<<<<<<<<<<<<<
 *     cdef sLeaf32 leaf = sLeaf32(leaf_id, ndim, leaf_ncells, leaf_idx_inf,
 *                                 &leaf_verts[0,0], &leaf_neigh[0,0],
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_time); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 883, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 883, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_6); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 883, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_t0 = __pyx_t_4;

  /* "cgal4py/delaunay/tools.pyx":885
 *     t0 = time.time()
 *     cdef sLeaf32 leaf = sLeaf32(leaf_id, ndim, leaf_ncells, leaf_idx_inf,
 *                                 &leaf_verts[0,0], &leaf_neigh[0,0],             # <<<<<<<<<<<<<<
 *                                 &leaf_sort_verts[0,0], &leaf_sort_cells[0],
 *                                 leaf_start[leaf_id], leaf_stop[leaf_id])
 */
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;

  /* "cgal4py/delaunay/tools.pyx":886
 *     cdef sLeaf32 leaf = sLeaf32(leaf_id, ndim, leaf_ncells, leaf_idx_inf,
 *                                 &leaf_verts[0,0], &leaf_neigh[0,0],
 *                                 &leaf_sort_verts[0,0], &leaf_sort_cells[0],             # <<<<<<<<<<<<<<
 *                                 leaf_start[leaf_id], leaf_stop[leaf_id])
 *     t1 = time.time()
 */
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_t_16 = 0;

  /* "cgal4py/delaunay/tools.pyx":887
 *                                 &leaf_verts[0,0], &leaf_neigh[0,0],
 *                                 &leaf_sort_verts[0,0], &leaf_sort_cells[0],
 *                                 leaf_start[leaf_id], leaf_stop[leaf_id])             # <<<<<<<<<<<<<<
 *     t1 = time.time()
 *     print("Creating the leaf took {} s".format(t1-t0))
 */
  __pyx_t_17 = __pyx_v_leaf_id;
  __pyx_t_18 = __pyx_v_leaf_id;

  /* "cgal4py/delaunay/tools.pyx":884
 *     # Create a serialized leaf object
 *     t0 = time.time()
 *     cdef sLeaf32 leaf = sLeaf32(leaf_id, ndim, leaf_ncells, leaf_idx_inf,             # <<<<<<<<<<<<<<
 *                                 &leaf_verts[0,0], &leaf_neigh[0,0],
 *                                 &leaf_sort_verts[0,0], &leaf_sort_cells[0],
 */
  try {
    __pyx_t_19 = __pyx_t_7cgal4py_8delaunay_5tools_sLeaf32(__pyx_v_leaf_id, __pyx_v_ndim, __pyx_v_leaf_ncells, __pyx_v_leaf_idx_inf, (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_leaf_verts.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_leaf_verts.diminfo[0].strides, __pyx_t_11, __pyx_pybuffernd_leaf_verts.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_leaf_neigh.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_leaf_neigh.diminfo[0].strides, __pyx_t_13, __pyx_pybuffernd_leaf_neigh.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_leaf_sort_verts.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_leaf_sort_verts.diminfo[0].strides, __pyx_t_15, __pyx_pybuffernd_leaf_sort_verts.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_leaf_sort_cells.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_leaf_sort_cells.diminfo[0].strides))), (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_leaf_start.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_leaf_start.diminfo[0].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_leaf_stop.rcbuffer->pybuffer.buf, __pyx_t_18, __pyx_pybuffernd_leaf_stop.diminfo[0].strides)));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 884, __pyx_L1_error)
  }
  __pyx_v_leaf = __pyx_t_19;

  /* "cgal4py/delaunay/tools.pyx":888
 *                                 &leaf_sort_verts[0,0], &leaf_sort_cells[0],
 *                                 leaf_start[leaf_id], leaf_stop[leaf_id])
 *     t1 = time.time()             # <<<<<<<<<<<<<<
 *     print("Creating the leaf took {} s".format(t1-t0))
 *     # Create consolidated leaves object
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 888, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 888, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_8) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 888, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else {
    __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 888, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_6); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 888, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_t1 = __pyx_t_4;

  /* "cgal4py/delaunay/tools.pyx":889
 *                                 leaf_start[leaf_id], leaf_stop[leaf_id])
 *     t1 = time.time()
 *     print("Creating the leaf took {} s".format(t1-t0))             # <<<<<<<<<<<<<<
 *     # Create consolidated leaves object
 *     cdef ConsolidatedLeaves[uint32_t] obj
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Creating_the_leaf_took_s, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = PyFloat_FromDouble((__pyx_v_t1 - __pyx_v_t0)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 889, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_8};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 889, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_8};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 889, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1); __pyx_t_1 = NULL;
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_6) < 0) __PYX_ERR(0, 889, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "cgal4py/delaunay/tools.pyx":893
 *     cdef ConsolidatedLeaves[uint32_t] obj
 *     cdef uint64_t i
 *     t0 = time.time()             # <<<<<<<<<<<<<<
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         obj = ConsolidatedLeaves[uint32_t](
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 893, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 893, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_6); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_t0 = __pyx_t_4;

  /* "cgal4py/delaunay/tools.pyx":894
 *     cdef uint64_t i
 *     t0 = time.time()
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         obj = ConsolidatedLeaves[uint32_t](
 *             ndim, ncells, idx_inf, max_ncells,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":897
 *         obj = ConsolidatedLeaves[uint32_t](
 *             ndim, ncells, idx_inf, max_ncells,
 *             &all_verts[0,0], &all_neigh[0,0],             # <<<<<<<<<<<<<<
 *             n_split_map, &key_split_map[0,0], &val_split_map[0],
 *             n_inf_map, &key_inf_map[0,0], &val_inf_map[0])
 */
        __pyx_t_20 = 0;
        __pyx_t_21 = 0;
        __pyx_t_22 = 0;
        __pyx_t_23 = 0;

        /* "cgal4py/delaunay/tools.pyx":898
 *             ndim, ncells, idx_inf, max_ncells,
 *             &all_verts[0,0], &all_neigh[0,0],
 *             n_split_map, &key_split_map[0,0], &val_split_map[0],             # <<<<<<<<<<<<<<
 *             n_inf_map, &key_inf_map[0,0], &val_inf_map[0])
 *     t1 = time.time()
 */
        __pyx_t_24 = 0;
        __pyx_t_25 = 0;
        __pyx_t_26 = 0;

        /* "cgal4py/delaunay/tools.pyx":899
 *             &all_verts[0,0], &all_neigh[0,0],
 *             n_split_map, &key_split_map[0,0], &val_split_map[0],
 *             n_inf_map, &key_inf_map[0,0], &val_inf_map[0])             # <<<<<<<<<<<<<<
 *     t1 = time.time()
 *     print("Initialization of consolidated leaves took {} s".format(t1-t0))
 */
        __pyx_t_27 = 0;
        __pyx_t_28 = 0;
        __pyx_t_29 = 0;

        /* "cgal4py/delaunay/tools.pyx":895
 *     t0 = time.time()
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         obj = ConsolidatedLeaves[uint32_t](             # <<<<<<<<<<<<<<
 *             ndim, ncells, idx_inf, max_ncells,
 *             &all_verts[0,0], &all_neigh[0,0],
 */
        try {
          __pyx_t_30 = ConsolidatedLeaves<uint32_t> (__pyx_v_ndim, __pyx_v_ncells, __pyx_v_idx_inf, __pyx_v_max_ncells, (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_all_verts.rcbuffer->pybuffer.buf, __pyx_t_20, __pyx_pybuffernd_all_verts.diminfo[0].strides, __pyx_t_21, __pyx_pybuffernd_all_verts.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_all_neigh.rcbuffer->pybuffer.buf, __pyx_t_22, __pyx_pybuffernd_all_neigh.diminfo[0].strides, __pyx_t_23, __pyx_pybuffernd_all_neigh.diminfo[1].strides))), __pyx_v_n_split_map, (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_key_split_map.rcbuffer->pybuffer.buf, __pyx_t_24, __pyx_pybuffernd_key_split_map.diminfo[0].strides, __pyx_t_25, __pyx_pybuffernd_key_split_map.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_val_split_map.rcbuffer->pybuffer.buf, __pyx_t_26, __pyx_pybuffernd_val_split_map.diminfo[0].strides))), __pyx_v_n_inf_map, (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_key_inf_map.rcbuffer->pybuffer.buf, __pyx_t_27, __pyx_pybuffernd_key_inf_map.diminfo[0].strides, __pyx_t_28, __pyx_pybuffernd_key_inf_map.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_val_inf_map.rcbuffer->pybuffer.buf, __pyx_t_29, __pyx_pybuffernd_val_inf_map.diminfo[0].strides))));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 895, __pyx_L7_error)
        }
        __pyx_v_obj = __pyx_t_30;
      }

      /* "cgal4py/delaunay/tools.pyx":894
 *     cdef uint64_t i
 *     t0 = time.time()
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         obj = ConsolidatedLeaves[uint32_t](
 *             ndim, ncells, idx_inf, max_ncells,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L8;
        }
        __pyx_L7_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L8:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":900
 *             n_split_map, &key_split_map[0,0], &val_split_map[0],
 *             n_inf_map, &key_inf_map[0,0], &val_inf_map[0])
 *     t1 = time.time()             # <<<<<<<<<<<<<<
 *     print("Initialization of consolidated leaves took {} s".format(t1-t0))
 *     # Insert leaf
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 900, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 900, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_6); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 900, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_t1 = __pyx_t_4;

  /* "cgal4py/delaunay/tools.pyx":901
 *             n_inf_map, &key_inf_map[0,0], &val_inf_map[0])
 *     t1 = time.time()
 *     print("Initialization of consolidated leaves took {} s".format(t1-t0))             # <<<<<<<<<<<<<<
 *     # Insert leaf
 *     t0 = time.time()
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Initialization_of_consolidated_l, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_t1 - __pyx_v_t0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 901, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_2};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 901, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_2};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 901, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 901, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_8); __pyx_t_8 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 901, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_6) < 0) __PYX_ERR(0, 901, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "cgal4py/delaunay/tools.pyx":903
 *     print("Initialization of consolidated leaves took {} s".format(t1-t0))
 *     # Insert leaf
 *     t0 = time.time()             # <<<<<<<<<<<<<<
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         obj.add_leaf[uint32_t](leaf)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 903, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 903, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_6); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 903, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_t0 = __pyx_t_4;

  /* "cgal4py/delaunay/tools.pyx":904
 *     # Insert leaf
 *     t0 = time.time()
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         obj.add_leaf[uint32_t](leaf)
 *     t1 = time.time()
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":905
 *     t0 = time.time()
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         obj.add_leaf[uint32_t](leaf)             # <<<<<<<<<<<<<<
 *     t1 = time.time()
 *     print("Adding leaf took {} s".format(t1-t0))
 */
        __pyx_v_obj.add_leaf<uint32_t>(__pyx_v_leaf);
      }

      /* "cgal4py/delaunay/tools.pyx":904
 *     # Insert leaf
 *     t0 = time.time()
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         obj.add_leaf[uint32_t](leaf)
 *     t1 = time.time()
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L11;
        }
        __pyx_L11:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":906
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         obj.add_leaf[uint32_t](leaf)
 *     t1 = time.time()             # <<<<<<<<<<<<<<
 *     print("Adding leaf took {} s".format(t1-t0))
 *     # Get map arrays
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 906, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 906, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_6); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 906, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_t1 = __pyx_t_4;

  /* "cgal4py/delaunay/tools.pyx":907
 *         obj.add_leaf[uint32_t](leaf)
 *     t1 = time.time()
 *     print("Adding leaf took {} s".format(t1-t0))             # <<<<<<<<<<<<<<
 *     # Get map arrays
 *     t0 = time.time()
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Adding_leaf_took_s, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_t1 - __pyx_v_t0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 907, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_1};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 907, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_1};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 907, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 907, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 907, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_6) < 0) __PYX_ERR(0, 907, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "cgal4py/delaunay/tools.pyx":909
 *     print("Adding leaf took {} s".format(t1-t0))
 *     # Get map arrays
 *     t0 = time.time()             # <<<<<<<<<<<<<<
 *     n_split_map = obj.size_split_map()
 *     cdef np.ndarray[np.uint64_t, ndim=1] val_split_map0
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_time); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 909, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 909, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_6); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 909, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_t0 = __pyx_t_4;

  /* "cgal4py/delaunay/tools.pyx":910
 *     # Get map arrays
 *     t0 = time.time()
 *     n_split_map = obj.size_split_map()             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.uint64_t, ndim=1] val_split_map0
 *     cdef np.ndarray[np.uint32_t, ndim=2] key_split_map0
 */
  __pyx_v_n_split_map = __pyx_v_obj.size_split_map();

  /* "cgal4py/delaunay/tools.pyx":913
 *     cdef np.ndarray[np.uint64_t, ndim=1] val_split_map0
 *     cdef np.ndarray[np.uint32_t, ndim=2] key_split_map0
 *     val_split_map0 = np.empty(n_split_map, 'uint64')             # <<<<<<<<<<<<<<
 *     key_split_map0 = np.empty((n_split_map, ndim+1), 'uint32')
 *     obj.get_split_map(&key_split_map0[0,0],&val_split_map0[0])
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyInt_From_uint64_t(__pyx_v_n_split_map); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = NULL;
  __pyx_t_31 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_31 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_t_8, __pyx_n_s_uint64};
    __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_31, 2+__pyx_t_31); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 913, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_t_8, __pyx_n_s_uint64};
    __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_31, 2+__pyx_t_31); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 913, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_2 = PyTuple_New(2+__pyx_t_31); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 913, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_31, __pyx_t_8);
    __Pyx_INCREF(__pyx_n_s_uint64);
    __Pyx_GIVEREF(__pyx_n_s_uint64);
    PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_31, __pyx_n_s_uint64);
    __pyx_t_8 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 913, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 913, __pyx_L1_error)
  __pyx_t_32 = ((PyArrayObject *)__pyx_t_6);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_val_split_map0.rcbuffer->pybuffer);
    __pyx_t_31 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_val_split_map0.rcbuffer->pybuffer, (PyObject*)__pyx_t_32, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_31 < 0)) {
      PyErr_Fetch(&__pyx_t_33, &__pyx_t_34, &__pyx_t_35);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_val_split_map0.rcbuffer->pybuffer, (PyObject*)__pyx_v_val_split_map0, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_33); Py_XDECREF(__pyx_t_34); Py_XDECREF(__pyx_t_35);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_33, __pyx_t_34, __pyx_t_35);
      }
      __pyx_t_33 = __pyx_t_34 = __pyx_t_35 = 0;
    }
    __pyx_pybuffernd_val_split_map0.diminfo[0].strides = __pyx_pybuffernd_val_split_map0.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_val_split_map0.diminfo[0].shape = __pyx_pybuffernd_val_split_map0.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_31 < 0)) __PYX_ERR(0, 913, __pyx_L1_error)
  }
  __pyx_t_32 = 0;
  __pyx_v_val_split_map0 = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "cgal4py/delaunay/tools.pyx":914
 *     cdef np.ndarray[np.uint32_t, ndim=2] key_split_map0
 *     val_split_map0 = np.empty(n_split_map, 'uint64')
 *     key_split_map0 = np.empty((n_split_map, ndim+1), 'uint32')             # <<<<<<<<<<<<<<
 *     obj.get_split_map(&key_split_map0[0,0],&val_split_map0[0])
 *     # val_split_map.resize(n_split_map, refcheck=False)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_uint64_t(__pyx_v_n_split_map); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyInt_From_long((__pyx_v_ndim + 1)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_8);
  __pyx_t_3 = 0;
  __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_31 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_31 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_1, __pyx_n_s_uint32};
    __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_31, 2+__pyx_t_31); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 914, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_1, __pyx_n_s_uint32};
    __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_31, 2+__pyx_t_31); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 914, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_31); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 914, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_31, __pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_uint32);
    __Pyx_GIVEREF(__pyx_n_s_uint32);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_31, __pyx_n_s_uint32);
    __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 914, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 914, __pyx_L1_error)
  __pyx_t_36 = ((PyArrayObject *)__pyx_t_6);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_key_split_map0.rcbuffer->pybuffer);
    __pyx_t_31 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_key_split_map0.rcbuffer->pybuffer, (PyObject*)__pyx_t_36, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_31 < 0)) {
      PyErr_Fetch(&__pyx_t_35, &__pyx_t_34, &__pyx_t_33);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_key_split_map0.rcbuffer->pybuffer, (PyObject*)__pyx_v_key_split_map0, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_35); Py_XDECREF(__pyx_t_34); Py_XDECREF(__pyx_t_33);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_35, __pyx_t_34, __pyx_t_33);
      }
      __pyx_t_35 = __pyx_t_34 = __pyx_t_33 = 0;
    }
    __pyx_pybuffernd_key_split_map0.diminfo[0].strides = __pyx_pybuffernd_key_split_map0.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_key_split_map0.diminfo[0].shape = __pyx_pybuffernd_key_split_map0.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_key_split_map0.diminfo[1].strides = __pyx_pybuffernd_key_split_map0.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_key_split_map0.diminfo[1].shape = __pyx_pybuffernd_key_split_map0.rcbuffer->pybuffer.shape[1];
    if (unlikely(__pyx_t_31 < 0)) __PYX_ERR(0, 914, __pyx_L1_error)
  }
  __pyx_t_36 = 0;
  __pyx_v_key_split_map0 = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "cgal4py/delaunay/tools.pyx":915
 *     val_split_map0 = np.empty(n_split_map, 'uint64')
 *     key_split_map0 = np.empty((n_split_map, ndim+1), 'uint32')
 *     obj.get_split_map(&key_split_map0[0,0],&val_split_map0[0])             # <<<<<<<<<<<<<<
 *     # val_split_map.resize(n_split_map, refcheck=False)
 *     # key_split_map.resize(n_split_map, ndim+1, refcheck=False)
 */
  __pyx_t_37 = 0;
  __pyx_t_38 = 0;
  __pyx_t_39 = 0;
  __pyx_v_obj.get_split_map((&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_key_split_map0.rcbuffer->pybuffer.buf, __pyx_t_37, __pyx_pybuffernd_key_split_map0.diminfo[0].strides, __pyx_t_38, __pyx_pybuffernd_key_split_map0.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_val_split_map0.rcbuffer->pybuffer.buf, __pyx_t_39, __pyx_pybuffernd_val_split_map0.diminfo[0].strides))));

  /* "cgal4py/delaunay/tools.pyx":919
 *     # key_split_map.resize(n_split_map, ndim+1, refcheck=False)
 *     # obj.get_split_map(&key_split_map[0,0],&val_split_map[0])
 *     n_inf_map = obj.size_inf_map()             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.uint64_t, ndim=1] val_inf_map0
 *     cdef np.ndarray[np.uint32_t, ndim=2] key_inf_map0
 */
  __pyx_v_n_inf_map = __pyx_v_obj.size_inf_map();

  /* "cgal4py/delaunay/tools.pyx":922
 *     cdef np.ndarray[np.uint64_t, ndim=1] val_inf_map0
 *     cdef np.ndarray[np.uint32_t, ndim=2] key_inf_map0
 *     val_inf_map0 = np.empty(n_inf_map, 'uint64')             # <<<<<<<<<<<<<<
 *     key_inf_map0 = np.empty((n_inf_map, ndim+1), 'uint32')
 *     obj.get_inf_map(&key_inf_map0[0,0],&val_inf_map0[0])
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_uint64_t(__pyx_v_n_inf_map); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  __pyx_t_31 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_31 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_t_2, __pyx_n_s_uint64};
    __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_31, 2+__pyx_t_31); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 922, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_t_2, __pyx_n_s_uint64};
    __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_31, 2+__pyx_t_31); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 922, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_31); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 922, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_31, __pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_uint64);
    __Pyx_GIVEREF(__pyx_n_s_uint64);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_31, __pyx_n_s_uint64);
    __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 922, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 922, __pyx_L1_error)
  __pyx_t_40 = ((PyArrayObject *)__pyx_t_6);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_val_inf_map0.rcbuffer->pybuffer);
    __pyx_t_31 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_val_inf_map0.rcbuffer->pybuffer, (PyObject*)__pyx_t_40, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_31 < 0)) {
      PyErr_Fetch(&__pyx_t_33, &__pyx_t_34, &__pyx_t_35);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_val_inf_map0.rcbuffer->pybuffer, (PyObject*)__pyx_v_val_inf_map0, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_33); Py_XDECREF(__pyx_t_34); Py_XDECREF(__pyx_t_35);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_33, __pyx_t_34, __pyx_t_35);
      }
      __pyx_t_33 = __pyx_t_34 = __pyx_t_35 = 0;
    }
    __pyx_pybuffernd_val_inf_map0.diminfo[0].strides = __pyx_pybuffernd_val_inf_map0.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_val_inf_map0.diminfo[0].shape = __pyx_pybuffernd_val_inf_map0.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_31 < 0)) __PYX_ERR(0, 922, __pyx_L1_error)
  }
  __pyx_t_40 = 0;
  __pyx_v_val_inf_map0 = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "cgal4py/delaunay/tools.pyx":923
 *     cdef np.ndarray[np.uint32_t, ndim=2] key_inf_map0
 *     val_inf_map0 = np.empty(n_inf_map, 'uint64')
 *     key_inf_map0 = np.empty((n_inf_map, ndim+1), 'uint32')             # <<<<<<<<<<<<<<
 *     obj.get_inf_map(&key_inf_map0[0,0],&val_inf_map0[0])
 *     # val_inf_map.resize(n_inf_map, refcheck=False)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_uint64_t(__pyx_v_n_inf_map); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_v_ndim + 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_31 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_31 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_1, __pyx_n_s_uint32};
    __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_31, 2+__pyx_t_31); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 923, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_1, __pyx_n_s_uint32};
    __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_31, 2+__pyx_t_31); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 923, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_31); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 923, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_31, __pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_uint32);
    __Pyx_GIVEREF(__pyx_n_s_uint32);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_31, __pyx_n_s_uint32);
    __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 923, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 923, __pyx_L1_error)
  __pyx_t_41 = ((PyArrayObject *)__pyx_t_6);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_key_inf_map0.rcbuffer->pybuffer);
    __pyx_t_31 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_key_inf_map0.rcbuffer->pybuffer, (PyObject*)__pyx_t_41, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_31 < 0)) {
      PyErr_Fetch(&__pyx_t_35, &__pyx_t_34, &__pyx_t_33);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_key_inf_map0.rcbuffer->pybuffer, (PyObject*)__pyx_v_key_inf_map0, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_35); Py_XDECREF(__pyx_t_34); Py_XDECREF(__pyx_t_33);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_35, __pyx_t_34, __pyx_t_33);
      }
      __pyx_t_35 = __pyx_t_34 = __pyx_t_33 = 0;
    }
    __pyx_pybuffernd_key_inf_map0.diminfo[0].strides = __pyx_pybuffernd_key_inf_map0.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_key_inf_map0.diminfo[0].shape = __pyx_pybuffernd_key_inf_map0.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_key_inf_map0.diminfo[1].strides = __pyx_pybuffernd_key_inf_map0.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_key_inf_map0.diminfo[1].shape = __pyx_pybuffernd_key_inf_map0.rcbuffer->pybuffer.shape[1];
    if (unlikely(__pyx_t_31 < 0)) __PYX_ERR(0, 923, __pyx_L1_error)
  }
  __pyx_t_41 = 0;
  __pyx_v_key_inf_map0 = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "cgal4py/delaunay/tools.pyx":924
 *     val_inf_map0 = np.empty(n_inf_map, 'uint64')
 *     key_inf_map0 = np.empty((n_inf_map, ndim+1), 'uint32')
 *     obj.get_inf_map(&key_inf_map0[0,0],&val_inf_map0[0])             # <<<<<<<<<<<<<<
 *     # val_inf_map.resize(n_inf_map, refcheck=False)
 *     # key_inf_map.resize(n_inf_map, ndim+1, refcheck=False)
 */
  __pyx_t_42 = 0;
  __pyx_t_43 = 0;
  __pyx_t_44 = 0;
  __pyx_v_obj.get_inf_map((&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_key_inf_map0.rcbuffer->pybuffer.buf, __pyx_t_42, __pyx_pybuffernd_key_inf_map0.diminfo[0].strides, __pyx_t_43, __pyx_pybuffernd_key_inf_map0.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_val_inf_map0.rcbuffer->pybuffer.buf, __pyx_t_44, __pyx_pybuffernd_val_inf_map0.diminfo[0].strides))));

  /* "cgal4py/delaunay/tools.pyx":928
 *     # key_inf_map.resize(n_inf_map, ndim+1, refcheck=False)
 *     # obj.get_inf_map(&key_inf_map[0,0],&val_inf_map[0])
 *     t1 = time.time()             # <<<<<<<<<<<<<<
 *     print("Getting map arrays took {} s".format(t1-t0))
 *     # Clean up things allocated during initialization
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 928, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 928, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_8) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 928, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else {
    __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 928, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_6); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 928, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_t1 = __pyx_t_4;

  /* "cgal4py/delaunay/tools.pyx":929
 *     # obj.get_inf_map(&key_inf_map[0,0],&val_inf_map[0])
 *     t1 = time.time()
 *     print("Getting map arrays took {} s".format(t1-t0))             # <<<<<<<<<<<<<<
 *     # Clean up things allocated during initialization
 *     t0 = time.time()
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Getting_map_arrays_took_s, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = PyFloat_FromDouble((__pyx_v_t1 - __pyx_v_t0)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 929, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_8};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 929, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_8};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 929, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 929, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1); __pyx_t_1 = NULL;
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 929, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_6) < 0) __PYX_ERR(0, 929, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "cgal4py/delaunay/tools.pyx":931
 *     print("Getting map arrays took {} s".format(t1-t0))
 *     # Clean up things allocated during initialization
 *     t0 = time.time()             # <<<<<<<<<<<<<<
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         obj.cleanup()
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 931, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_6); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 931, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_t0 = __pyx_t_4;

  /* "cgal4py/delaunay/tools.pyx":932
 *     # Clean up things allocated during initialization
 *     t0 = time.time()
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         obj.cleanup()
 *     t1 = time.time()
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":933
 *     t0 = time.time()
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         obj.cleanup()             # <<<<<<<<<<<<<<
 *     t1 = time.time()
 *     print("Clean up took {} s".format(t1-t0))
 */
        __pyx_v_obj.cleanup();
      }

      /* "cgal4py/delaunay/tools.pyx":932
 *     # Clean up things allocated during initialization
 *     t0 = time.time()
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         obj.cleanup()
 *     t1 = time.time()
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L14;
        }
        __pyx_L14:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":934
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         obj.cleanup()
 *     t1 = time.time()             # <<<<<<<<<<<<<<
 *     print("Clean up took {} s".format(t1-t0))
 *     ncells = obj.ncells
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 934, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 934, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_6); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 934, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_t1 = __pyx_t_4;

  /* "cgal4py/delaunay/tools.pyx":935
 *         obj.cleanup()
 *     t1 = time.time()
 *     print("Clean up took {} s".format(t1-t0))             # <<<<<<<<<<<<<<
 *     ncells = obj.ncells
 *     return ncells, (key_split_map0, val_split_map0), (key_inf_map0, val_inf_map0)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Clean_up_took_s, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_t1 - __pyx_v_t0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 935, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_2};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 935, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_2};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 935, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 935, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_8); __pyx_t_8 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 935, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_6) < 0) __PYX_ERR(0, 935, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "cgal4py/delaunay/tools.pyx":936
 *     t1 = time.time()
 *     print("Clean up took {} s".format(t1-t0))
 *     ncells = obj.ncells             # <<<<<<<<<<<<<<
 *     return ncells, (key_split_map0, val_split_map0), (key_inf_map0, val_inf_map0)
 *     # return ncells, (key_split_map, val_split_map), (key_inf_map, val_inf_map)
 */
  __pyx_t_45 = __pyx_v_obj.ncells;
  __pyx_v_ncells = __pyx_t_45;

  /* "cgal4py/delaunay/tools.pyx":937
 *     print("Clean up took {} s".format(t1-t0))
 *     ncells = obj.ncells
 *     return ncells, (key_split_map0, val_split_map0), (key_inf_map0, val_inf_map0)             # <<<<<<<<<<<<<<
 *     # return ncells, (key_split_map, val_split_map), (key_inf_map, val_inf_map)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyInt_From_npy_uint64(__pyx_v_ncells); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_key_split_map0));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_key_split_map0));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_key_split_map0));
  __Pyx_INCREF(((PyObject *)__pyx_v_val_split_map0));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_val_split_map0));
  PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_val_split_map0));
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_key_inf_map0));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_key_inf_map0));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_key_inf_map0));
  __Pyx_INCREF(((PyObject *)__pyx_v_val_inf_map0));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_val_inf_map0));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_val_inf_map0));
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_1);
  __pyx_t_6 = 0;
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cgal4py/delaunay/tools.pyx":850
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _add_leaf_uint32_uint32(np.uint32_t ndim, np.uint64_t ncells, np.uint32_t idx_inf,             # <<<<<<<<<<<<<<
 *                             np.ndarray[np.uint32_t, ndim=2] all_verts,
 *                             np.ndarray[np.uint32_t, ndim=2] all_neigh,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_all_neigh.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_all_verts.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_key_inf_map.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_key_inf_map0.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_key_split_map.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_key_split_map0.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_leaf_neigh.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_leaf_sort_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_leaf_sort_verts.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_leaf_start.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_leaf_stop.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_leaf_verts.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_val_inf_map.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_val_inf_map0.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_val_split_map.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_val_split_map0.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cgal4py.delaunay.tools._add_leaf_uint32_uint32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_all_neigh.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_all_verts.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_key_inf_map.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_key_inf_map0.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_key_split_map.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_key_split_map0.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_leaf_neigh.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_leaf_sort_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_leaf_sort_verts.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_leaf_start.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_leaf_stop.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_leaf_verts.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_val_inf_map.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_val_inf_map0.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_val_split_map.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_val_split_map0.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_val_split_map0);
  __Pyx_XDECREF((PyObject *)__pyx_v_key_split_map0);
  __Pyx_XDECREF((PyObject *)__pyx_v_val_inf_map0);
  __Pyx_XDECREF((PyObject *)__pyx_v_key_inf_map0);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":940
 *     # return ncells, (key_split_map, val_split_map), (key_inf_map, val_inf_map)
 * 
 * def add_leaf(ndim, ncells, idx_inf, all_verts, all_neigh, leaf_start, leaf_stop,             # <<<<<<<<<<<<<<
 *              key_split_map, val_split_map, key_inf_map, val_inf_map,
 *              leaf_id, leaf_idx_inf, leaf_verts, leaf_neigh,
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_51add_leaf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7cgal4py_8delaunay_5tools_51add_leaf = {"add_leaf", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_51add_leaf, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_51add_leaf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ndim = 0;
  PyObject *__pyx_v_ncells = 0;
  PyObject *__pyx_v_idx_inf = 0;
  PyObject *__pyx_v_all_verts = 0;
  PyObject *__pyx_v_all_neigh = 0;
  PyObject *__pyx_v_leaf_start = 0;
  PyObject *__pyx_v_leaf_stop = 0;
  PyObject *__pyx_v_key_split_map = 0;
  PyObject *__pyx_v_val_split_map = 0;
  PyObject *__pyx_v_key_inf_map = 0;
  PyObject *__pyx_v_val_inf_map = 0;
  PyObject *__pyx_v_leaf_id = 0;
  PyObject *__pyx_v_leaf_idx_inf = 0;
  PyObject *__pyx_v_leaf_verts = 0;
  PyObject *__pyx_v_leaf_neigh = 0;
  PyObject *__pyx_v_leaf_sort_verts = 0;
  PyObject *__pyx_v_leaf_sort_cells = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_leaf (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ndim,&__pyx_n_s_ncells,&__pyx_n_s_idx_inf,&__pyx_n_s_all_verts,&__pyx_n_s_all_neigh,&__pyx_n_s_leaf_start,&__pyx_n_s_leaf_stop,&__pyx_n_s_key_split_map,&__pyx_n_s_val_split_map,&__pyx_n_s_key_inf_map,&__pyx_n_s_val_inf_map,&__pyx_n_s_leaf_id,&__pyx_n_s_leaf_idx_inf,&__pyx_n_s_leaf_verts,&__pyx_n_s_leaf_neigh,&__pyx_n_s_leaf_sort_verts,&__pyx_n_s_leaf_sort_cells,0};
    PyObject* values[17] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ndim)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ncells)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_leaf", 1, 17, 17, 1); __PYX_ERR(0, 940, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx_inf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_leaf", 1, 17, 17, 2); __PYX_ERR(0, 940, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_all_verts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_leaf", 1, 17, 17, 3); __PYX_ERR(0, 940, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_all_neigh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_leaf", 1, 17, 17, 4); __PYX_ERR(0, 940, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_leaf_start)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_leaf", 1, 17, 17, 5); __PYX_ERR(0, 940, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_leaf_stop)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_leaf", 1, 17, 17, 6); __PYX_ERR(0, 940, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key_split_map)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_leaf", 1, 17, 17, 7); __PYX_ERR(0, 940, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_val_split_map)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_leaf", 1, 17, 17, 8); __PYX_ERR(0, 940, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key_inf_map)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_leaf", 1, 17, 17, 9); __PYX_ERR(0, 940, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_val_inf_map)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_leaf", 1, 17, 17, 10); __PYX_ERR(0, 940, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_leaf_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_leaf", 1, 17, 17, 11); __PYX_ERR(0, 940, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_leaf_idx_inf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_leaf", 1, 17, 17, 12); __PYX_ERR(0, 940, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_leaf_verts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_leaf", 1, 17, 17, 13); __PYX_ERR(0, 940, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (likely((values[14] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_leaf_neigh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_leaf", 1, 17, 17, 14); __PYX_ERR(0, 940, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (likely((values[15] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_leaf_sort_verts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_leaf", 1, 17, 17, 15); __PYX_ERR(0, 940, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 16:
        if (likely((values[16] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_leaf_sort_cells)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_leaf", 1, 17, 17, 16); __PYX_ERR(0, 940, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_leaf") < 0)) __PYX_ERR(0, 940, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 17) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
      values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
    }
    __pyx_v_ndim = values[0];
    __pyx_v_ncells = values[1];
    __pyx_v_idx_inf = values[2];
    __pyx_v_all_verts = values[3];
    __pyx_v_all_neigh = values[4];
    __pyx_v_leaf_start = values[5];
    __pyx_v_leaf_stop = values[6];
    __pyx_v_key_split_map = values[7];
    __pyx_v_val_split_map = values[8];
    __pyx_v_key_inf_map = values[9];
    __pyx_v_val_inf_map = values[10];
    __pyx_v_leaf_id = values[11];
    __pyx_v_leaf_idx_inf = values[12];
    __pyx_v_leaf_verts = values[13];
    __pyx_v_leaf_neigh = values[14];
    __pyx_v_leaf_sort_verts = values[15];
    __pyx_v_leaf_sort_cells = values[16];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_leaf", 1, 17, 17, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 940, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.add_leaf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_50add_leaf(__pyx_self, __pyx_v_ndim, __pyx_v_ncells, __pyx_v_idx_inf, __pyx_v_all_verts, __pyx_v_all_neigh, __pyx_v_leaf_start, __pyx_v_leaf_stop, __pyx_v_key_split_map, __pyx_v_val_split_map, __pyx_v_key_inf_map, __pyx_v_val_inf_map, __pyx_v_leaf_id, __pyx_v_leaf_idx_inf, __pyx_v_leaf_verts, __pyx_v_leaf_neigh, __pyx_v_leaf_sort_verts, __pyx_v_leaf_sort_cells);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_50add_leaf(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ndim, PyObject *__pyx_v_ncells, PyObject *__pyx_v_idx_inf, PyObject *__pyx_v_all_verts, PyObject *__pyx_v_all_neigh, PyObject *__pyx_v_leaf_start, PyObject *__pyx_v_leaf_stop, PyObject *__pyx_v_key_split_map, PyObject *__pyx_v_val_split_map, PyObject *__pyx_v_key_inf_map, PyObject *__pyx_v_val_inf_map, PyObject *__pyx_v_leaf_id, PyObject *__pyx_v_leaf_idx_inf, PyObject *__pyx_v_leaf_verts, PyObject *__pyx_v_leaf_neigh, PyObject *__pyx_v_leaf_sort_verts, PyObject *__pyx_v_leaf_sort_cells) {
  PyTypeObject *__pyx_v_dtype_comb = NULL;
  PyTypeObject *__pyx_v_dtype_leaf = NULL;
  PyObject *__pyx_v_t0 = NULL;
  PyObject *__pyx_v_split_map = NULL;
  PyObject *__pyx_v_inf_map = NULL;
  PyObject *__pyx_v_t1 = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  __Pyx_RefNannySetupContext("add_leaf", 0);
  __Pyx_INCREF(__pyx_v_ncells);
  __Pyx_INCREF(__pyx_v_key_split_map);
  __Pyx_INCREF(__pyx_v_val_split_map);
  __Pyx_INCREF(__pyx_v_key_inf_map);
  __Pyx_INCREF(__pyx_v_val_inf_map);

  /* "cgal4py/delaunay/tools.pyx":944
 *              leaf_id, leaf_idx_inf, leaf_verts, leaf_neigh,
 *              leaf_sort_verts, leaf_sort_cells):
 *     dtype_comb = type(idx_inf)             # <<<<<<<<<<<<<<
 *     dtype_leaf = type(leaf_idx_inf)
 *     t0 = time.time()
 */
  __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_idx_inf)));
  __pyx_v_dtype_comb = ((PyTypeObject*)((PyObject *)Py_TYPE(__pyx_v_idx_inf)));

  /* "cgal4py/delaunay/tools.pyx":945
 *              leaf_sort_verts, leaf_sort_cells):
 *     dtype_comb = type(idx_inf)
 *     dtype_leaf = type(leaf_idx_inf)             # <<<<<<<<<<<<<<
 *     t0 = time.time()
 *     if ncells == 0:
 */
  __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_leaf_idx_inf)));
  __pyx_v_dtype_leaf = ((PyTypeObject*)((PyObject *)Py_TYPE(__pyx_v_leaf_idx_inf)));

  /* "cgal4py/delaunay/tools.pyx":946
 *     dtype_comb = type(idx_inf)
 *     dtype_leaf = type(leaf_idx_inf)
 *     t0 = time.time()             # <<<<<<<<<<<<<<
 *     if ncells == 0:
 *         key_split_map = np.empty((0, ndim+1), dtype_comb)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 946, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 946, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_t0 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":947
 *     dtype_leaf = type(leaf_idx_inf)
 *     t0 = time.time()
 *     if ncells == 0:             # <<<<<<<<<<<<<<
 *         key_split_map = np.empty((0, ndim+1), dtype_comb)
 *         val_split_map = np.empty(0, 'uint64')
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_ncells, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 947, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "cgal4py/delaunay/tools.pyx":948
 *     t0 = time.time()
 *     if ncells == 0:
 *         key_split_map = np.empty((0, ndim+1), dtype_comb)             # <<<<<<<<<<<<<<
 *         val_split_map = np.empty(0, 'uint64')
 *         key_inf_map = np.empty((0, ndim+1), dtype_comb)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 948, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 948, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_ndim, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 948, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 948, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_5, ((PyObject *)__pyx_v_dtype_comb)};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 948, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_5, ((PyObject *)__pyx_v_dtype_comb)};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 948, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 948, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_5);
      __Pyx_INCREF(((PyObject *)__pyx_v_dtype_comb));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_dtype_comb));
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, ((PyObject *)__pyx_v_dtype_comb));
      __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 948, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_key_split_map, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "cgal4py/delaunay/tools.pyx":949
 *     if ncells == 0:
 *         key_split_map = np.empty((0, ndim+1), dtype_comb)
 *         val_split_map = np.empty(0, 'uint64')             # <<<<<<<<<<<<<<
 *         key_inf_map = np.empty((0, ndim+1), dtype_comb)
 *         val_inf_map = np.empty(0, 'uint64')
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_val_split_map, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "cgal4py/delaunay/tools.pyx":950
 *         key_split_map = np.empty((0, ndim+1), dtype_comb)
 *         val_split_map = np.empty(0, 'uint64')
 *         key_inf_map = np.empty((0, ndim+1), dtype_comb)             # <<<<<<<<<<<<<<
 *         val_inf_map = np.empty(0, 'uint64')
 *     if dtype_comb == np.uint32:
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 950, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 950, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_ndim, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 950, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 950, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_5, ((PyObject *)__pyx_v_dtype_comb)};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 950, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_5, ((PyObject *)__pyx_v_dtype_comb)};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 950, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 950, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_6, __pyx_t_5);
      __Pyx_INCREF(((PyObject *)__pyx_v_dtype_comb));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_dtype_comb));
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_6, ((PyObject *)__pyx_v_dtype_comb));
      __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 950, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_key_inf_map, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "cgal4py/delaunay/tools.pyx":951
 *         val_split_map = np.empty(0, 'uint64')
 *         key_inf_map = np.empty((0, ndim+1), dtype_comb)
 *         val_inf_map = np.empty(0, 'uint64')             # <<<<<<<<<<<<<<
 *     if dtype_comb == np.uint32:
 *         if dtype_leaf == np.uint32:
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 951, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 951, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 951, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_val_inf_map, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "cgal4py/delaunay/tools.pyx":947
 *     dtype_leaf = type(leaf_idx_inf)
 *     t0 = time.time()
 *     if ncells == 0:             # <<<<<<<<<<<<<<
 *         key_split_map = np.empty((0, ndim+1), dtype_comb)
 *         val_split_map = np.empty(0, 'uint64')
 */
  }

  /* "cgal4py/delaunay/tools.pyx":952
 *         key_inf_map = np.empty((0, ndim+1), dtype_comb)
 *         val_inf_map = np.empty(0, 'uint64')
 *     if dtype_comb == np.uint32:             # <<<<<<<<<<<<<<
 *         if dtype_leaf == np.uint32:
 *             ncells, split_map, inf_map = _add_leaf_uint32_uint32(
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_uint32); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_dtype_comb), __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 952, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 952, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "cgal4py/delaunay/tools.pyx":953
 *         val_inf_map = np.empty(0, 'uint64')
 *     if dtype_comb == np.uint32:
 *         if dtype_leaf == np.uint32:             # <<<<<<<<<<<<<<
 *             ncells, split_map, inf_map = _add_leaf_uint32_uint32(
 *                 ndim, ncells, idx_inf, all_verts, all_neigh, leaf_start, leaf_stop,
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 953, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_uint32); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 953, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_dtype_leaf), __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 953, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 953, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (likely(__pyx_t_4)) {

      /* "cgal4py/delaunay/tools.pyx":954
 *     if dtype_comb == np.uint32:
 *         if dtype_leaf == np.uint32:
 *             ncells, split_map, inf_map = _add_leaf_uint32_uint32(             # <<<<<<<<<<<<<<
 *                 ndim, ncells, idx_inf, all_verts, all_neigh, leaf_start, leaf_stop,
 *                 key_split_map, val_split_map, key_inf_map, val_inf_map,
 */
      __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_leaf_uint32_uint32); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 954, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);

      /* "cgal4py/delaunay/tools.pyx":958
 *                 key_split_map, val_split_map, key_inf_map, val_inf_map,
 *                 leaf_id, leaf_idx_inf, leaf_verts, leaf_neigh,
 *                 leaf_sort_verts, leaf_sort_cells)             # <<<<<<<<<<<<<<
 *         # This case makes no sense so it is not currently supported
 *         # elif dtype_leaf == np.uint64:
 */
      __pyx_t_3 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_6 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[18] = {__pyx_t_3, __pyx_v_ndim, __pyx_v_ncells, __pyx_v_idx_inf, __pyx_v_all_verts, __pyx_v_all_neigh, __pyx_v_leaf_start, __pyx_v_leaf_stop, __pyx_v_key_split_map, __pyx_v_val_split_map, __pyx_v_key_inf_map, __pyx_v_val_inf_map, __pyx_v_leaf_id, __pyx_v_leaf_idx_inf, __pyx_v_leaf_verts, __pyx_v_leaf_neigh, __pyx_v_leaf_sort_verts, __pyx_v_leaf_sort_cells};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_6, 17+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 954, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[18] = {__pyx_t_3, __pyx_v_ndim, __pyx_v_ncells, __pyx_v_idx_inf, __pyx_v_all_verts, __pyx_v_all_neigh, __pyx_v_leaf_start, __pyx_v_leaf_stop, __pyx_v_key_split_map, __pyx_v_val_split_map, __pyx_v_key_inf_map, __pyx_v_val_inf_map, __pyx_v_leaf_id, __pyx_v_leaf_idx_inf, __pyx_v_leaf_verts, __pyx_v_leaf_neigh, __pyx_v_leaf_sort_verts, __pyx_v_leaf_sort_cells};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_6, 17+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 954, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(17+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 954, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (__pyx_t_3) {
          __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
        }
        __Pyx_INCREF(__pyx_v_ndim);
        __Pyx_GIVEREF(__pyx_v_ndim);
        PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_6, __pyx_v_ndim);
        __Pyx_INCREF(__pyx_v_ncells);
        __Pyx_GIVEREF(__pyx_v_ncells);
        PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_6, __pyx_v_ncells);
        __Pyx_INCREF(__pyx_v_idx_inf);
        __Pyx_GIVEREF(__pyx_v_idx_inf);
        PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_6, __pyx_v_idx_inf);
        __Pyx_INCREF(__pyx_v_all_verts);
        __Pyx_GIVEREF(__pyx_v_all_verts);
        PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_6, __pyx_v_all_verts);
        __Pyx_INCREF(__pyx_v_all_neigh);
        __Pyx_GIVEREF(__pyx_v_all_neigh);
        PyTuple_SET_ITEM(__pyx_t_5, 4+__pyx_t_6, __pyx_v_all_neigh);
        __Pyx_INCREF(__pyx_v_leaf_start);
        __Pyx_GIVEREF(__pyx_v_leaf_start);
        PyTuple_SET_ITEM(__pyx_t_5, 5+__pyx_t_6, __pyx_v_leaf_start);
        __Pyx_INCREF(__pyx_v_leaf_stop);
        __Pyx_GIVEREF(__pyx_v_leaf_stop);
        PyTuple_SET_ITEM(__pyx_t_5, 6+__pyx_t_6, __pyx_v_leaf_stop);
        __Pyx_INCREF(__pyx_v_key_split_map);
        __Pyx_GIVEREF(__pyx_v_key_split_map);
        PyTuple_SET_ITEM(__pyx_t_5, 7+__pyx_t_6, __pyx_v_key_split_map);
        __Pyx_INCREF(__pyx_v_val_split_map);
        __Pyx_GIVEREF(__pyx_v_val_split_map);
        PyTuple_SET_ITEM(__pyx_t_5, 8+__pyx_t_6, __pyx_v_val_split_map);
        __Pyx_INCREF(__pyx_v_key_inf_map);
        __Pyx_GIVEREF(__pyx_v_key_inf_map);
        PyTuple_SET_ITEM(__pyx_t_5, 9+__pyx_t_6, __pyx_v_key_inf_map);
        __Pyx_INCREF(__pyx_v_val_inf_map);
        __Pyx_GIVEREF(__pyx_v_val_inf_map);
        PyTuple_SET_ITEM(__pyx_t_5, 10+__pyx_t_6, __pyx_v_val_inf_map);
        __Pyx_INCREF(__pyx_v_leaf_id);
        __Pyx_GIVEREF(__pyx_v_leaf_id);
        PyTuple_SET_ITEM(__pyx_t_5, 11+__pyx_t_6, __pyx_v_leaf_id);
        __Pyx_INCREF(__pyx_v_leaf_idx_inf);
        __Pyx_GIVEREF(__pyx_v_leaf_idx_inf);
        PyTuple_SET_ITEM(__pyx_t_5, 12+__pyx_t_6, __pyx_v_leaf_idx_inf);
        __Pyx_INCREF(__pyx_v_leaf_verts);
        __Pyx_GIVEREF(__pyx_v_leaf_verts);
        PyTuple_SET_ITEM(__pyx_t_5, 13+__pyx_t_6, __pyx_v_leaf_verts);
        __Pyx_INCREF(__pyx_v_leaf_neigh);
        __Pyx_GIVEREF(__pyx_v_leaf_neigh);
        PyTuple_SET_ITEM(__pyx_t_5, 14+__pyx_t_6, __pyx_v_leaf_neigh);
        __Pyx_INCREF(__pyx_v_leaf_sort_verts);
        __Pyx_GIVEREF(__pyx_v_leaf_sort_verts);
        PyTuple_SET_ITEM(__pyx_t_5, 15+__pyx_t_6, __pyx_v_leaf_sort_verts);
        __Pyx_INCREF(__pyx_v_leaf_sort_cells);
        __Pyx_GIVEREF(__pyx_v_leaf_sort_cells);
        PyTuple_SET_ITEM(__pyx_t_5, 16+__pyx_t_6, __pyx_v_leaf_sort_cells);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 954, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
        PyObject* sequence = __pyx_t_1;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 3)) {
          if (size > 3) __Pyx_RaiseTooManyValuesError(3);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 954, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
        } else {
          __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_3 = PyList_GET_ITEM(sequence, 2); 
        }
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        #else
        __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 954, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 954, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_3 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 954, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 954, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_8 = Py_TYPE(__pyx_t_2)->tp_iternext;
        index = 0; __pyx_t_7 = __pyx_t_8(__pyx_t_2); if (unlikely(!__pyx_t_7)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        index = 1; __pyx_t_5 = __pyx_t_8(__pyx_t_2); if (unlikely(!__pyx_t_5)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        index = 2; __pyx_t_3 = __pyx_t_8(__pyx_t_2); if (unlikely(!__pyx_t_3)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_3);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_2), 3) < 0) __PYX_ERR(0, 954, __pyx_L1_error)
        __pyx_t_8 = NULL;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        goto __pyx_L7_unpacking_done;
        __pyx_L6_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_8 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 954, __pyx_L1_error)
        __pyx_L7_unpacking_done:;
      }

      /* "cgal4py/delaunay/tools.pyx":954
 *     if dtype_comb == np.uint32:
 *         if dtype_leaf == np.uint32:
 *             ncells, split_map, inf_map = _add_leaf_uint32_uint32(             # <<<<<<<<<<<<<<
 *                 ndim, ncells, idx_inf, all_verts, all_neigh, leaf_start, leaf_stop,
 *                 key_split_map, val_split_map, key_inf_map, val_inf_map,
 */
      __Pyx_DECREF_SET(__pyx_v_ncells, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_v_split_map = __pyx_t_5;
      __pyx_t_5 = 0;
      __pyx_v_inf_map = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "cgal4py/delaunay/tools.pyx":953
 *         val_inf_map = np.empty(0, 'uint64')
 *     if dtype_comb == np.uint32:
 *         if dtype_leaf == np.uint32:             # <<<<<<<<<<<<<<
 *             ncells, split_map, inf_map = _add_leaf_uint32_uint32(
 *                 ndim, ncells, idx_inf, all_verts, all_neigh, leaf_start, leaf_stop,
 */
      goto __pyx_L5;
    }

    /* "cgal4py/delaunay/tools.pyx":962
 *         # elif dtype_leaf == np.uint64:
 *         else:
 *             raise TypeError("Leaf type {} not supported.".format(dtype_leaf))             # <<<<<<<<<<<<<<
 *     elif dtype_comb == np.uint64:
 *         if dtype_leaf == np.uint32:
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Leaf_type_not_supported, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 962, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_dtype_leaf)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 962, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, ((PyObject *)__pyx_v_dtype_leaf)};
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 962, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_1);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, ((PyObject *)__pyx_v_dtype_leaf)};
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 962, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_1);
        } else
        #endif
        {
          __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 962, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
          __Pyx_INCREF(((PyObject *)__pyx_v_dtype_leaf));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_dtype_leaf));
          PyTuple_SET_ITEM(__pyx_t_7, 0+1, ((PyObject *)__pyx_v_dtype_leaf));
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 962, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 962, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 962, __pyx_L1_error)
    }
    __pyx_L5:;

    /* "cgal4py/delaunay/tools.pyx":952
 *         key_inf_map = np.empty((0, ndim+1), dtype_comb)
 *         val_inf_map = np.empty(0, 'uint64')
 *     if dtype_comb == np.uint32:             # <<<<<<<<<<<<<<
 *         if dtype_leaf == np.uint32:
 *             ncells, split_map, inf_map = _add_leaf_uint32_uint32(
 */
    goto __pyx_L4;
  }

  /* "cgal4py/delaunay/tools.pyx":963
 *         else:
 *             raise TypeError("Leaf type {} not supported.".format(dtype_leaf))
 *     elif dtype_comb == np.uint64:             # <<<<<<<<<<<<<<
 *         if dtype_leaf == np.uint32:
 *             raise NotImplementedError
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_uint64); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(((PyObject *)__pyx_v_dtype_comb), __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 963, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 963, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(__pyx_t_4)) {

    /* "cgal4py/delaunay/tools.pyx":964
 *             raise TypeError("Leaf type {} not supported.".format(dtype_leaf))
 *     elif dtype_comb == np.uint64:
 *         if dtype_leaf == np.uint32:             # <<<<<<<<<<<<<<
 *             raise NotImplementedError
 *         elif dtype_leaf == np.uint64:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 964, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_uint32); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 964, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(((PyObject *)__pyx_v_dtype_leaf), __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 964, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 964, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__pyx_t_4)) {

      /* "cgal4py/delaunay/tools.pyx":965
 *     elif dtype_comb == np.uint64:
 *         if dtype_leaf == np.uint32:
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 *         elif dtype_leaf == np.uint64:
 *             raise NotImplementedError
 */
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(0, 965, __pyx_L1_error)

      /* "cgal4py/delaunay/tools.pyx":964
 *             raise TypeError("Leaf type {} not supported.".format(dtype_leaf))
 *     elif dtype_comb == np.uint64:
 *         if dtype_leaf == np.uint32:             # <<<<<<<<<<<<<<
 *             raise NotImplementedError
 *         elif dtype_leaf == np.uint64:
 */
    }

    /* "cgal4py/delaunay/tools.pyx":966
 *         if dtype_leaf == np.uint32:
 *             raise NotImplementedError
 *         elif dtype_leaf == np.uint64:             # <<<<<<<<<<<<<<
 *             raise NotImplementedError
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 966, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_uint64); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 966, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(((PyObject *)__pyx_v_dtype_leaf), __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 966, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 966, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__pyx_t_4)) {

      /* "cgal4py/delaunay/tools.pyx":967
 *             raise NotImplementedError
 *         elif dtype_leaf == np.uint64:
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Leaf type {} not supported.".format(dtype_leaf))
 */
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(0, 967, __pyx_L1_error)

      /* "cgal4py/delaunay/tools.pyx":966
 *         if dtype_leaf == np.uint32:
 *             raise NotImplementedError
 *         elif dtype_leaf == np.uint64:             # <<<<<<<<<<<<<<
 *             raise NotImplementedError
 *         else:
 */
    }

    /* "cgal4py/delaunay/tools.pyx":969
 *             raise NotImplementedError
 *         else:
 *             raise TypeError("Leaf type {} not supported.".format(dtype_leaf))             # <<<<<<<<<<<<<<
 *     else:
 *         raise TypeError("Combined type {} not supported.".format(dtype_comb))
 */
    /*else*/ {
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Leaf_type_not_supported, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 969, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      if (!__pyx_t_7) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, ((PyObject *)__pyx_v_dtype_leaf)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 969, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, ((PyObject *)__pyx_v_dtype_leaf)};
          __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 969, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_3);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, ((PyObject *)__pyx_v_dtype_leaf)};
          __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 969, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_3);
        } else
        #endif
        {
          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 969, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7); __pyx_t_7 = NULL;
          __Pyx_INCREF(((PyObject *)__pyx_v_dtype_leaf));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_dtype_leaf));
          PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_dtype_leaf));
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 969, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 969, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 969, __pyx_L1_error)
    }

    /* "cgal4py/delaunay/tools.pyx":963
 *         else:
 *             raise TypeError("Leaf type {} not supported.".format(dtype_leaf))
 *     elif dtype_comb == np.uint64:             # <<<<<<<<<<<<<<
 *         if dtype_leaf == np.uint32:
 *             raise NotImplementedError
 */
  }

  /* "cgal4py/delaunay/tools.pyx":971
 *             raise TypeError("Leaf type {} not supported.".format(dtype_leaf))
 *     else:
 *         raise TypeError("Combined type {} not supported.".format(dtype_comb))             # <<<<<<<<<<<<<<
 *     t1 = time.time()
 *     print("Consolidation (cython) took {}s".format(t1-t0))
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Combined_type_not_supported, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 971, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_dtype_comb)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 971, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, ((PyObject *)__pyx_v_dtype_comb)};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 971, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, ((PyObject *)__pyx_v_dtype_comb)};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 971, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 971, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_dtype_comb));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_dtype_comb));
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, ((PyObject *)__pyx_v_dtype_comb));
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 971, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 971, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 971, __pyx_L1_error)
  }
  __pyx_L4:;

  /* "cgal4py/delaunay/tools.pyx":972
 *     else:
 *         raise TypeError("Combined type {} not supported.".format(dtype_comb))
 *     t1 = time.time()             # <<<<<<<<<<<<<<
 *     print("Consolidation (cython) took {}s".format(t1-t0))
 *     return ncells, split_map, inf_map
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_time); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 972, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 972, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_t1 = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cgal4py/delaunay/tools.pyx":973
 *         raise TypeError("Combined type {} not supported.".format(dtype_comb))
 *     t1 = time.time()
 *     print("Consolidation (cython) took {}s".format(t1-t0))             # <<<<<<<<<<<<<<
 *     return ncells, split_map, inf_map
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Consolidation_cython_took_s, __pyx_n_s_format); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 973, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_t1, __pyx_v_t0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 973, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 973, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_1};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 973, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_1};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 973, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 973, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 973, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_3) < 0) __PYX_ERR(0, 973, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cgal4py/delaunay/tools.pyx":974
 *     t1 = time.time()
 *     print("Consolidation (cython) took {}s".format(t1-t0))
 *     return ncells, split_map, inf_map             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 974, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_ncells);
  __Pyx_GIVEREF(__pyx_v_ncells);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_ncells);
  __Pyx_INCREF(__pyx_v_split_map);
  __Pyx_GIVEREF(__pyx_v_split_map);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_split_map);
  __Pyx_INCREF(__pyx_v_inf_map);
  __Pyx_GIVEREF(__pyx_v_inf_map);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_inf_map);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cgal4py/delaunay/tools.pyx":940
 *     # return ncells, (key_split_map, val_split_map), (key_inf_map, val_inf_map)
 * 
 * def add_leaf(ndim, ncells, idx_inf, all_verts, all_neigh, leaf_start, leaf_stop,             # <<<<<<<<<<<<<<
 *              key_split_map, val_split_map, key_inf_map, val_inf_map,
 *              leaf_id, leaf_idx_inf, leaf_verts, leaf_neigh,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.add_leaf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dtype_comb);
  __Pyx_XDECREF(__pyx_v_dtype_leaf);
  __Pyx_XDECREF(__pyx_v_t0);
  __Pyx_XDECREF(__pyx_v_split_map);
  __Pyx_XDECREF(__pyx_v_inf_map);
  __Pyx_XDECREF(__pyx_v_t1);
  __Pyx_XDECREF(__pyx_v_ncells);
  __Pyx_XDECREF(__pyx_v_key_split_map);
  __Pyx_XDECREF(__pyx_v_val_split_map);
  __Pyx_XDECREF(__pyx_v_key_inf_map);
  __Pyx_XDECREF(__pyx_v_val_inf_map);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":978
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _add_inf_uint32_uint32(np.uint32_t ndim, np.uint64_t ncells, np.uint32_t idx_inf,             # <<<<<<<<<<<<<<
 *                            np.ndarray[np.uint32_t, ndim=2] all_verts,
 *                            np.ndarray[np.uint32_t, ndim=2] all_neigh,
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_53_add_inf_uint32_uint32(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7cgal4py_8delaunay_5tools_53_add_inf_uint32_uint32 = {"_add_inf_uint32_uint32", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_53_add_inf_uint32_uint32, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_53_add_inf_uint32_uint32(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_5numpy_uint32_t __pyx_v_ndim;
  __pyx_t_5numpy_uint64_t __pyx_v_ncells;
  __pyx_t_5numpy_uint32_t __pyx_v_idx_inf;
  PyArrayObject *__pyx_v_all_verts = 0;
  PyArrayObject *__pyx_v_all_neigh = 0;
  PyArrayObject *__pyx_v_leaf_start = 0;
  PyArrayObject *__pyx_v_leaf_stop = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_add_inf_uint32_uint32 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ndim,&__pyx_n_s_ncells,&__pyx_n_s_idx_inf,&__pyx_n_s_all_verts,&__pyx_n_s_all_neigh,&__pyx_n_s_leaf_start,&__pyx_n_s_leaf_stop,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ndim)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ncells)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_add_inf_uint32_uint32", 1, 7, 7, 1); __PYX_ERR(0, 978, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx_inf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_add_inf_uint32_uint32", 1, 7, 7, 2); __PYX_ERR(0, 978, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_all_verts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_add_inf_uint32_uint32", 1, 7, 7, 3); __PYX_ERR(0, 978, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_all_neigh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_add_inf_uint32_uint32", 1, 7, 7, 4); __PYX_ERR(0, 978, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_leaf_start)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_add_inf_uint32_uint32", 1, 7, 7, 5); __PYX_ERR(0, 978, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_leaf_stop)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_add_inf_uint32_uint32", 1, 7, 7, 6); __PYX_ERR(0, 978, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_add_inf_uint32_uint32") < 0)) __PYX_ERR(0, 978, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_ndim = __Pyx_PyInt_As_npy_uint32(values[0]); if (unlikely((__pyx_v_ndim == ((npy_uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 978, __pyx_L3_error)
    __pyx_v_ncells = __Pyx_PyInt_As_npy_uint64(values[1]); if (unlikely((__pyx_v_ncells == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 978, __pyx_L3_error)
    __pyx_v_idx_inf = __Pyx_PyInt_As_npy_uint32(values[2]); if (unlikely((__pyx_v_idx_inf == ((npy_uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 978, __pyx_L3_error)
    __pyx_v_all_verts = ((PyArrayObject *)values[3]);
    __pyx_v_all_neigh = ((PyArrayObject *)values[4]);
    __pyx_v_leaf_start = ((PyArrayObject *)values[5]);
    __pyx_v_leaf_stop = ((PyArrayObject *)values[6]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_add_inf_uint32_uint32", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 978, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools._add_inf_uint32_uint32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_all_verts), __pyx_ptype_5numpy_ndarray, 1, "all_verts", 0))) __PYX_ERR(0, 979, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_all_neigh), __pyx_ptype_5numpy_ndarray, 1, "all_neigh", 0))) __PYX_ERR(0, 980, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_leaf_start), __pyx_ptype_5numpy_ndarray, 1, "leaf_start", 0))) __PYX_ERR(0, 981, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_leaf_stop), __pyx_ptype_5numpy_ndarray, 1, "leaf_stop", 0))) __PYX_ERR(0, 982, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_52_add_inf_uint32_uint32(__pyx_self, __pyx_v_ndim, __pyx_v_ncells, __pyx_v_idx_inf, __pyx_v_all_verts, __pyx_v_all_neigh, __pyx_v_leaf_start, __pyx_v_leaf_stop);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_52_add_inf_uint32_uint32(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_5numpy_uint32_t __pyx_v_ndim, __pyx_t_5numpy_uint64_t __pyx_v_ncells, __pyx_t_5numpy_uint32_t __pyx_v_idx_inf, PyArrayObject *__pyx_v_all_verts, PyArrayObject *__pyx_v_all_neigh, PyArrayObject *__pyx_v_leaf_start, PyArrayObject *__pyx_v_leaf_stop) {
  float __pyx_v_t1;
  float __pyx_v_t0;
  CYTHON_UNUSED uint64_t __pyx_v_num_leaves;
  int64_t __pyx_v_max_ncells;
  ConsolidatedLeaves<uint32_t>  __pyx_v_obj;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_all_neigh;
  __Pyx_Buffer __pyx_pybuffer_all_neigh;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_all_verts;
  __Pyx_Buffer __pyx_pybuffer_all_verts;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_leaf_start;
  __Pyx_Buffer __pyx_pybuffer_leaf_start;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_leaf_stop;
  __Pyx_Buffer __pyx_pybuffer_leaf_stop;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  float __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  uint64_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  ConsolidatedLeaves<uint32_t>  __pyx_t_13;
  int64_t __pyx_t_14;
  __Pyx_RefNannySetupContext("_add_inf_uint32_uint32", 0);
  __pyx_pybuffer_all_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_all_verts.refcount = 0;
  __pyx_pybuffernd_all_verts.data = NULL;
  __pyx_pybuffernd_all_verts.rcbuffer = &__pyx_pybuffer_all_verts;
  __pyx_pybuffer_all_neigh.pybuffer.buf = NULL;
  __pyx_pybuffer_all_neigh.refcount = 0;
  __pyx_pybuffernd_all_neigh.data = NULL;
  __pyx_pybuffernd_all_neigh.rcbuffer = &__pyx_pybuffer_all_neigh;
  __pyx_pybuffer_leaf_start.pybuffer.buf = NULL;
  __pyx_pybuffer_leaf_start.refcount = 0;
  __pyx_pybuffernd_leaf_start.data = NULL;
  __pyx_pybuffernd_leaf_start.rcbuffer = &__pyx_pybuffer_leaf_start;
  __pyx_pybuffer_leaf_stop.pybuffer.buf = NULL;
  __pyx_pybuffer_leaf_stop.refcount = 0;
  __pyx_pybuffernd_leaf_stop.data = NULL;
  __pyx_pybuffernd_leaf_stop.rcbuffer = &__pyx_pybuffer_leaf_stop;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_all_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_all_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 978, __pyx_L1_error)
  }
  __pyx_pybuffernd_all_verts.diminfo[0].strides = __pyx_pybuffernd_all_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_all_verts.diminfo[0].shape = __pyx_pybuffernd_all_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_all_verts.diminfo[1].strides = __pyx_pybuffernd_all_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_all_verts.diminfo[1].shape = __pyx_pybuffernd_all_verts.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_all_neigh.rcbuffer->pybuffer, (PyObject*)__pyx_v_all_neigh, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 978, __pyx_L1_error)
  }
  __pyx_pybuffernd_all_neigh.diminfo[0].strides = __pyx_pybuffernd_all_neigh.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_all_neigh.diminfo[0].shape = __pyx_pybuffernd_all_neigh.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_all_neigh.diminfo[1].strides = __pyx_pybuffernd_all_neigh.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_all_neigh.diminfo[1].shape = __pyx_pybuffernd_all_neigh.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_leaf_start.rcbuffer->pybuffer, (PyObject*)__pyx_v_leaf_start, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 978, __pyx_L1_error)
  }
  __pyx_pybuffernd_leaf_start.diminfo[0].strides = __pyx_pybuffernd_leaf_start.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_leaf_start.diminfo[0].shape = __pyx_pybuffernd_leaf_start.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_leaf_stop.rcbuffer->pybuffer, (PyObject*)__pyx_v_leaf_stop, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 978, __pyx_L1_error)
  }
  __pyx_pybuffernd_leaf_stop.diminfo[0].strides = __pyx_pybuffernd_leaf_stop.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_leaf_stop.diminfo[0].shape = __pyx_pybuffernd_leaf_stop.rcbuffer->pybuffer.shape[0];

  /* "cgal4py/delaunay/tools.pyx":985
 *     cdef float t1, t0
 *     # Checking to ensure no out-of-bounds things
 *     t0 = time.time()             # <<<<<<<<<<<<<<
 *     assert(leaf_start.size == leaf_stop.size)
 *     assert(all_verts.size == all_neigh.size)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 985, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 985, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_t0 = __pyx_t_4;

  /* "cgal4py/delaunay/tools.pyx":986
 *     # Checking to ensure no out-of-bounds things
 *     t0 = time.time()
 *     assert(leaf_start.size == leaf_stop.size)             # <<<<<<<<<<<<<<
 *     assert(all_verts.size == all_neigh.size)
 *     if all_verts.shape[0] == 0:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_leaf_start), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 986, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_leaf_stop), __pyx_n_s_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 986, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 986, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 986, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_5)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 986, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":987
 *     t0 = time.time()
 *     assert(leaf_start.size == leaf_stop.size)
 *     assert(all_verts.size == all_neigh.size)             # <<<<<<<<<<<<<<
 *     if all_verts.shape[0] == 0:
 *         return ncells
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_all_verts), __pyx_n_s_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 987, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_all_neigh), __pyx_n_s_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 987, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 987, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 987, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_5)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 987, __pyx_L1_error)
    }
  }
  #endif

  /* "cgal4py/delaunay/tools.pyx":988
 *     assert(leaf_start.size == leaf_stop.size)
 *     assert(all_verts.size == all_neigh.size)
 *     if all_verts.shape[0] == 0:             # <<<<<<<<<<<<<<
 *         return ncells
 *     t1 = time.time()
 */
  __pyx_t_5 = (((__pyx_v_all_verts->dimensions[0]) == 0) != 0);
  if (__pyx_t_5) {

    /* "cgal4py/delaunay/tools.pyx":989
 *     assert(all_verts.size == all_neigh.size)
 *     if all_verts.shape[0] == 0:
 *         return ncells             # <<<<<<<<<<<<<<
 *     t1 = time.time()
 *     print("Assertions took {} s".format(t1-t0))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_npy_uint64(__pyx_v_ncells); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 989, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "cgal4py/delaunay/tools.pyx":988
 *     assert(leaf_start.size == leaf_stop.size)
 *     assert(all_verts.size == all_neigh.size)
 *     if all_verts.shape[0] == 0:             # <<<<<<<<<<<<<<
 *         return ncells
 *     t1 = time.time()
 */
  }

  /* "cgal4py/delaunay/tools.pyx":990
 *     if all_verts.shape[0] == 0:
 *         return ncells
 *     t1 = time.time()             # <<<<<<<<<<<<<<
 *     print("Assertions took {} s".format(t1-t0))
 *     # Variables from sizes
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 990, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 990, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 990, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_t1 = __pyx_t_4;

  /* "cgal4py/delaunay/tools.pyx":991
 *         return ncells
 *     t1 = time.time()
 *     print("Assertions took {} s".format(t1-t0))             # <<<<<<<<<<<<<<
 *     # Variables from sizes
 *     cdef uint64_t num_leaves = <uint64_t>leaf_start.size
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Assertions_took_s, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 991, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_t1 - __pyx_v_t0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 991, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 991, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 991, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 991, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 991, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 991, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(0, 991, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":993
 *     print("Assertions took {} s".format(t1-t0))
 *     # Variables from sizes
 *     cdef uint64_t num_leaves = <uint64_t>leaf_start.size             # <<<<<<<<<<<<<<
 *     cdef int64_t max_ncells = <int64_t>all_verts.shape[0]
 *     # Create consolidated leaves object
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_leaf_start), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 993, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_8 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 993, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_num_leaves = ((uint64_t)__pyx_t_8);

  /* "cgal4py/delaunay/tools.pyx":994
 *     # Variables from sizes
 *     cdef uint64_t num_leaves = <uint64_t>leaf_start.size
 *     cdef int64_t max_ncells = <int64_t>all_verts.shape[0]             # <<<<<<<<<<<<<<
 *     # Create consolidated leaves object
 *     cdef ConsolidatedLeaves[uint32_t] obj
 */
  __pyx_v_max_ncells = ((int64_t)(__pyx_v_all_verts->dimensions[0]));

  /* "cgal4py/delaunay/tools.pyx":998
 *     cdef ConsolidatedLeaves[uint32_t] obj
 *     cdef uint64_t i
 *     t0 = time.time()             # <<<<<<<<<<<<<<
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         obj = ConsolidatedLeaves[uint32_t](
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 998, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 998, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 998, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 998, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 998, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_t0 = __pyx_t_4;

  /* "cgal4py/delaunay/tools.pyx":999
 *     cdef uint64_t i
 *     t0 = time.time()
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         obj = ConsolidatedLeaves[uint32_t](
 *             ndim, ncells, idx_inf, max_ncells,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":1002
 *         obj = ConsolidatedLeaves[uint32_t](
 *             ndim, ncells, idx_inf, max_ncells,
 *             &all_verts[0,0], &all_neigh[0,0])             # <<<<<<<<<<<<<<
 *     t1 = time.time()
 *     print("Initialization of consolidated leaves (for inf) took {} s".format(t1-t0))
 */
        __pyx_t_9 = 0;
        __pyx_t_10 = 0;
        __pyx_t_11 = 0;
        __pyx_t_12 = 0;

        /* "cgal4py/delaunay/tools.pyx":1000
 *     t0 = time.time()
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         obj = ConsolidatedLeaves[uint32_t](             # <<<<<<<<<<<<<<
 *             ndim, ncells, idx_inf, max_ncells,
 *             &all_verts[0,0], &all_neigh[0,0])
 */
        try {
          __pyx_t_13 = ConsolidatedLeaves<uint32_t> (__pyx_v_ndim, __pyx_v_ncells, __pyx_v_idx_inf, __pyx_v_max_ncells, (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_all_verts.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_all_verts.diminfo[0].strides, __pyx_t_10, __pyx_pybuffernd_all_verts.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_all_neigh.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_all_neigh.diminfo[0].strides, __pyx_t_12, __pyx_pybuffernd_all_neigh.diminfo[1].strides))));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1000, __pyx_L5_error)
        }
        __pyx_v_obj = __pyx_t_13;
      }

      /* "cgal4py/delaunay/tools.pyx":999
 *     cdef uint64_t i
 *     t0 = time.time()
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         obj = ConsolidatedLeaves[uint32_t](
 *             ndim, ncells, idx_inf, max_ncells,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L5_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L6:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":1003
 *             ndim, ncells, idx_inf, max_ncells,
 *             &all_verts[0,0], &all_neigh[0,0])
 *     t1 = time.time()             # <<<<<<<<<<<<<<
 *     print("Initialization of consolidated leaves (for inf) took {} s".format(t1-t0))
 *     # Insert leaf
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1003, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1003, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1003, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1003, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1003, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_t1 = __pyx_t_4;

  /* "cgal4py/delaunay/tools.pyx":1004
 *             &all_verts[0,0], &all_neigh[0,0])
 *     t1 = time.time()
 *     print("Initialization of consolidated leaves (for inf) took {} s".format(t1-t0))             # <<<<<<<<<<<<<<
 *     # Insert leaf
 *     t0 = time.time()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Initialization_of_consolidated_l_2, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1004, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_t1 - __pyx_v_t0)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1004, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1004, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_7};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1004, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_7};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1004, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1004, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1004, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(0, 1004, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":1006
 *     print("Initialization of consolidated leaves (for inf) took {} s".format(t1-t0))
 *     # Insert leaf
 *     t0 = time.time()             # <<<<<<<<<<<<<<
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         obj.add_inf()
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1006, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1006, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1006, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1006, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1006, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_t0 = __pyx_t_4;

  /* "cgal4py/delaunay/tools.pyx":1007
 *     # Insert leaf
 *     t0 = time.time()
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         obj.add_inf()
 *     t1 = time.time()
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":1008
 *     t0 = time.time()
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         obj.add_inf()             # <<<<<<<<<<<<<<
 *     t1 = time.time()
 *     print("Adding infinite cells took {} s".format(t1-t0))
 */
        __pyx_v_obj.add_inf();
      }

      /* "cgal4py/delaunay/tools.pyx":1007
 *     # Insert leaf
 *     t0 = time.time()
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         obj.add_inf()
 *     t1 = time.time()
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L9;
        }
        __pyx_L9:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":1009
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         obj.add_inf()
 *     t1 = time.time()             # <<<<<<<<<<<<<<
 *     print("Adding infinite cells took {} s".format(t1-t0))
 *     # Clean up things allocated during initialization
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1009, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1009, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1009, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_t1 = __pyx_t_4;

  /* "cgal4py/delaunay/tools.pyx":1010
 *         obj.add_inf()
 *     t1 = time.time()
 *     print("Adding infinite cells took {} s".format(t1-t0))             # <<<<<<<<<<<<<<
 *     # Clean up things allocated during initialization
 *     t0 = time.time()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Adding_infinite_cells_took_s, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = PyFloat_FromDouble((__pyx_v_t1 - __pyx_v_t0)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1010, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1010, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1010, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1010, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1010, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(0, 1010, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":1012
 *     print("Adding infinite cells took {} s".format(t1-t0))
 *     # Clean up things allocated during initialization
 *     t0 = time.time()             # <<<<<<<<<<<<<<
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         obj.cleanup()
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1012, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1012, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_t0 = __pyx_t_4;

  /* "cgal4py/delaunay/tools.pyx":1013
 *     # Clean up things allocated during initialization
 *     t0 = time.time()
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         obj.cleanup()
 *     t1 = time.time()
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":1014
 *     t0 = time.time()
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         obj.cleanup()             # <<<<<<<<<<<<<<
 *     t1 = time.time()
 *     print("Clean up took {} s".format(t1-t0))
 */
        __pyx_v_obj.cleanup();
      }

      /* "cgal4py/delaunay/tools.pyx":1013
 *     # Clean up things allocated during initialization
 *     t0 = time.time()
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *         obj.cleanup()
 *     t1 = time.time()
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L12;
        }
        __pyx_L12:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":1015
 *     with nogil, cython.boundscheck(False), cython.wraparound(False):
 *         obj.cleanup()
 *     t1 = time.time()             # <<<<<<<<<<<<<<
 *     print("Clean up took {} s".format(t1-t0))
 *     ncells = obj.ncells
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1015, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1015, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1015, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_t1 = __pyx_t_4;

  /* "cgal4py/delaunay/tools.pyx":1016
 *         obj.cleanup()
 *     t1 = time.time()
 *     print("Clean up took {} s".format(t1-t0))             # <<<<<<<<<<<<<<
 *     ncells = obj.ncells
 *     return ncells
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Clean_up_took_s, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1016, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_t1 - __pyx_v_t0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1016, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(0, 1016, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":1017
 *     t1 = time.time()
 *     print("Clean up took {} s".format(t1-t0))
 *     ncells = obj.ncells             # <<<<<<<<<<<<<<
 *     return ncells
 * 
 */
  __pyx_t_14 = __pyx_v_obj.ncells;
  __pyx_v_ncells = __pyx_t_14;

  /* "cgal4py/delaunay/tools.pyx":1018
 *     print("Clean up took {} s".format(t1-t0))
 *     ncells = obj.ncells
 *     return ncells             # <<<<<<<<<<<<<<
 * 
 * def add_inf(ndim, ncells, idx_inf, all_verts, all_neigh, leaf_start, leaf_stop):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_npy_uint64(__pyx_v_ncells); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1018, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cgal4py/delaunay/tools.pyx":978
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _add_inf_uint32_uint32(np.uint32_t ndim, np.uint64_t ncells, np.uint32_t idx_inf,             # <<<<<<<<<<<<<<
 *                            np.ndarray[np.uint32_t, ndim=2] all_verts,
 *                            np.ndarray[np.uint32_t, ndim=2] all_neigh,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_all_neigh.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_all_verts.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_leaf_start.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_leaf_stop.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cgal4py.delaunay.tools._add_inf_uint32_uint32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_all_neigh.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_all_verts.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_leaf_start.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_leaf_stop.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1020
 *     return ncells
 * 
 * def add_inf(ndim, ncells, idx_inf, all_verts, all_neigh, leaf_start, leaf_stop):             # <<<<<<<<<<<<<<
 *     dtype_comb = type(idx_inf)
 *     t0 = time.time()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_55add_inf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7cgal4py_8delaunay_5tools_55add_inf = {"add_inf", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_55add_inf, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_55add_inf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ndim = 0;
  PyObject *__pyx_v_ncells = 0;
  PyObject *__pyx_v_idx_inf = 0;
  PyObject *__pyx_v_all_verts = 0;
  PyObject *__pyx_v_all_neigh = 0;
  PyObject *__pyx_v_leaf_start = 0;
  PyObject *__pyx_v_leaf_stop = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_inf (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ndim,&__pyx_n_s_ncells,&__pyx_n_s_idx_inf,&__pyx_n_s_all_verts,&__pyx_n_s_all_neigh,&__pyx_n_s_leaf_start,&__pyx_n_s_leaf_stop,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ndim)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ncells)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_inf", 1, 7, 7, 1); __PYX_ERR(0, 1020, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx_inf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_inf", 1, 7, 7, 2); __PYX_ERR(0, 1020, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_all_verts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_inf", 1, 7, 7, 3); __PYX_ERR(0, 1020, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_all_neigh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_inf", 1, 7, 7, 4); __PYX_ERR(0, 1020, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_leaf_start)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_inf", 1, 7, 7, 5); __PYX_ERR(0, 1020, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_leaf_stop)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_inf", 1, 7, 7, 6); __PYX_ERR(0, 1020, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_inf") < 0)) __PYX_ERR(0, 1020, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_ndim = values[0];
    __pyx_v_ncells = values[1];
    __pyx_v_idx_inf = values[2];
    __pyx_v_all_verts = values[3];
    __pyx_v_all_neigh = values[4];
    __pyx_v_leaf_start = values[5];
    __pyx_v_leaf_stop = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_inf", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1020, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.add_inf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_54add_inf(__pyx_self, __pyx_v_ndim, __pyx_v_ncells, __pyx_v_idx_inf, __pyx_v_all_verts, __pyx_v_all_neigh, __pyx_v_leaf_start, __pyx_v_leaf_stop);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_54add_inf(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ndim, PyObject *__pyx_v_ncells, PyObject *__pyx_v_idx_inf, PyObject *__pyx_v_all_verts, PyObject *__pyx_v_all_neigh, PyObject *__pyx_v_leaf_start, PyObject *__pyx_v_leaf_stop) {
  PyTypeObject *__pyx_v_dtype_comb = NULL;
  PyObject *__pyx_v_t0 = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_split_map = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_inf_map = NULL;
  PyObject *__pyx_v_t1 = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  __Pyx_RefNannySetupContext("add_inf", 0);
  __Pyx_INCREF(__pyx_v_ncells);

  /* "cgal4py/delaunay/tools.pyx":1021
 * 
 * def add_inf(ndim, ncells, idx_inf, all_verts, all_neigh, leaf_start, leaf_stop):
 *     dtype_comb = type(idx_inf)             # <<<<<<<<<<<<<<
 *     t0 = time.time()
 *     if dtype_comb == np.uint32:
 */
  __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_idx_inf)));
  __pyx_v_dtype_comb = ((PyTypeObject*)((PyObject *)Py_TYPE(__pyx_v_idx_inf)));

  /* "cgal4py/delaunay/tools.pyx":1022
 * def add_inf(ndim, ncells, idx_inf, all_verts, all_neigh, leaf_start, leaf_stop):
 *     dtype_comb = type(idx_inf)
 *     t0 = time.time()             # <<<<<<<<<<<<<<
 *     if dtype_comb == np.uint32:
 *         ncells, split_map, inf_map = _add_inf_uint32_uint32(
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1022, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1022, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_t0 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":1023
 *     dtype_comb = type(idx_inf)
 *     t0 = time.time()
 *     if dtype_comb == np.uint32:             # <<<<<<<<<<<<<<
 *         ncells, split_map, inf_map = _add_inf_uint32_uint32(
 *             ndim, ncells, idx_inf, all_verts, all_neigh, leaf_start, leaf_stop)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1023, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_uint32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1023, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_dtype_comb), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1023, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1023, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "cgal4py/delaunay/tools.pyx":1024
 *     t0 = time.time()
 *     if dtype_comb == np.uint32:
 *         ncells, split_map, inf_map = _add_inf_uint32_uint32(             # <<<<<<<<<<<<<<
 *             ndim, ncells, idx_inf, all_verts, all_neigh, leaf_start, leaf_stop)
 *     elif dtype_comb == np.uint64:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_add_inf_uint32_uint32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1024, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "cgal4py/delaunay/tools.pyx":1025
 *     if dtype_comb == np.uint32:
 *         ncells, split_map, inf_map = _add_inf_uint32_uint32(
 *             ndim, ncells, idx_inf, all_verts, all_neigh, leaf_start, leaf_stop)             # <<<<<<<<<<<<<<
 *     elif dtype_comb == np.uint64:
 *         pass
 */
    __pyx_t_2 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[8] = {__pyx_t_2, __pyx_v_ndim, __pyx_v_ncells, __pyx_v_idx_inf, __pyx_v_all_verts, __pyx_v_all_neigh, __pyx_v_leaf_start, __pyx_v_leaf_stop};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 7+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1024, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[8] = {__pyx_t_2, __pyx_v_ndim, __pyx_v_ncells, __pyx_v_idx_inf, __pyx_v_all_verts, __pyx_v_all_neigh, __pyx_v_leaf_start, __pyx_v_leaf_stop};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 7+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1024, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(7+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1024, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_v_ndim);
      __Pyx_GIVEREF(__pyx_v_ndim);
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_ndim);
      __Pyx_INCREF(__pyx_v_ncells);
      __Pyx_GIVEREF(__pyx_v_ncells);
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_ncells);
      __Pyx_INCREF(__pyx_v_idx_inf);
      __Pyx_GIVEREF(__pyx_v_idx_inf);
      PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_v_idx_inf);
      __Pyx_INCREF(__pyx_v_all_verts);
      __Pyx_GIVEREF(__pyx_v_all_verts);
      PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, __pyx_v_all_verts);
      __Pyx_INCREF(__pyx_v_all_neigh);
      __Pyx_GIVEREF(__pyx_v_all_neigh);
      PyTuple_SET_ITEM(__pyx_t_6, 4+__pyx_t_5, __pyx_v_all_neigh);
      __Pyx_INCREF(__pyx_v_leaf_start);
      __Pyx_GIVEREF(__pyx_v_leaf_start);
      PyTuple_SET_ITEM(__pyx_t_6, 5+__pyx_t_5, __pyx_v_leaf_start);
      __Pyx_INCREF(__pyx_v_leaf_stop);
      __Pyx_GIVEREF(__pyx_v_leaf_stop);
      PyTuple_SET_ITEM(__pyx_t_6, 6+__pyx_t_5, __pyx_v_leaf_stop);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1024, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1024, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 2); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_2 = PyList_GET_ITEM(sequence, 2); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1024, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1024, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_2 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1024, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1024, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_3)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 2; __pyx_t_2 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_2)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 3) < 0) __PYX_ERR(0, 1024, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1024, __pyx_L1_error)
      __pyx_L5_unpacking_done:;
    }

    /* "cgal4py/delaunay/tools.pyx":1024
 *     t0 = time.time()
 *     if dtype_comb == np.uint32:
 *         ncells, split_map, inf_map = _add_inf_uint32_uint32(             # <<<<<<<<<<<<<<
 *             ndim, ncells, idx_inf, all_verts, all_neigh, leaf_start, leaf_stop)
 *     elif dtype_comb == np.uint64:
 */
    __Pyx_DECREF_SET(__pyx_v_ncells, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_v_split_map = __pyx_t_6;
    __pyx_t_6 = 0;
    __pyx_v_inf_map = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "cgal4py/delaunay/tools.pyx":1023
 *     dtype_comb = type(idx_inf)
 *     t0 = time.time()
 *     if dtype_comb == np.uint32:             # <<<<<<<<<<<<<<
 *         ncells, split_map, inf_map = _add_inf_uint32_uint32(
 *             ndim, ncells, idx_inf, all_verts, all_neigh, leaf_start, leaf_stop)
 */
    goto __pyx_L3;
  }

  /* "cgal4py/delaunay/tools.pyx":1026
 *         ncells, split_map, inf_map = _add_inf_uint32_uint32(
 *             ndim, ncells, idx_inf, all_verts, all_neigh, leaf_start, leaf_stop)
 *     elif dtype_comb == np.uint64:             # <<<<<<<<<<<<<<
 *         pass
 *     else:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_uint64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_dtype_comb), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1026, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1026, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_4)) {
    goto __pyx_L3;
  }

  /* "cgal4py/delaunay/tools.pyx":1029
 *         pass
 *     else:
 *         raise TypeError("Combined type {} not supported.".format(dtype_comb))             # <<<<<<<<<<<<<<
 *     t1 = time.time()
 *     print("Adding infinite cells (cython) took {}s".format(t1-t0))
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Combined_type_not_supported, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1029, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_dtype_comb)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1029, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, ((PyObject *)__pyx_v_dtype_comb)};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1029, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, ((PyObject *)__pyx_v_dtype_comb)};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1029, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1029, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_dtype_comb));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_dtype_comb));
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, ((PyObject *)__pyx_v_dtype_comb));
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1029, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1029, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1029, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "cgal4py/delaunay/tools.pyx":1030
 *     else:
 *         raise TypeError("Combined type {} not supported.".format(dtype_comb))
 *     t1 = time.time()             # <<<<<<<<<<<<<<
 *     print("Adding infinite cells (cython) took {}s".format(t1-t0))
 *     return ncells
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1030, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1030, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1030, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1030, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_t1 = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "cgal4py/delaunay/tools.pyx":1031
 *         raise TypeError("Combined type {} not supported.".format(dtype_comb))
 *     t1 = time.time()
 *     print("Adding infinite cells (cython) took {}s".format(t1-t0))             # <<<<<<<<<<<<<<
 *     return ncells
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Adding_infinite_cells_cython_too, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_t1, __pyx_v_t0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1031, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1031, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1031, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1031, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1031, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 1031, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cgal4py/delaunay/tools.pyx":1032
 *     t1 = time.time()
 *     print("Adding infinite cells (cython) took {}s".format(t1-t0))
 *     return ncells             # <<<<<<<<<<<<<<
 * 
 * cdef class SerializedLeaf32:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ncells);
  __pyx_r = __pyx_v_ncells;
  goto __pyx_L0;

  /* "cgal4py/delaunay/tools.pyx":1020
 *     return ncells
 * 
 * def add_inf(ndim, ncells, idx_inf, all_verts, all_neigh, leaf_start, leaf_stop):             # <<<<<<<<<<<<<<
 *     dtype_comb = type(idx_inf)
 *     t0 = time.time()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.add_inf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dtype_comb);
  __Pyx_XDECREF(__pyx_v_t0);
  __Pyx_XDECREF(__pyx_v_split_map);
  __Pyx_XDECREF(__pyx_v_inf_map);
  __Pyx_XDECREF(__pyx_v_t1);
  __Pyx_XDECREF(__pyx_v_ncells);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1084
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     def __cinit__(self, int leaf_id, uint32_t ndim, int64_t ncells, uint32_t idx_inf,             # <<<<<<<<<<<<<<
 *                   np.ndarray[np.uint32_t, ndim=2] verts,
 *                   np.ndarray[np.uint32_t, ndim=2] neigh,
 */

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_leaf_id;
  uint32_t __pyx_v_ndim;
  int64_t __pyx_v_ncells;
  uint32_t __pyx_v_idx_inf;
  PyArrayObject *__pyx_v_verts = 0;
  PyArrayObject *__pyx_v_neigh = 0;
  PyArrayObject *__pyx_v_sort_verts = 0;
  PyArrayObject *__pyx_v_sort_cells = 0;
  uint64_t __pyx_v_idx_start;
  uint64_t __pyx_v_idx_stop;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_leaf_id,&__pyx_n_s_ndim,&__pyx_n_s_ncells,&__pyx_n_s_idx_inf,&__pyx_n_s_verts,&__pyx_n_s_neigh,&__pyx_n_s_sort_verts,&__pyx_n_s_sort_cells,&__pyx_n_s_idx_start,&__pyx_n_s_idx_stop,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_leaf_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ndim)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 10, 10, 1); __PYX_ERR(0, 1084, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ncells)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 10, 10, 2); __PYX_ERR(0, 1084, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx_inf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 10, 10, 3); __PYX_ERR(0, 1084, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_verts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 10, 10, 4); __PYX_ERR(0, 1084, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_neigh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 10, 10, 5); __PYX_ERR(0, 1084, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sort_verts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 10, 10, 6); __PYX_ERR(0, 1084, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sort_cells)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 10, 10, 7); __PYX_ERR(0, 1084, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx_start)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 10, 10, 8); __PYX_ERR(0, 1084, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx_stop)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 10, 10, 9); __PYX_ERR(0, 1084, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1084, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 10) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
    }
    __pyx_v_leaf_id = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_leaf_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1084, __pyx_L3_error)
    __pyx_v_ndim = __Pyx_PyInt_As_uint32_t(values[1]); if (unlikely((__pyx_v_ndim == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1084, __pyx_L3_error)
    __pyx_v_ncells = __Pyx_PyInt_As_int64_t(values[2]); if (unlikely((__pyx_v_ncells == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1084, __pyx_L3_error)
    __pyx_v_idx_inf = __Pyx_PyInt_As_uint32_t(values[3]); if (unlikely((__pyx_v_idx_inf == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1084, __pyx_L3_error)
    __pyx_v_verts = ((PyArrayObject *)values[4]);
    __pyx_v_neigh = ((PyArrayObject *)values[5]);
    __pyx_v_sort_verts = ((PyArrayObject *)values[6]);
    __pyx_v_sort_cells = ((PyArrayObject *)values[7]);
    __pyx_v_idx_start = __Pyx_PyInt_As_uint64_t(values[8]); if (unlikely((__pyx_v_idx_start == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1089, __pyx_L3_error)
    __pyx_v_idx_stop = __Pyx_PyInt_As_uint64_t(values[9]); if (unlikely((__pyx_v_idx_stop == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1089, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 10, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1084, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf32.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_verts), __pyx_ptype_5numpy_ndarray, 1, "verts", 0))) __PYX_ERR(0, 1085, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_neigh), __pyx_ptype_5numpy_ndarray, 1, "neigh", 0))) __PYX_ERR(0, 1086, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sort_verts), __pyx_ptype_5numpy_ndarray, 1, "sort_verts", 0))) __PYX_ERR(0, 1087, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sort_cells), __pyx_ptype_5numpy_ndarray, 1, "sort_cells", 0))) __PYX_ERR(0, 1088, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32___cinit__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)__pyx_v_self), __pyx_v_leaf_id, __pyx_v_ndim, __pyx_v_ncells, __pyx_v_idx_inf, __pyx_v_verts, __pyx_v_neigh, __pyx_v_sort_verts, __pyx_v_sort_cells, __pyx_v_idx_start, __pyx_v_idx_stop);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32___cinit__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self, int __pyx_v_leaf_id, uint32_t __pyx_v_ndim, int64_t __pyx_v_ncells, uint32_t __pyx_v_idx_inf, PyArrayObject *__pyx_v_verts, PyArrayObject *__pyx_v_neigh, PyArrayObject *__pyx_v_sort_verts, PyArrayObject *__pyx_v_sort_cells, uint64_t __pyx_v_idx_start, uint64_t __pyx_v_idx_stop) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_neigh;
  __Pyx_Buffer __pyx_pybuffer_neigh;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_sort_cells;
  __Pyx_Buffer __pyx_pybuffer_sort_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_sort_verts;
  __Pyx_Buffer __pyx_pybuffer_sort_verts;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_verts;
  __Pyx_Buffer __pyx_pybuffer_verts;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  SerializedLeaf<uint32_t>  *__pyx_t_8;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __pyx_pybuffer_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_verts.refcount = 0;
  __pyx_pybuffernd_verts.data = NULL;
  __pyx_pybuffernd_verts.rcbuffer = &__pyx_pybuffer_verts;
  __pyx_pybuffer_neigh.pybuffer.buf = NULL;
  __pyx_pybuffer_neigh.refcount = 0;
  __pyx_pybuffernd_neigh.data = NULL;
  __pyx_pybuffernd_neigh.rcbuffer = &__pyx_pybuffer_neigh;
  __pyx_pybuffer_sort_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_sort_verts.refcount = 0;
  __pyx_pybuffernd_sort_verts.data = NULL;
  __pyx_pybuffernd_sort_verts.rcbuffer = &__pyx_pybuffer_sort_verts;
  __pyx_pybuffer_sort_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_sort_cells.refcount = 0;
  __pyx_pybuffernd_sort_cells.data = NULL;
  __pyx_pybuffernd_sort_cells.rcbuffer = &__pyx_pybuffer_sort_cells;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1084, __pyx_L1_error)
  }
  __pyx_pybuffernd_verts.diminfo[0].strides = __pyx_pybuffernd_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_verts.diminfo[0].shape = __pyx_pybuffernd_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_verts.diminfo[1].strides = __pyx_pybuffernd_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_verts.diminfo[1].shape = __pyx_pybuffernd_verts.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer, (PyObject*)__pyx_v_neigh, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1084, __pyx_L1_error)
  }
  __pyx_pybuffernd_neigh.diminfo[0].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_neigh.diminfo[0].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_neigh.diminfo[1].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_neigh.diminfo[1].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sort_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_sort_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1084, __pyx_L1_error)
  }
  __pyx_pybuffernd_sort_verts.diminfo[0].strides = __pyx_pybuffernd_sort_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sort_verts.diminfo[0].shape = __pyx_pybuffernd_sort_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_sort_verts.diminfo[1].strides = __pyx_pybuffernd_sort_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_sort_verts.diminfo[1].shape = __pyx_pybuffernd_sort_verts.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sort_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_sort_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1084, __pyx_L1_error)
  }
  __pyx_pybuffernd_sort_cells.diminfo[0].strides = __pyx_pybuffernd_sort_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sort_cells.diminfo[0].shape = __pyx_pybuffernd_sort_cells.rcbuffer->pybuffer.shape[0];

  /* "cgal4py/delaunay/tools.pyx":1090
 *                   np.ndarray[np.uint64_t, ndim=1] sort_cells,
 *                   uint64_t idx_start, uint64_t idx_stop):
 *         self.id = leaf_id             # <<<<<<<<<<<<<<
 *         self.ndim = ndim
 *         self.ncells = ncells
 */
  __pyx_v_self->id = __pyx_v_leaf_id;

  /* "cgal4py/delaunay/tools.pyx":1091
 *                   uint64_t idx_start, uint64_t idx_stop):
 *         self.id = leaf_id
 *         self.ndim = ndim             # <<<<<<<<<<<<<<
 *         self.ncells = ncells
 *         self.idx_inf = idx_inf
 */
  __pyx_v_self->ndim = __pyx_v_ndim;

  /* "cgal4py/delaunay/tools.pyx":1092
 *         self.id = leaf_id
 *         self.ndim = ndim
 *         self.ncells = ncells             # <<<<<<<<<<<<<<
 *         self.idx_inf = idx_inf
 *         self.verts = verts
 */
  __pyx_v_self->ncells = __pyx_v_ncells;

  /* "cgal4py/delaunay/tools.pyx":1093
 *         self.ndim = ndim
 *         self.ncells = ncells
 *         self.idx_inf = idx_inf             # <<<<<<<<<<<<<<
 *         self.verts = verts
 *         self.neigh = neigh
 */
  __pyx_v_self->idx_inf = __pyx_v_idx_inf;

  /* "cgal4py/delaunay/tools.pyx":1094
 *         self.ncells = ncells
 *         self.idx_inf = idx_inf
 *         self.verts = verts             # <<<<<<<<<<<<<<
 *         self.neigh = neigh
 *         self.sort_verts = sort_verts
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_verts));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_verts));
  __Pyx_GOTREF(__pyx_v_self->verts);
  __Pyx_DECREF(__pyx_v_self->verts);
  __pyx_v_self->verts = ((PyObject *)__pyx_v_verts);

  /* "cgal4py/delaunay/tools.pyx":1095
 *         self.idx_inf = idx_inf
 *         self.verts = verts
 *         self.neigh = neigh             # <<<<<<<<<<<<<<
 *         self.sort_verts = sort_verts
 *         self.sort_cells = sort_cells
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_neigh));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_neigh));
  __Pyx_GOTREF(__pyx_v_self->neigh);
  __Pyx_DECREF(__pyx_v_self->neigh);
  __pyx_v_self->neigh = ((PyObject *)__pyx_v_neigh);

  /* "cgal4py/delaunay/tools.pyx":1096
 *         self.verts = verts
 *         self.neigh = neigh
 *         self.sort_verts = sort_verts             # <<<<<<<<<<<<<<
 *         self.sort_cells = sort_cells
 *         self.idx_start = idx_start
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_sort_verts));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_sort_verts));
  __Pyx_GOTREF(__pyx_v_self->sort_verts);
  __Pyx_DECREF(__pyx_v_self->sort_verts);
  __pyx_v_self->sort_verts = ((PyObject *)__pyx_v_sort_verts);

  /* "cgal4py/delaunay/tools.pyx":1097
 *         self.neigh = neigh
 *         self.sort_verts = sort_verts
 *         self.sort_cells = sort_cells             # <<<<<<<<<<<<<<
 *         self.idx_start = idx_start
 *         self.idx_stop = idx_stop
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_sort_cells));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_sort_cells));
  __Pyx_GOTREF(__pyx_v_self->sort_cells);
  __Pyx_DECREF(__pyx_v_self->sort_cells);
  __pyx_v_self->sort_cells = ((PyObject *)__pyx_v_sort_cells);

  /* "cgal4py/delaunay/tools.pyx":1098
 *         self.sort_verts = sort_verts
 *         self.sort_cells = sort_cells
 *         self.idx_start = idx_start             # <<<<<<<<<<<<<<
 *         self.idx_stop = idx_stop
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __pyx_v_self->idx_start = __pyx_v_idx_start;

  /* "cgal4py/delaunay/tools.pyx":1099
 *         self.sort_cells = sort_cells
 *         self.idx_start = idx_start
 *         self.idx_stop = idx_stop             # <<<<<<<<<<<<<<
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             self.SL = new SerializedLeaf[uint32_t](
 */
  __pyx_v_self->idx_stop = __pyx_v_idx_stop;

  /* "cgal4py/delaunay/tools.pyx":1100
 *         self.idx_start = idx_start
 *         self.idx_stop = idx_stop
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *             self.SL = new SerializedLeaf[uint32_t](
 *                 leaf_id, ndim, ncells, idx_inf, &verts[0,0], &neigh[0,0],
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":1102
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             self.SL = new SerializedLeaf[uint32_t](
 *                 leaf_id, ndim, ncells, idx_inf, &verts[0,0], &neigh[0,0],             # <<<<<<<<<<<<<<
 *                 &sort_verts[0,0], &sort_cells[0], idx_start, idx_stop)
 * 
 */
        __pyx_t_1 = 0;
        __pyx_t_2 = 0;
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;

        /* "cgal4py/delaunay/tools.pyx":1103
 *             self.SL = new SerializedLeaf[uint32_t](
 *                 leaf_id, ndim, ncells, idx_inf, &verts[0,0], &neigh[0,0],
 *                 &sort_verts[0,0], &sort_cells[0], idx_start, idx_stop)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
        __pyx_t_5 = 0;
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;

        /* "cgal4py/delaunay/tools.pyx":1101
 *         self.idx_stop = idx_stop
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             self.SL = new SerializedLeaf[uint32_t](             # <<<<<<<<<<<<<<
 *                 leaf_id, ndim, ncells, idx_inf, &verts[0,0], &neigh[0,0],
 *                 &sort_verts[0,0], &sort_cells[0], idx_start, idx_stop)
 */
        try {
          __pyx_t_8 = new SerializedLeaf<uint32_t> (__pyx_v_leaf_id, __pyx_v_ndim, __pyx_v_ncells, __pyx_v_idx_inf, (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_verts.rcbuffer->pybuffer.buf, __pyx_t_1, __pyx_pybuffernd_verts.diminfo[0].strides, __pyx_t_2, __pyx_pybuffernd_verts.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_neigh.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_neigh.diminfo[0].strides, __pyx_t_4, __pyx_pybuffernd_neigh.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_sort_verts.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_sort_verts.diminfo[0].strides, __pyx_t_6, __pyx_pybuffernd_sort_verts.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_sort_cells.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_sort_cells.diminfo[0].strides))), __pyx_v_idx_start, __pyx_v_idx_stop);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1101, __pyx_L4_error)
        }
        __pyx_v_self->SL = __pyx_t_8;
      }

      /* "cgal4py/delaunay/tools.pyx":1100
 *         self.idx_start = idx_start
 *         self.idx_stop = idx_stop
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *             self.SL = new SerializedLeaf[uint32_t](
 *                 leaf_id, ndim, ncells, idx_inf, &verts[0,0], &neigh[0,0],
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":1084
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     def __cinit__(self, int leaf_id, uint32_t ndim, int64_t ncells, uint32_t idx_inf,             # <<<<<<<<<<<<<<
 *                   np.ndarray[np.uint32_t, ndim=2] verts,
 *                   np.ndarray[np.uint32_t, ndim=2] neigh,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sort_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sort_verts.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf32.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sort_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sort_verts.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1105
 *                 &sort_verts[0,0], &sort_cells[0], idx_start, idx_stop)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         self.SL.cleanup()
 * 
 */

/* Python wrapper */
static void __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_2__dealloc__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_2__dealloc__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cgal4py/delaunay/tools.pyx":1106
 * 
 *     def __dealloc__(self):
 *         self.SL.cleanup()             # <<<<<<<<<<<<<<
 * 
 * cdef class SerializedLeaf64:
 */
  __pyx_v_self->SL->cleanup();

  /* "cgal4py/delaunay/tools.pyx":1105
 *                 &sort_verts[0,0], &sort_cells[0], idx_start, idx_stop)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         self.SL.cleanup()
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cgal4py/delaunay/tools.pyx":1071
 *     """
 *     cdef SerializedLeaf[uint32_t] *SL
 *     cdef public int id             # <<<<<<<<<<<<<<
 *     cdef public np.uint32_t ndim
 *     cdef public np.int64_t ncells
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_2id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_2id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_2id___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_2id___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf32.id.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_2id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_2id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_2id_2__set__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_2id_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1071, __pyx_L1_error)
  __pyx_v_self->id = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf32.id.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1072
 *     cdef SerializedLeaf[uint32_t] *SL
 *     cdef public int id
 *     cdef public np.uint32_t ndim             # <<<<<<<<<<<<<<
 *     cdef public np.int64_t ncells
 *     cdef public np.uint32_t idx_inf
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_4ndim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_4ndim_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_4ndim___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_4ndim___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_npy_uint32(__pyx_v_self->ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf32.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_4ndim_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_4ndim_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_4ndim_2__set__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_4ndim_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_uint32_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_npy_uint32(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1072, __pyx_L1_error)
  __pyx_v_self->ndim = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf32.ndim.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1073
 *     cdef public int id
 *     cdef public np.uint32_t ndim
 *     cdef public np.int64_t ncells             # <<<<<<<<<<<<<<
 *     cdef public np.uint32_t idx_inf
 *     cdef public object verts
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_6ncells_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_6ncells_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_6ncells___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_6ncells___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_npy_int64(__pyx_v_self->ncells); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1073, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf32.ncells.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_6ncells_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_6ncells_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_6ncells_2__set__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_6ncells_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_int64_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_npy_int64(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_int64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1073, __pyx_L1_error)
  __pyx_v_self->ncells = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf32.ncells.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1074
 *     cdef public np.uint32_t ndim
 *     cdef public np.int64_t ncells
 *     cdef public np.uint32_t idx_inf             # <<<<<<<<<<<<<<
 *     cdef public object verts
 *     cdef public object neigh
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_7idx_inf_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_7idx_inf_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_7idx_inf___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_7idx_inf___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_npy_uint32(__pyx_v_self->idx_inf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf32.idx_inf.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_7idx_inf_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_7idx_inf_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_7idx_inf_2__set__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_7idx_inf_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_uint32_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_npy_uint32(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1074, __pyx_L1_error)
  __pyx_v_self->idx_inf = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf32.idx_inf.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1075
 *     cdef public np.int64_t ncells
 *     cdef public np.uint32_t idx_inf
 *     cdef public object verts             # <<<<<<<<<<<<<<
 *     cdef public object neigh
 *     cdef public object sort_verts
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5verts_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5verts_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5verts___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5verts___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->verts);
  __pyx_r = __pyx_v_self->verts;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5verts_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5verts_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5verts_2__set__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5verts_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->verts);
  __Pyx_DECREF(__pyx_v_self->verts);
  __pyx_v_self->verts = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5verts_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5verts_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5verts_4__del__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5verts_4__del__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->verts);
  __Pyx_DECREF(__pyx_v_self->verts);
  __pyx_v_self->verts = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1076
 *     cdef public np.uint32_t idx_inf
 *     cdef public object verts
 *     cdef public object neigh             # <<<<<<<<<<<<<<
 *     cdef public object sort_verts
 *     cdef public object sort_cells
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5neigh_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5neigh_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5neigh___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5neigh___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->neigh);
  __pyx_r = __pyx_v_self->neigh;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5neigh_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5neigh_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5neigh_2__set__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5neigh_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->neigh);
  __Pyx_DECREF(__pyx_v_self->neigh);
  __pyx_v_self->neigh = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5neigh_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5neigh_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5neigh_4__del__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5neigh_4__del__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->neigh);
  __Pyx_DECREF(__pyx_v_self->neigh);
  __pyx_v_self->neigh = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1077
 *     cdef public object verts
 *     cdef public object neigh
 *     cdef public object sort_verts             # <<<<<<<<<<<<<<
 *     cdef public object sort_cells
 *     cdef public np.uint64_t idx_start
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_verts_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_verts_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_verts___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_verts___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->sort_verts);
  __pyx_r = __pyx_v_self->sort_verts;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_verts_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_verts_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_verts_2__set__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_verts_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->sort_verts);
  __Pyx_DECREF(__pyx_v_self->sort_verts);
  __pyx_v_self->sort_verts = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_verts_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_verts_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_verts_4__del__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_verts_4__del__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->sort_verts);
  __Pyx_DECREF(__pyx_v_self->sort_verts);
  __pyx_v_self->sort_verts = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1078
 *     cdef public object neigh
 *     cdef public object sort_verts
 *     cdef public object sort_cells             # <<<<<<<<<<<<<<
 *     cdef public np.uint64_t idx_start
 *     cdef public np.uint64_t idx_stop
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_cells_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_cells_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_cells___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_cells___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->sort_cells);
  __pyx_r = __pyx_v_self->sort_cells;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_cells_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_cells_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_cells_2__set__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_cells_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->sort_cells);
  __Pyx_DECREF(__pyx_v_self->sort_cells);
  __pyx_v_self->sort_cells = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_cells_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_cells_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_cells_4__del__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_cells_4__del__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->sort_cells);
  __Pyx_DECREF(__pyx_v_self->sort_cells);
  __pyx_v_self->sort_cells = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1079
 *     cdef public object sort_verts
 *     cdef public object sort_cells
 *     cdef public np.uint64_t idx_start             # <<<<<<<<<<<<<<
 *     cdef public np.uint64_t idx_stop
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_9idx_start_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_9idx_start_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_9idx_start___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_9idx_start___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_npy_uint64(__pyx_v_self->idx_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1079, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf32.idx_start.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_9idx_start_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_9idx_start_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_9idx_start_2__set__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_9idx_start_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_uint64_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_npy_uint64(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1079, __pyx_L1_error)
  __pyx_v_self->idx_start = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf32.idx_start.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1080
 *     cdef public object sort_cells
 *     cdef public np.uint64_t idx_start
 *     cdef public np.uint64_t idx_stop             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_8idx_stop_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_8idx_stop_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_8idx_stop___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_8idx_stop___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_npy_uint64(__pyx_v_self->idx_stop); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1080, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf32.idx_stop.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_8idx_stop_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_8idx_stop_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_8idx_stop_2__set__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_8idx_stop_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_uint64_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_npy_uint64(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1080, __pyx_L1_error)
  __pyx_v_self->idx_stop = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf32.idx_stop.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_4__reduce_cython__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf32.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_6__setstate_cython__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf32_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf32.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1158
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     def __cinit__(self, int leaf_id, uint32_t ndim, int64_t ncells, uint64_t idx_inf,             # <<<<<<<<<<<<<<
 *                   np.ndarray[np.uint64_t, ndim=2] verts,
 *                   np.ndarray[np.uint64_t, ndim=2] neigh,
 */

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_leaf_id;
  uint32_t __pyx_v_ndim;
  int64_t __pyx_v_ncells;
  uint64_t __pyx_v_idx_inf;
  PyArrayObject *__pyx_v_verts = 0;
  PyArrayObject *__pyx_v_neigh = 0;
  PyArrayObject *__pyx_v_sort_verts = 0;
  PyArrayObject *__pyx_v_sort_cells = 0;
  uint64_t __pyx_v_idx_start;
  uint64_t __pyx_v_idx_stop;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_leaf_id,&__pyx_n_s_ndim,&__pyx_n_s_ncells,&__pyx_n_s_idx_inf,&__pyx_n_s_verts,&__pyx_n_s_neigh,&__pyx_n_s_sort_verts,&__pyx_n_s_sort_cells,&__pyx_n_s_idx_start,&__pyx_n_s_idx_stop,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_leaf_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ndim)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 10, 10, 1); __PYX_ERR(0, 1158, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ncells)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 10, 10, 2); __PYX_ERR(0, 1158, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx_inf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 10, 10, 3); __PYX_ERR(0, 1158, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_verts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 10, 10, 4); __PYX_ERR(0, 1158, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_neigh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 10, 10, 5); __PYX_ERR(0, 1158, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sort_verts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 10, 10, 6); __PYX_ERR(0, 1158, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sort_cells)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 10, 10, 7); __PYX_ERR(0, 1158, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx_start)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 10, 10, 8); __PYX_ERR(0, 1158, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx_stop)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 10, 10, 9); __PYX_ERR(0, 1158, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1158, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 10) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
    }
    __pyx_v_leaf_id = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_leaf_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1158, __pyx_L3_error)
    __pyx_v_ndim = __Pyx_PyInt_As_uint32_t(values[1]); if (unlikely((__pyx_v_ndim == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1158, __pyx_L3_error)
    __pyx_v_ncells = __Pyx_PyInt_As_int64_t(values[2]); if (unlikely((__pyx_v_ncells == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1158, __pyx_L3_error)
    __pyx_v_idx_inf = __Pyx_PyInt_As_uint64_t(values[3]); if (unlikely((__pyx_v_idx_inf == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1158, __pyx_L3_error)
    __pyx_v_verts = ((PyArrayObject *)values[4]);
    __pyx_v_neigh = ((PyArrayObject *)values[5]);
    __pyx_v_sort_verts = ((PyArrayObject *)values[6]);
    __pyx_v_sort_cells = ((PyArrayObject *)values[7]);
    __pyx_v_idx_start = __Pyx_PyInt_As_uint64_t(values[8]); if (unlikely((__pyx_v_idx_start == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1163, __pyx_L3_error)
    __pyx_v_idx_stop = __Pyx_PyInt_As_uint64_t(values[9]); if (unlikely((__pyx_v_idx_stop == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1163, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 10, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1158, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf64.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_verts), __pyx_ptype_5numpy_ndarray, 1, "verts", 0))) __PYX_ERR(0, 1159, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_neigh), __pyx_ptype_5numpy_ndarray, 1, "neigh", 0))) __PYX_ERR(0, 1160, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sort_verts), __pyx_ptype_5numpy_ndarray, 1, "sort_verts", 0))) __PYX_ERR(0, 1161, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sort_cells), __pyx_ptype_5numpy_ndarray, 1, "sort_cells", 0))) __PYX_ERR(0, 1162, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64___cinit__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)__pyx_v_self), __pyx_v_leaf_id, __pyx_v_ndim, __pyx_v_ncells, __pyx_v_idx_inf, __pyx_v_verts, __pyx_v_neigh, __pyx_v_sort_verts, __pyx_v_sort_cells, __pyx_v_idx_start, __pyx_v_idx_stop);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64___cinit__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self, int __pyx_v_leaf_id, uint32_t __pyx_v_ndim, int64_t __pyx_v_ncells, uint64_t __pyx_v_idx_inf, PyArrayObject *__pyx_v_verts, PyArrayObject *__pyx_v_neigh, PyArrayObject *__pyx_v_sort_verts, PyArrayObject *__pyx_v_sort_cells, uint64_t __pyx_v_idx_start, uint64_t __pyx_v_idx_stop) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_neigh;
  __Pyx_Buffer __pyx_pybuffer_neigh;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_sort_cells;
  __Pyx_Buffer __pyx_pybuffer_sort_cells;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_sort_verts;
  __Pyx_Buffer __pyx_pybuffer_sort_verts;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_verts;
  __Pyx_Buffer __pyx_pybuffer_verts;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  SerializedLeaf<uint64_t>  *__pyx_t_8;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __pyx_pybuffer_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_verts.refcount = 0;
  __pyx_pybuffernd_verts.data = NULL;
  __pyx_pybuffernd_verts.rcbuffer = &__pyx_pybuffer_verts;
  __pyx_pybuffer_neigh.pybuffer.buf = NULL;
  __pyx_pybuffer_neigh.refcount = 0;
  __pyx_pybuffernd_neigh.data = NULL;
  __pyx_pybuffernd_neigh.rcbuffer = &__pyx_pybuffer_neigh;
  __pyx_pybuffer_sort_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_sort_verts.refcount = 0;
  __pyx_pybuffernd_sort_verts.data = NULL;
  __pyx_pybuffernd_sort_verts.rcbuffer = &__pyx_pybuffer_sort_verts;
  __pyx_pybuffer_sort_cells.pybuffer.buf = NULL;
  __pyx_pybuffer_sort_cells.refcount = 0;
  __pyx_pybuffernd_sort_cells.data = NULL;
  __pyx_pybuffernd_sort_cells.rcbuffer = &__pyx_pybuffer_sort_cells;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1158, __pyx_L1_error)
  }
  __pyx_pybuffernd_verts.diminfo[0].strides = __pyx_pybuffernd_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_verts.diminfo[0].shape = __pyx_pybuffernd_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_verts.diminfo[1].strides = __pyx_pybuffernd_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_verts.diminfo[1].shape = __pyx_pybuffernd_verts.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer, (PyObject*)__pyx_v_neigh, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1158, __pyx_L1_error)
  }
  __pyx_pybuffernd_neigh.diminfo[0].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_neigh.diminfo[0].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_neigh.diminfo[1].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_neigh.diminfo[1].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sort_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_sort_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1158, __pyx_L1_error)
  }
  __pyx_pybuffernd_sort_verts.diminfo[0].strides = __pyx_pybuffernd_sort_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sort_verts.diminfo[0].shape = __pyx_pybuffernd_sort_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_sort_verts.diminfo[1].strides = __pyx_pybuffernd_sort_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_sort_verts.diminfo[1].shape = __pyx_pybuffernd_sort_verts.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sort_cells.rcbuffer->pybuffer, (PyObject*)__pyx_v_sort_cells, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1158, __pyx_L1_error)
  }
  __pyx_pybuffernd_sort_cells.diminfo[0].strides = __pyx_pybuffernd_sort_cells.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sort_cells.diminfo[0].shape = __pyx_pybuffernd_sort_cells.rcbuffer->pybuffer.shape[0];

  /* "cgal4py/delaunay/tools.pyx":1164
 *                   np.ndarray[np.uint64_t, ndim=1] sort_cells,
 *                   uint64_t idx_start, uint64_t idx_stop):
 *         self.id = leaf_id             # <<<<<<<<<<<<<<
 *         self.ndim = ndim
 *         self.ncells = ncells
 */
  __pyx_v_self->id = __pyx_v_leaf_id;

  /* "cgal4py/delaunay/tools.pyx":1165
 *                   uint64_t idx_start, uint64_t idx_stop):
 *         self.id = leaf_id
 *         self.ndim = ndim             # <<<<<<<<<<<<<<
 *         self.ncells = ncells
 *         self.idx_inf = idx_inf
 */
  __pyx_v_self->ndim = __pyx_v_ndim;

  /* "cgal4py/delaunay/tools.pyx":1166
 *         self.id = leaf_id
 *         self.ndim = ndim
 *         self.ncells = ncells             # <<<<<<<<<<<<<<
 *         self.idx_inf = idx_inf
 *         self.verts = verts
 */
  __pyx_v_self->ncells = __pyx_v_ncells;

  /* "cgal4py/delaunay/tools.pyx":1167
 *         self.ndim = ndim
 *         self.ncells = ncells
 *         self.idx_inf = idx_inf             # <<<<<<<<<<<<<<
 *         self.verts = verts
 *         self.neigh = neigh
 */
  __pyx_v_self->idx_inf = __pyx_v_idx_inf;

  /* "cgal4py/delaunay/tools.pyx":1168
 *         self.ncells = ncells
 *         self.idx_inf = idx_inf
 *         self.verts = verts             # <<<<<<<<<<<<<<
 *         self.neigh = neigh
 *         self.sort_verts = sort_verts
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_verts));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_verts));
  __Pyx_GOTREF(__pyx_v_self->verts);
  __Pyx_DECREF(__pyx_v_self->verts);
  __pyx_v_self->verts = ((PyObject *)__pyx_v_verts);

  /* "cgal4py/delaunay/tools.pyx":1169
 *         self.idx_inf = idx_inf
 *         self.verts = verts
 *         self.neigh = neigh             # <<<<<<<<<<<<<<
 *         self.sort_verts = sort_verts
 *         self.sort_cells = sort_cells
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_neigh));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_neigh));
  __Pyx_GOTREF(__pyx_v_self->neigh);
  __Pyx_DECREF(__pyx_v_self->neigh);
  __pyx_v_self->neigh = ((PyObject *)__pyx_v_neigh);

  /* "cgal4py/delaunay/tools.pyx":1170
 *         self.verts = verts
 *         self.neigh = neigh
 *         self.sort_verts = sort_verts             # <<<<<<<<<<<<<<
 *         self.sort_cells = sort_cells
 *         self.idx_start = idx_start
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_sort_verts));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_sort_verts));
  __Pyx_GOTREF(__pyx_v_self->sort_verts);
  __Pyx_DECREF(__pyx_v_self->sort_verts);
  __pyx_v_self->sort_verts = ((PyObject *)__pyx_v_sort_verts);

  /* "cgal4py/delaunay/tools.pyx":1171
 *         self.neigh = neigh
 *         self.sort_verts = sort_verts
 *         self.sort_cells = sort_cells             # <<<<<<<<<<<<<<
 *         self.idx_start = idx_start
 *         self.idx_stop = idx_stop
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_sort_cells));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_sort_cells));
  __Pyx_GOTREF(__pyx_v_self->sort_cells);
  __Pyx_DECREF(__pyx_v_self->sort_cells);
  __pyx_v_self->sort_cells = ((PyObject *)__pyx_v_sort_cells);

  /* "cgal4py/delaunay/tools.pyx":1172
 *         self.sort_verts = sort_verts
 *         self.sort_cells = sort_cells
 *         self.idx_start = idx_start             # <<<<<<<<<<<<<<
 *         self.idx_stop = idx_stop
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __pyx_v_self->idx_start = __pyx_v_idx_start;

  /* "cgal4py/delaunay/tools.pyx":1173
 *         self.sort_cells = sort_cells
 *         self.idx_start = idx_start
 *         self.idx_stop = idx_stop             # <<<<<<<<<<<<<<
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             self.SL = new SerializedLeaf[uint64_t](
 */
  __pyx_v_self->idx_stop = __pyx_v_idx_stop;

  /* "cgal4py/delaunay/tools.pyx":1174
 *         self.idx_start = idx_start
 *         self.idx_stop = idx_stop
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *             self.SL = new SerializedLeaf[uint64_t](
 *                 leaf_id, ndim, ncells, idx_inf, &verts[0,0], &neigh[0,0],
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":1176
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             self.SL = new SerializedLeaf[uint64_t](
 *                 leaf_id, ndim, ncells, idx_inf, &verts[0,0], &neigh[0,0],             # <<<<<<<<<<<<<<
 *                 &sort_verts[0,0], &sort_cells[0], idx_start, idx_stop)
 * 
 */
        __pyx_t_1 = 0;
        __pyx_t_2 = 0;
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;

        /* "cgal4py/delaunay/tools.pyx":1177
 *             self.SL = new SerializedLeaf[uint64_t](
 *                 leaf_id, ndim, ncells, idx_inf, &verts[0,0], &neigh[0,0],
 *                 &sort_verts[0,0], &sort_cells[0], idx_start, idx_stop)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
        __pyx_t_5 = 0;
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;

        /* "cgal4py/delaunay/tools.pyx":1175
 *         self.idx_stop = idx_stop
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             self.SL = new SerializedLeaf[uint64_t](             # <<<<<<<<<<<<<<
 *                 leaf_id, ndim, ncells, idx_inf, &verts[0,0], &neigh[0,0],
 *                 &sort_verts[0,0], &sort_cells[0], idx_start, idx_stop)
 */
        try {
          __pyx_t_8 = new SerializedLeaf<uint64_t> (__pyx_v_leaf_id, __pyx_v_ndim, __pyx_v_ncells, __pyx_v_idx_inf, (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_verts.rcbuffer->pybuffer.buf, __pyx_t_1, __pyx_pybuffernd_verts.diminfo[0].strides, __pyx_t_2, __pyx_pybuffernd_verts.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_neigh.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_neigh.diminfo[0].strides, __pyx_t_4, __pyx_pybuffernd_neigh.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_sort_verts.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_sort_verts.diminfo[0].strides, __pyx_t_6, __pyx_pybuffernd_sort_verts.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_sort_cells.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_sort_cells.diminfo[0].strides))), __pyx_v_idx_start, __pyx_v_idx_stop);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1175, __pyx_L4_error)
        }
        __pyx_v_self->SL = __pyx_t_8;
      }

      /* "cgal4py/delaunay/tools.pyx":1174
 *         self.idx_start = idx_start
 *         self.idx_stop = idx_stop
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *             self.SL = new SerializedLeaf[uint64_t](
 *                 leaf_id, ndim, ncells, idx_inf, &verts[0,0], &neigh[0,0],
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":1158
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     def __cinit__(self, int leaf_id, uint32_t ndim, int64_t ncells, uint64_t idx_inf,             # <<<<<<<<<<<<<<
 *                   np.ndarray[np.uint64_t, ndim=2] verts,
 *                   np.ndarray[np.uint64_t, ndim=2] neigh,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sort_cells.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sort_verts.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf64.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sort_cells.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sort_verts.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1179
 *                 &sort_verts[0,0], &sort_cells[0], idx_start, idx_stop)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         self.SL.cleanup()
 * 
 */

/* Python wrapper */
static void __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_2__dealloc__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_2__dealloc__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cgal4py/delaunay/tools.pyx":1180
 * 
 *     def __dealloc__(self):
 *         self.SL.cleanup()             # <<<<<<<<<<<<<<
 * 
 * cdef class ConsolidatedLeaves32:
 */
  __pyx_v_self->SL->cleanup();

  /* "cgal4py/delaunay/tools.pyx":1179
 *                 &sort_verts[0,0], &sort_cells[0], idx_start, idx_stop)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         self.SL.cleanup()
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cgal4py/delaunay/tools.pyx":1145
 *     """
 *     cdef SerializedLeaf[uint64_t] *SL
 *     cdef public int id             # <<<<<<<<<<<<<<
 *     cdef public np.uint32_t ndim
 *     cdef public np.int64_t ncells
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_2id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_2id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_2id___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_2id___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf64.id.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_2id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_2id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_2id_2__set__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_2id_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1145, __pyx_L1_error)
  __pyx_v_self->id = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf64.id.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1146
 *     cdef SerializedLeaf[uint64_t] *SL
 *     cdef public int id
 *     cdef public np.uint32_t ndim             # <<<<<<<<<<<<<<
 *     cdef public np.int64_t ncells
 *     cdef public np.uint64_t idx_inf
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_4ndim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_4ndim_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_4ndim___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_4ndim___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_npy_uint32(__pyx_v_self->ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf64.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_4ndim_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_4ndim_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_4ndim_2__set__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_4ndim_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_uint32_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_npy_uint32(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1146, __pyx_L1_error)
  __pyx_v_self->ndim = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf64.ndim.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1147
 *     cdef public int id
 *     cdef public np.uint32_t ndim
 *     cdef public np.int64_t ncells             # <<<<<<<<<<<<<<
 *     cdef public np.uint64_t idx_inf
 *     cdef public object verts
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_6ncells_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_6ncells_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_6ncells___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_6ncells___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_npy_int64(__pyx_v_self->ncells); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf64.ncells.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_6ncells_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_6ncells_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_6ncells_2__set__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_6ncells_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_int64_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_npy_int64(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_int64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1147, __pyx_L1_error)
  __pyx_v_self->ncells = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf64.ncells.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1148
 *     cdef public np.uint32_t ndim
 *     cdef public np.int64_t ncells
 *     cdef public np.uint64_t idx_inf             # <<<<<<<<<<<<<<
 *     cdef public object verts
 *     cdef public object neigh
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_7idx_inf_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_7idx_inf_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_7idx_inf___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_7idx_inf___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_npy_uint64(__pyx_v_self->idx_inf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf64.idx_inf.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_7idx_inf_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_7idx_inf_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_7idx_inf_2__set__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_7idx_inf_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_uint64_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_npy_uint64(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1148, __pyx_L1_error)
  __pyx_v_self->idx_inf = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf64.idx_inf.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1149
 *     cdef public np.int64_t ncells
 *     cdef public np.uint64_t idx_inf
 *     cdef public object verts             # <<<<<<<<<<<<<<
 *     cdef public object neigh
 *     cdef public object sort_verts
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5verts_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5verts_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5verts___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5verts___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->verts);
  __pyx_r = __pyx_v_self->verts;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5verts_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5verts_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5verts_2__set__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5verts_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->verts);
  __Pyx_DECREF(__pyx_v_self->verts);
  __pyx_v_self->verts = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5verts_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5verts_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5verts_4__del__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5verts_4__del__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->verts);
  __Pyx_DECREF(__pyx_v_self->verts);
  __pyx_v_self->verts = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1150
 *     cdef public np.uint64_t idx_inf
 *     cdef public object verts
 *     cdef public object neigh             # <<<<<<<<<<<<<<
 *     cdef public object sort_verts
 *     cdef public object sort_cells
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5neigh_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5neigh_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5neigh___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5neigh___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->neigh);
  __pyx_r = __pyx_v_self->neigh;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5neigh_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5neigh_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5neigh_2__set__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5neigh_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->neigh);
  __Pyx_DECREF(__pyx_v_self->neigh);
  __pyx_v_self->neigh = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5neigh_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5neigh_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5neigh_4__del__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5neigh_4__del__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->neigh);
  __Pyx_DECREF(__pyx_v_self->neigh);
  __pyx_v_self->neigh = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1151
 *     cdef public object verts
 *     cdef public object neigh
 *     cdef public object sort_verts             # <<<<<<<<<<<<<<
 *     cdef public object sort_cells
 *     cdef public np.uint64_t idx_start
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_verts_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_verts_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_verts___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_verts___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->sort_verts);
  __pyx_r = __pyx_v_self->sort_verts;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_verts_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_verts_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_verts_2__set__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_verts_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->sort_verts);
  __Pyx_DECREF(__pyx_v_self->sort_verts);
  __pyx_v_self->sort_verts = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_verts_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_verts_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_verts_4__del__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_verts_4__del__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->sort_verts);
  __Pyx_DECREF(__pyx_v_self->sort_verts);
  __pyx_v_self->sort_verts = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1152
 *     cdef public object neigh
 *     cdef public object sort_verts
 *     cdef public object sort_cells             # <<<<<<<<<<<<<<
 *     cdef public np.uint64_t idx_start
 *     cdef public np.uint64_t idx_stop
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_cells_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_cells_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_cells___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_cells___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->sort_cells);
  __pyx_r = __pyx_v_self->sort_cells;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_cells_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_cells_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_cells_2__set__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_cells_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->sort_cells);
  __Pyx_DECREF(__pyx_v_self->sort_cells);
  __pyx_v_self->sort_cells = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_cells_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_cells_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_cells_4__del__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_cells_4__del__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->sort_cells);
  __Pyx_DECREF(__pyx_v_self->sort_cells);
  __pyx_v_self->sort_cells = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1153
 *     cdef public object sort_verts
 *     cdef public object sort_cells
 *     cdef public np.uint64_t idx_start             # <<<<<<<<<<<<<<
 *     cdef public np.uint64_t idx_stop
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_9idx_start_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_9idx_start_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_9idx_start___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_9idx_start___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_npy_uint64(__pyx_v_self->idx_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf64.idx_start.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_9idx_start_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_9idx_start_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_9idx_start_2__set__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_9idx_start_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_uint64_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_npy_uint64(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1153, __pyx_L1_error)
  __pyx_v_self->idx_start = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf64.idx_start.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1154
 *     cdef public object sort_cells
 *     cdef public np.uint64_t idx_start
 *     cdef public np.uint64_t idx_stop             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_8idx_stop_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_8idx_stop_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_8idx_stop___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_8idx_stop___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_npy_uint64(__pyx_v_self->idx_stop); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf64.idx_stop.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_8idx_stop_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_8idx_stop_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_8idx_stop_2__set__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_8idx_stop_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_uint64_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_npy_uint64(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1154, __pyx_L1_error)
  __pyx_v_self->idx_stop = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf64.idx_stop.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_4__reduce_cython__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf64.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_6__setstate_cython__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_16SerializedLeaf64_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.SerializedLeaf64.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1206
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     def __cinit__(self, uint32_t ndim, uint32_t idx_inf, int64_t max_ncells):             # <<<<<<<<<<<<<<
 *         self.ndim = ndim
 *         self.idx_inf = idx_inf
 */

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint32_t __pyx_v_ndim;
  uint32_t __pyx_v_idx_inf;
  int64_t __pyx_v_max_ncells;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ndim,&__pyx_n_s_idx_inf,&__pyx_n_s_max_ncells,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ndim)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx_inf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 1); __PYX_ERR(0, 1206, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_ncells)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 2); __PYX_ERR(0, 1206, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1206, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_ndim = __Pyx_PyInt_As_uint32_t(values[0]); if (unlikely((__pyx_v_ndim == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1206, __pyx_L3_error)
    __pyx_v_idx_inf = __Pyx_PyInt_As_uint32_t(values[1]); if (unlikely((__pyx_v_idx_inf == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1206, __pyx_L3_error)
    __pyx_v_max_ncells = __Pyx_PyInt_As_int64_t(values[2]); if (unlikely((__pyx_v_max_ncells == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1206, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1206, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.ConsolidatedLeaves32.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32___cinit__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *)__pyx_v_self), __pyx_v_ndim, __pyx_v_idx_inf, __pyx_v_max_ncells);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32___cinit__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self, uint32_t __pyx_v_ndim, uint32_t __pyx_v_idx_inf, int64_t __pyx_v_max_ncells) {
  PyArrayObject *__pyx_v_verts = 0;
  PyArrayObject *__pyx_v_neigh = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_neigh;
  __Pyx_Buffer __pyx_pybuffer_neigh;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_verts;
  __Pyx_Buffer __pyx_pybuffer_verts;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyArrayObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyArrayObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  ConsolidatedLeaves<uint32_t>  *__pyx_t_16;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __pyx_pybuffer_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_verts.refcount = 0;
  __pyx_pybuffernd_verts.data = NULL;
  __pyx_pybuffernd_verts.rcbuffer = &__pyx_pybuffer_verts;
  __pyx_pybuffer_neigh.pybuffer.buf = NULL;
  __pyx_pybuffer_neigh.refcount = 0;
  __pyx_pybuffernd_neigh.data = NULL;
  __pyx_pybuffernd_neigh.rcbuffer = &__pyx_pybuffer_neigh;

  /* "cgal4py/delaunay/tools.pyx":1207
 *     @cython.wraparound(False)
 *     def __cinit__(self, uint32_t ndim, uint32_t idx_inf, int64_t max_ncells):
 *         self.ndim = ndim             # <<<<<<<<<<<<<<
 *         self.idx_inf = idx_inf
 *         self.max_ncells = max_ncells
 */
  __pyx_v_self->ndim = __pyx_v_ndim;

  /* "cgal4py/delaunay/tools.pyx":1208
 *     def __cinit__(self, uint32_t ndim, uint32_t idx_inf, int64_t max_ncells):
 *         self.ndim = ndim
 *         self.idx_inf = idx_inf             # <<<<<<<<<<<<<<
 *         self.max_ncells = max_ncells
 *         cdef np.ndarray[np.uint32_t, ndim=2] verts
 */
  __pyx_v_self->idx_inf = __pyx_v_idx_inf;

  /* "cgal4py/delaunay/tools.pyx":1209
 *         self.ndim = ndim
 *         self.idx_inf = idx_inf
 *         self.max_ncells = max_ncells             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.uint32_t, ndim=2] verts
 *         cdef np.ndarray[np.uint32_t, ndim=2] neigh
 */
  __pyx_v_self->max_ncells = __pyx_v_max_ncells;

  /* "cgal4py/delaunay/tools.pyx":1212
 *         cdef np.ndarray[np.uint32_t, ndim=2] verts
 *         cdef np.ndarray[np.uint32_t, ndim=2] neigh
 *         verts = np.empty((max_ncells, ndim+1), 'uint32')             # <<<<<<<<<<<<<<
 *         neigh = np.empty((max_ncells, ndim+1), 'uint32')
 *         verts.fill(idx_inf)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int64_t(__pyx_v_max_ncells); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_From_long((__pyx_v_ndim + 1)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_5, __pyx_n_s_uint32};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1212, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_5, __pyx_n_s_uint32};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1212, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_2 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_6, __pyx_t_5);
    __Pyx_INCREF(__pyx_n_s_uint32);
    __Pyx_GIVEREF(__pyx_n_s_uint32);
    PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_6, __pyx_n_s_uint32);
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1212, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
    __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_verts.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_6 < 0)) {
      PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      }
      __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
    }
    __pyx_pybuffernd_verts.diminfo[0].strides = __pyx_pybuffernd_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_verts.diminfo[0].shape = __pyx_pybuffernd_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_verts.diminfo[1].strides = __pyx_pybuffernd_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_verts.diminfo[1].shape = __pyx_pybuffernd_verts.rcbuffer->pybuffer.shape[1];
    if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1212, __pyx_L1_error)
  }
  __pyx_t_7 = 0;
  __pyx_v_verts = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":1213
 *         cdef np.ndarray[np.uint32_t, ndim=2] neigh
 *         verts = np.empty((max_ncells, ndim+1), 'uint32')
 *         neigh = np.empty((max_ncells, ndim+1), 'uint32')             # <<<<<<<<<<<<<<
 *         verts.fill(idx_inf)
 *         neigh.fill(idx_inf)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int64_t(__pyx_v_max_ncells); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_From_long((__pyx_v_ndim + 1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_4, __pyx_n_s_uint32};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1213, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_4, __pyx_n_s_uint32};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1213, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_6, __pyx_t_4);
    __Pyx_INCREF(__pyx_n_s_uint32);
    __Pyx_GIVEREF(__pyx_n_s_uint32);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_6, __pyx_n_s_uint32);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1213, __pyx_L1_error)
  __pyx_t_11 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
    __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_6 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer, (PyObject*)__pyx_v_neigh, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
      }
      __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
    }
    __pyx_pybuffernd_neigh.diminfo[0].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_neigh.diminfo[0].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_neigh.diminfo[1].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_neigh.diminfo[1].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[1];
    if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1213, __pyx_L1_error)
  }
  __pyx_t_11 = 0;
  __pyx_v_neigh = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":1214
 *         verts = np.empty((max_ncells, ndim+1), 'uint32')
 *         neigh = np.empty((max_ncells, ndim+1), 'uint32')
 *         verts.fill(idx_inf)             # <<<<<<<<<<<<<<
 *         neigh.fill(idx_inf)
 *         self.verts = verts
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_verts), __pyx_n_s_fill); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_idx_inf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1214, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1214, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1214, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1214, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1214, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":1215
 *         neigh = np.empty((max_ncells, ndim+1), 'uint32')
 *         verts.fill(idx_inf)
 *         neigh.fill(idx_inf)             # <<<<<<<<<<<<<<
 *         self.verts = verts
 *         self.neigh = neigh
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_neigh), __pyx_n_s_fill); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyInt_From_uint32_t(__pyx_v_idx_inf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1215, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1215, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1215, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1215, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1215, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":1216
 *         verts.fill(idx_inf)
 *         neigh.fill(idx_inf)
 *         self.verts = verts             # <<<<<<<<<<<<<<
 *         self.neigh = neigh
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_verts));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_verts));
  __Pyx_GOTREF(__pyx_v_self->verts);
  __Pyx_DECREF(__pyx_v_self->verts);
  __pyx_v_self->verts = ((PyObject *)__pyx_v_verts);

  /* "cgal4py/delaunay/tools.pyx":1217
 *         neigh.fill(idx_inf)
 *         self.verts = verts
 *         self.neigh = neigh             # <<<<<<<<<<<<<<
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             self.CL = new ConsolidatedLeaves[uint32_t](
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_neigh));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_neigh));
  __Pyx_GOTREF(__pyx_v_self->neigh);
  __Pyx_DECREF(__pyx_v_self->neigh);
  __pyx_v_self->neigh = ((PyObject *)__pyx_v_neigh);

  /* "cgal4py/delaunay/tools.pyx":1218
 *         self.verts = verts
 *         self.neigh = neigh
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *             self.CL = new ConsolidatedLeaves[uint32_t](
 *                 ndim, idx_inf, max_ncells, &verts[0,0], &neigh[0,0])
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":1220
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             self.CL = new ConsolidatedLeaves[uint32_t](
 *                 ndim, idx_inf, max_ncells, &verts[0,0], &neigh[0,0])             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
        __pyx_t_12 = 0;
        __pyx_t_13 = 0;
        __pyx_t_14 = 0;
        __pyx_t_15 = 0;

        /* "cgal4py/delaunay/tools.pyx":1219
 *         self.neigh = neigh
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             self.CL = new ConsolidatedLeaves[uint32_t](             # <<<<<<<<<<<<<<
 *                 ndim, idx_inf, max_ncells, &verts[0,0], &neigh[0,0])
 * 
 */
        try {
          __pyx_t_16 = new ConsolidatedLeaves<uint32_t> (__pyx_v_ndim, __pyx_v_idx_inf, __pyx_v_max_ncells, (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_verts.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_verts.diminfo[0].strides, __pyx_t_13, __pyx_pybuffernd_verts.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint32_t *, __pyx_pybuffernd_neigh.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_neigh.diminfo[0].strides, __pyx_t_15, __pyx_pybuffernd_neigh.diminfo[1].strides))));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1219, __pyx_L4_error)
        }
        __pyx_v_self->CL = __pyx_t_16;
      }

      /* "cgal4py/delaunay/tools.pyx":1218
 *         self.verts = verts
 *         self.neigh = neigh
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *             self.CL = new ConsolidatedLeaves[uint32_t](
 *                 ndim, idx_inf, max_ncells, &verts[0,0], &neigh[0,0])
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":1206
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     def __cinit__(self, uint32_t ndim, uint32_t idx_inf, int64_t max_ncells):             # <<<<<<<<<<<<<<
 *         self.ndim = ndim
 *         self.idx_inf = idx_inf
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cgal4py.delaunay.tools.ConsolidatedLeaves32.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_verts);
  __Pyx_XDECREF((PyObject *)__pyx_v_neigh);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1222
 *                 ndim, idx_inf, max_ncells, &verts[0,0], &neigh[0,0])
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         self.CL.cleanup()
 * 
 */

/* Python wrapper */
static void __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_2__dealloc__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_2__dealloc__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cgal4py/delaunay/tools.pyx":1223
 * 
 *     def __dealloc__(self):
 *         self.CL.cleanup()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->CL->cleanup();

  /* "cgal4py/delaunay/tools.pyx":1222
 *                 ndim, idx_inf, max_ncells, &verts[0,0], &neigh[0,0])
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         self.CL.cleanup()
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cgal4py/delaunay/tools.pyx":1226
 * 
 *     @property
 *     def ncells(self):             # <<<<<<<<<<<<<<
 *         return self.CL.ncells
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_6ncells_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_6ncells_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_6ncells___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_6ncells___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cgal4py/delaunay/tools.pyx":1227
 *     @property
 *     def ncells(self):
 *         return self.CL.ncells             # <<<<<<<<<<<<<<
 * 
 *     cdef void _add_leaf32(self, SerializedLeaf32 leaf):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->CL->ncells); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cgal4py/delaunay/tools.pyx":1226
 * 
 *     @property
 *     def ncells(self):             # <<<<<<<<<<<<<<
 *         return self.CL.ncells
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.ConsolidatedLeaves32.ncells.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1229
 *         return self.CL.ncells
 * 
 *     cdef void _add_leaf32(self, SerializedLeaf32 leaf):             # <<<<<<<<<<<<<<
 *         cdef SerializedLeaf[uint32_t] SL = dereference(leaf.SL)
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 */

static void __pyx_f_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32__add_leaf32(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self, struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_leaf) {
  SerializedLeaf<uint32_t>  __pyx_v_SL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_add_leaf32", 0);

  /* "cgal4py/delaunay/tools.pyx":1230
 * 
 *     cdef void _add_leaf32(self, SerializedLeaf32 leaf):
 *         cdef SerializedLeaf[uint32_t] SL = dereference(leaf.SL)             # <<<<<<<<<<<<<<
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             self.CL.add_leaf[uint32_t](SL)
 */
  __pyx_v_SL = (*__pyx_v_leaf->SL);

  /* "cgal4py/delaunay/tools.pyx":1231
 *     cdef void _add_leaf32(self, SerializedLeaf32 leaf):
 *         cdef SerializedLeaf[uint32_t] SL = dereference(leaf.SL)
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *             self.CL.add_leaf[uint32_t](SL)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":1232
 *         cdef SerializedLeaf[uint32_t] SL = dereference(leaf.SL)
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             self.CL.add_leaf[uint32_t](SL)             # <<<<<<<<<<<<<<
 * 
 *     cdef void _add_leaf64(self, SerializedLeaf64 leaf):
 */
        __pyx_v_self->CL->add_leaf<uint32_t>(__pyx_v_SL);
      }

      /* "cgal4py/delaunay/tools.pyx":1231
 *     cdef void _add_leaf32(self, SerializedLeaf32 leaf):
 *         cdef SerializedLeaf[uint32_t] SL = dereference(leaf.SL)
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *             self.CL.add_leaf[uint32_t](SL)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":1229
 *         return self.CL.ncells
 * 
 *     cdef void _add_leaf32(self, SerializedLeaf32 leaf):             # <<<<<<<<<<<<<<
 *         cdef SerializedLeaf[uint32_t] SL = dereference(leaf.SL)
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cgal4py/delaunay/tools.pyx":1234
 *             self.CL.add_leaf[uint32_t](SL)
 * 
 *     cdef void _add_leaf64(self, SerializedLeaf64 leaf):             # <<<<<<<<<<<<<<
 *         cdef SerializedLeaf[uint64_t] SL = dereference(leaf.SL)
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 */

static void __pyx_f_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32__add_leaf64(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self, struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_leaf) {
  SerializedLeaf<uint64_t>  __pyx_v_SL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_add_leaf64", 0);

  /* "cgal4py/delaunay/tools.pyx":1235
 * 
 *     cdef void _add_leaf64(self, SerializedLeaf64 leaf):
 *         cdef SerializedLeaf[uint64_t] SL = dereference(leaf.SL)             # <<<<<<<<<<<<<<
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             self.CL.add_leaf[uint64_t](SL)
 */
  __pyx_v_SL = (*__pyx_v_leaf->SL);

  /* "cgal4py/delaunay/tools.pyx":1236
 *     cdef void _add_leaf64(self, SerializedLeaf64 leaf):
 *         cdef SerializedLeaf[uint64_t] SL = dereference(leaf.SL)
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *             self.CL.add_leaf[uint64_t](SL)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":1237
 *         cdef SerializedLeaf[uint64_t] SL = dereference(leaf.SL)
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             self.CL.add_leaf[uint64_t](SL)             # <<<<<<<<<<<<<<
 * 
 *     def add_leaf(self, leaf):
 */
        __pyx_v_self->CL->add_leaf<uint64_t>(__pyx_v_SL);
      }

      /* "cgal4py/delaunay/tools.pyx":1236
 *     cdef void _add_leaf64(self, SerializedLeaf64 leaf):
 *         cdef SerializedLeaf[uint64_t] SL = dereference(leaf.SL)
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *             self.CL.add_leaf[uint64_t](SL)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":1234
 *             self.CL.add_leaf[uint32_t](SL)
 * 
 *     cdef void _add_leaf64(self, SerializedLeaf64 leaf):             # <<<<<<<<<<<<<<
 *         cdef SerializedLeaf[uint64_t] SL = dereference(leaf.SL)
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cgal4py/delaunay/tools.pyx":1239
 *             self.CL.add_leaf[uint64_t](SL)
 * 
 *     def add_leaf(self, leaf):             # <<<<<<<<<<<<<<
 *         r"""Add a serialized leaf to the consolidated tessellation.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5add_leaf(PyObject *__pyx_v_self, PyObject *__pyx_v_leaf); /*proto*/
static char __pyx_doc_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_4add_leaf[] = "Add a serialized leaf to the consolidated tessellation.\n\n        Args:\n            leaf (SerializedLeaf32 or SerializedLeaf64): Leaf that should be \n                added to the tessellation.\n\n        ";
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5add_leaf(PyObject *__pyx_v_self, PyObject *__pyx_v_leaf) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_leaf (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_4add_leaf(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *)__pyx_v_self), ((PyObject *)__pyx_v_leaf));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_4add_leaf(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self, PyObject *__pyx_v_leaf) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("add_leaf", 0);

  /* "cgal4py/delaunay/tools.pyx":1247
 * 
 *         """
 *         if isinstance(leaf, SerializedLeaf32):             # <<<<<<<<<<<<<<
 *             self._add_leaf32(leaf)
 *         elif isinstance(leaf, SerializedLeaf64):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_leaf, __pyx_ptype_7cgal4py_8delaunay_5tools_SerializedLeaf32); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cgal4py/delaunay/tools.pyx":1248
 *         """
 *         if isinstance(leaf, SerializedLeaf32):
 *             self._add_leaf32(leaf)             # <<<<<<<<<<<<<<
 *         elif isinstance(leaf, SerializedLeaf64):
 *             self._add_leaf64(leaf)
 */
    if (!(likely(((__pyx_v_leaf) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_leaf, __pyx_ptype_7cgal4py_8delaunay_5tools_SerializedLeaf32))))) __PYX_ERR(0, 1248, __pyx_L1_error)
    ((struct __pyx_vtabstruct_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *)__pyx_v_self->__pyx_vtab)->_add_leaf32(__pyx_v_self, ((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)__pyx_v_leaf));

    /* "cgal4py/delaunay/tools.pyx":1247
 * 
 *         """
 *         if isinstance(leaf, SerializedLeaf32):             # <<<<<<<<<<<<<<
 *             self._add_leaf32(leaf)
 *         elif isinstance(leaf, SerializedLeaf64):
 */
    goto __pyx_L3;
  }

  /* "cgal4py/delaunay/tools.pyx":1249
 *         if isinstance(leaf, SerializedLeaf32):
 *             self._add_leaf32(leaf)
 *         elif isinstance(leaf, SerializedLeaf64):             # <<<<<<<<<<<<<<
 *             self._add_leaf64(leaf)
 *         else:
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_leaf, __pyx_ptype_7cgal4py_8delaunay_5tools_SerializedLeaf64); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "cgal4py/delaunay/tools.pyx":1250
 *             self._add_leaf32(leaf)
 *         elif isinstance(leaf, SerializedLeaf64):
 *             self._add_leaf64(leaf)             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception("Unrecognized leaf type: {}".format(type(leaf)))
 */
    if (!(likely(((__pyx_v_leaf) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_leaf, __pyx_ptype_7cgal4py_8delaunay_5tools_SerializedLeaf64))))) __PYX_ERR(0, 1250, __pyx_L1_error)
    ((struct __pyx_vtabstruct_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *)__pyx_v_self->__pyx_vtab)->_add_leaf64(__pyx_v_self, ((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)__pyx_v_leaf));

    /* "cgal4py/delaunay/tools.pyx":1249
 *         if isinstance(leaf, SerializedLeaf32):
 *             self._add_leaf32(leaf)
 *         elif isinstance(leaf, SerializedLeaf64):             # <<<<<<<<<<<<<<
 *             self._add_leaf64(leaf)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "cgal4py/delaunay/tools.pyx":1252
 *             self._add_leaf64(leaf)
 *         else:
 *             raise Exception("Unrecognized leaf type: {}".format(type(leaf)))             # <<<<<<<<<<<<<<
 * 
 *     def add_leaf_fromfile(self, fname):
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unrecognized_leaf_type, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)Py_TYPE(__pyx_v_leaf))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1252, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, ((PyObject *)Py_TYPE(__pyx_v_leaf))};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1252, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, ((PyObject *)Py_TYPE(__pyx_v_leaf))};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1252, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1252, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_leaf)));
        __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_v_leaf)));
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, ((PyObject *)Py_TYPE(__pyx_v_leaf)));
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1252, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 1252, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "cgal4py/delaunay/tools.pyx":1239
 *             self.CL.add_leaf[uint64_t](SL)
 * 
 *     def add_leaf(self, leaf):             # <<<<<<<<<<<<<<
 *         r"""Add a serialized leaf to the consolidated tessellation.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.ConsolidatedLeaves32.add_leaf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1254
 *             raise Exception("Unrecognized leaf type: {}".format(type(leaf)))
 * 
 *     def add_leaf_fromfile(self, fname):             # <<<<<<<<<<<<<<
 *         r"""Add a serialized leaf from a file to the consolidated tessellation.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_7add_leaf_fromfile(PyObject *__pyx_v_self, PyObject *__pyx_v_fname); /*proto*/
static char __pyx_doc_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_6add_leaf_fromfile[] = "Add a serialized leaf from a file to the consolidated tessellation.\n\n        Args:\n            fname (str): Full path to file containing serialized leaf info.\n\n        ";
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_7add_leaf_fromfile(PyObject *__pyx_v_self, PyObject *__pyx_v_fname) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_leaf_fromfile (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_6add_leaf_fromfile(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *)__pyx_v_self), ((PyObject *)__pyx_v_fname));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_6add_leaf_fromfile(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self, PyObject *__pyx_v_fname) {
  char *__pyx_v_cfname;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  __Pyx_RefNannySetupContext("add_leaf_fromfile", 0);

  /* "cgal4py/delaunay/tools.pyx":1261
 * 
 *         """
 *         cdef char* cfname = fname             # <<<<<<<<<<<<<<
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             self.CL.add_leaf_fromfile(cfname)
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_fname); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(0, 1261, __pyx_L1_error)
  __pyx_v_cfname = __pyx_t_1;

  /* "cgal4py/delaunay/tools.pyx":1262
 *         """
 *         cdef char* cfname = fname
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *             self.CL.add_leaf_fromfile(cfname)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":1263
 *         cdef char* cfname = fname
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             self.CL.add_leaf_fromfile(cfname)             # <<<<<<<<<<<<<<
 * 
 *     def finalize(self):
 */
        __pyx_v_self->CL->add_leaf_fromfile(__pyx_v_cfname);
      }

      /* "cgal4py/delaunay/tools.pyx":1262
 *         """
 *         cdef char* cfname = fname
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *             self.CL.add_leaf_fromfile(cfname)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":1254
 *             raise Exception("Unrecognized leaf type: {}".format(type(leaf)))
 * 
 *     def add_leaf_fromfile(self, fname):             # <<<<<<<<<<<<<<
 *         r"""Add a serialized leaf from a file to the consolidated tessellation.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.ConsolidatedLeaves32.add_leaf_fromfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1265
 *             self.CL.add_leaf_fromfile(cfname)
 * 
 *     def finalize(self):             # <<<<<<<<<<<<<<
 *         r"""Perform operations to complete the consolidated triangulation."""
 *         self.add_inf()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_9finalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_8finalize[] = "Perform operations to complete the consolidated triangulation.";
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_9finalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("finalize (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_8finalize(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_8finalize(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("finalize", 0);

  /* "cgal4py/delaunay/tools.pyx":1267
 *     def finalize(self):
 *         r"""Perform operations to complete the consolidated triangulation."""
 *         self.add_inf()             # <<<<<<<<<<<<<<
 *         self.resize()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_inf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1267, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1267, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":1268
 *         r"""Perform operations to complete the consolidated triangulation."""
 *         self.add_inf()
 *         self.resize()             # <<<<<<<<<<<<<<
 * 
 *     def add_inf(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1268, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1268, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":1265
 *             self.CL.add_leaf_fromfile(cfname)
 * 
 *     def finalize(self):             # <<<<<<<<<<<<<<
 *         r"""Perform operations to complete the consolidated triangulation."""
 *         self.add_inf()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.ConsolidatedLeaves32.finalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1270
 *         self.resize()
 * 
 *     def add_inf(self):             # <<<<<<<<<<<<<<
 *         r"""Add infinite cells to tessellation assuming that any cell without a
 *         neighbor must be incident to a missing infinite cell."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_11add_inf(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_10add_inf[] = "Add infinite cells to tessellation assuming that any cell without a\n        neighbor must be incident to a missing infinite cell.";
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_11add_inf(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_inf (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_10add_inf(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_10add_inf(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_inf", 0);

  /* "cgal4py/delaunay/tools.pyx":1273
 *         r"""Add infinite cells to tessellation assuming that any cell without a
 *         neighbor must be incident to a missing infinite cell."""
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *             self.CL.add_inf()
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":1274
 *         neighbor must be incident to a missing infinite cell."""
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             self.CL.add_inf()             # <<<<<<<<<<<<<<
 * 
 *     def resize(self):
 */
        __pyx_v_self->CL->add_inf();
      }

      /* "cgal4py/delaunay/tools.pyx":1273
 *         r"""Add infinite cells to tessellation assuming that any cell without a
 *         neighbor must be incident to a missing infinite cell."""
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *             self.CL.add_inf()
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":1270
 *         self.resize()
 * 
 *     def add_inf(self):             # <<<<<<<<<<<<<<
 *         r"""Add infinite cells to tessellation assuming that any cell without a
 *         neighbor must be incident to a missing infinite cell."""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1276
 *             self.CL.add_inf()
 * 
 *     def resize(self):             # <<<<<<<<<<<<<<
 *         r"""Resize the arrays to match the number of cells."""
 *         self.verts.resize((self.ncells, self.ndim+1),refcheck=False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_13resize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_12resize[] = "Resize the arrays to match the number of cells.";
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_13resize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resize (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_12resize(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_12resize(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("resize", 0);

  /* "cgal4py/delaunay/tools.pyx":1278
 *     def resize(self):
 *         r"""Resize the arrays to match the number of cells."""
 *         self.verts.resize((self.ncells, self.ndim+1),refcheck=False)             # <<<<<<<<<<<<<<
 *         self.neigh.resize((self.ncells, self.ndim+1),refcheck=False)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->verts, __pyx_n_s_resize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ncells); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_long((__pyx_v_self->ndim + 1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_refcheck, Py_False) < 0) __PYX_ERR(0, 1278, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cgal4py/delaunay/tools.pyx":1279
 *         r"""Resize the arrays to match the number of cells."""
 *         self.verts.resize((self.ncells, self.ndim+1),refcheck=False)
 *         self.neigh.resize((self.ncells, self.ndim+1),refcheck=False)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->neigh, __pyx_n_s_resize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ncells); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_From_long((__pyx_v_self->ndim + 1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_refcheck, Py_False) < 0) __PYX_ERR(0, 1279, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cgal4py/delaunay/tools.pyx":1276
 *             self.CL.add_inf()
 * 
 *     def resize(self):             # <<<<<<<<<<<<<<
 *         r"""Resize the arrays to match the number of cells."""
 *         self.verts.resize((self.ncells, self.ndim+1),refcheck=False)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.ConsolidatedLeaves32.resize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1198
 *     """
 *     cdef ConsolidatedLeaves[uint32_t] *CL
 *     cdef public np.uint32_t ndim             # <<<<<<<<<<<<<<
 *     cdef public np.uint32_t idx_inf
 *     cdef public np.int64_t max_ncells
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_4ndim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_4ndim_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_4ndim___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_4ndim___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_npy_uint32(__pyx_v_self->ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.ConsolidatedLeaves32.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_4ndim_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_4ndim_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_4ndim_2__set__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_4ndim_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_uint32_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_npy_uint32(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1198, __pyx_L1_error)
  __pyx_v_self->ndim = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.ConsolidatedLeaves32.ndim.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1199
 *     cdef ConsolidatedLeaves[uint32_t] *CL
 *     cdef public np.uint32_t ndim
 *     cdef public np.uint32_t idx_inf             # <<<<<<<<<<<<<<
 *     cdef public np.int64_t max_ncells
 *     cdef public object verts
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_7idx_inf_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_7idx_inf_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_7idx_inf___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_7idx_inf___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_npy_uint32(__pyx_v_self->idx_inf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.ConsolidatedLeaves32.idx_inf.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_7idx_inf_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_7idx_inf_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_7idx_inf_2__set__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_7idx_inf_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_uint32_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_npy_uint32(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1199, __pyx_L1_error)
  __pyx_v_self->idx_inf = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.ConsolidatedLeaves32.idx_inf.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1200
 *     cdef public np.uint32_t ndim
 *     cdef public np.uint32_t idx_inf
 *     cdef public np.int64_t max_ncells             # <<<<<<<<<<<<<<
 *     cdef public object verts
 *     cdef public object neigh
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_10max_ncells_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_10max_ncells_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_10max_ncells___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_10max_ncells___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_npy_int64(__pyx_v_self->max_ncells); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.ConsolidatedLeaves32.max_ncells.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_10max_ncells_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_10max_ncells_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_10max_ncells_2__set__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_10max_ncells_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_int64_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_npy_int64(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_int64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1200, __pyx_L1_error)
  __pyx_v_self->max_ncells = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.ConsolidatedLeaves32.max_ncells.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1201
 *     cdef public np.uint32_t idx_inf
 *     cdef public np.int64_t max_ncells
 *     cdef public object verts             # <<<<<<<<<<<<<<
 *     cdef public object neigh
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5verts_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5verts_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5verts___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5verts___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->verts);
  __pyx_r = __pyx_v_self->verts;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5verts_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5verts_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5verts_2__set__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5verts_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->verts);
  __Pyx_DECREF(__pyx_v_self->verts);
  __pyx_v_self->verts = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5verts_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5verts_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5verts_4__del__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5verts_4__del__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->verts);
  __Pyx_DECREF(__pyx_v_self->verts);
  __pyx_v_self->verts = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1202
 *     cdef public np.int64_t max_ncells
 *     cdef public object verts
 *     cdef public object neigh             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5neigh_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5neigh_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5neigh___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5neigh___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->neigh);
  __pyx_r = __pyx_v_self->neigh;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5neigh_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5neigh_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5neigh_2__set__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5neigh_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->neigh);
  __Pyx_DECREF(__pyx_v_self->neigh);
  __pyx_v_self->neigh = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5neigh_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5neigh_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5neigh_4__del__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5neigh_4__del__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->neigh);
  __Pyx_DECREF(__pyx_v_self->neigh);
  __pyx_v_self->neigh = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_14__reduce_cython__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.ConsolidatedLeaves32.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_16__setstate_cython__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.ConsolidatedLeaves32.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1306
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     def __cinit__(self, uint32_t ndim, uint64_t idx_inf, int64_t max_ncells):             # <<<<<<<<<<<<<<
 *         self.ndim = ndim
 *         self.idx_inf = idx_inf
 */

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint32_t __pyx_v_ndim;
  uint64_t __pyx_v_idx_inf;
  int64_t __pyx_v_max_ncells;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ndim,&__pyx_n_s_idx_inf,&__pyx_n_s_max_ncells,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ndim)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_idx_inf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 1); __PYX_ERR(0, 1306, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_ncells)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 2); __PYX_ERR(0, 1306, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1306, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_ndim = __Pyx_PyInt_As_uint32_t(values[0]); if (unlikely((__pyx_v_ndim == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1306, __pyx_L3_error)
    __pyx_v_idx_inf = __Pyx_PyInt_As_uint64_t(values[1]); if (unlikely((__pyx_v_idx_inf == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1306, __pyx_L3_error)
    __pyx_v_max_ncells = __Pyx_PyInt_As_int64_t(values[2]); if (unlikely((__pyx_v_max_ncells == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1306, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1306, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.ConsolidatedLeaves64.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64___cinit__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *)__pyx_v_self), __pyx_v_ndim, __pyx_v_idx_inf, __pyx_v_max_ncells);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64___cinit__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self, uint32_t __pyx_v_ndim, uint64_t __pyx_v_idx_inf, int64_t __pyx_v_max_ncells) {
  PyArrayObject *__pyx_v_verts = 0;
  PyArrayObject *__pyx_v_neigh = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_neigh;
  __Pyx_Buffer __pyx_pybuffer_neigh;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_verts;
  __Pyx_Buffer __pyx_pybuffer_verts;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyArrayObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyArrayObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  ConsolidatedLeaves<uint64_t>  *__pyx_t_16;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __pyx_pybuffer_verts.pybuffer.buf = NULL;
  __pyx_pybuffer_verts.refcount = 0;
  __pyx_pybuffernd_verts.data = NULL;
  __pyx_pybuffernd_verts.rcbuffer = &__pyx_pybuffer_verts;
  __pyx_pybuffer_neigh.pybuffer.buf = NULL;
  __pyx_pybuffer_neigh.refcount = 0;
  __pyx_pybuffernd_neigh.data = NULL;
  __pyx_pybuffernd_neigh.rcbuffer = &__pyx_pybuffer_neigh;

  /* "cgal4py/delaunay/tools.pyx":1307
 *     @cython.wraparound(False)
 *     def __cinit__(self, uint32_t ndim, uint64_t idx_inf, int64_t max_ncells):
 *         self.ndim = ndim             # <<<<<<<<<<<<<<
 *         self.idx_inf = idx_inf
 *         self.max_ncells = max_ncells
 */
  __pyx_v_self->ndim = __pyx_v_ndim;

  /* "cgal4py/delaunay/tools.pyx":1308
 *     def __cinit__(self, uint32_t ndim, uint64_t idx_inf, int64_t max_ncells):
 *         self.ndim = ndim
 *         self.idx_inf = idx_inf             # <<<<<<<<<<<<<<
 *         self.max_ncells = max_ncells
 *         cdef np.ndarray[np.uint64_t, ndim=2] verts
 */
  __pyx_v_self->idx_inf = __pyx_v_idx_inf;

  /* "cgal4py/delaunay/tools.pyx":1309
 *         self.ndim = ndim
 *         self.idx_inf = idx_inf
 *         self.max_ncells = max_ncells             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.uint64_t, ndim=2] verts
 *         cdef np.ndarray[np.uint64_t, ndim=2] neigh
 */
  __pyx_v_self->max_ncells = __pyx_v_max_ncells;

  /* "cgal4py/delaunay/tools.pyx":1312
 *         cdef np.ndarray[np.uint64_t, ndim=2] verts
 *         cdef np.ndarray[np.uint64_t, ndim=2] neigh
 *         verts = np.empty((max_ncells, ndim+1), 'uint64')             # <<<<<<<<<<<<<<
 *         neigh = np.empty((max_ncells, ndim+1), 'uint64')
 *         verts.fill(idx_inf)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int64_t(__pyx_v_max_ncells); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_From_long((__pyx_v_ndim + 1)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_5, __pyx_n_s_uint64};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1312, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_5, __pyx_n_s_uint64};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1312, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_2 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_6, __pyx_t_5);
    __Pyx_INCREF(__pyx_n_s_uint64);
    __Pyx_GIVEREF(__pyx_n_s_uint64);
    PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_6, __pyx_n_s_uint64);
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1312, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
    __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_verts.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_6 < 0)) {
      PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_verts.rcbuffer->pybuffer, (PyObject*)__pyx_v_verts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      }
      __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
    }
    __pyx_pybuffernd_verts.diminfo[0].strides = __pyx_pybuffernd_verts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_verts.diminfo[0].shape = __pyx_pybuffernd_verts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_verts.diminfo[1].strides = __pyx_pybuffernd_verts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_verts.diminfo[1].shape = __pyx_pybuffernd_verts.rcbuffer->pybuffer.shape[1];
    if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1312, __pyx_L1_error)
  }
  __pyx_t_7 = 0;
  __pyx_v_verts = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":1313
 *         cdef np.ndarray[np.uint64_t, ndim=2] neigh
 *         verts = np.empty((max_ncells, ndim+1), 'uint64')
 *         neigh = np.empty((max_ncells, ndim+1), 'uint64')             # <<<<<<<<<<<<<<
 *         verts.fill(idx_inf)
 *         neigh.fill(idx_inf)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int64_t(__pyx_v_max_ncells); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_From_long((__pyx_v_ndim + 1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_4, __pyx_n_s_uint64};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1313, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_4, __pyx_n_s_uint64};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1313, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_6, __pyx_t_4);
    __Pyx_INCREF(__pyx_n_s_uint64);
    __Pyx_GIVEREF(__pyx_n_s_uint64);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_6, __pyx_n_s_uint64);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1313, __pyx_L1_error)
  __pyx_t_11 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
    __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_6 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer, (PyObject*)__pyx_v_neigh, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
      }
      __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
    }
    __pyx_pybuffernd_neigh.diminfo[0].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_neigh.diminfo[0].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_neigh.diminfo[1].strides = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_neigh.diminfo[1].shape = __pyx_pybuffernd_neigh.rcbuffer->pybuffer.shape[1];
    if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1313, __pyx_L1_error)
  }
  __pyx_t_11 = 0;
  __pyx_v_neigh = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":1314
 *         verts = np.empty((max_ncells, ndim+1), 'uint64')
 *         neigh = np.empty((max_ncells, ndim+1), 'uint64')
 *         verts.fill(idx_inf)             # <<<<<<<<<<<<<<
 *         neigh.fill(idx_inf)
 *         self.verts = verts
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_verts), __pyx_n_s_fill); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_uint64_t(__pyx_v_idx_inf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1314, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1314, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1314, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1314, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1314, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":1315
 *         neigh = np.empty((max_ncells, ndim+1), 'uint64')
 *         verts.fill(idx_inf)
 *         neigh.fill(idx_inf)             # <<<<<<<<<<<<<<
 *         self.verts = verts
 *         self.neigh = neigh
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_neigh), __pyx_n_s_fill); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyInt_From_uint64_t(__pyx_v_idx_inf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1315, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1315, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1315, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1315, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1315, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":1316
 *         verts.fill(idx_inf)
 *         neigh.fill(idx_inf)
 *         self.verts = verts             # <<<<<<<<<<<<<<
 *         self.neigh = neigh
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_verts));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_verts));
  __Pyx_GOTREF(__pyx_v_self->verts);
  __Pyx_DECREF(__pyx_v_self->verts);
  __pyx_v_self->verts = ((PyObject *)__pyx_v_verts);

  /* "cgal4py/delaunay/tools.pyx":1317
 *         neigh.fill(idx_inf)
 *         self.verts = verts
 *         self.neigh = neigh             # <<<<<<<<<<<<<<
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             self.CL = new ConsolidatedLeaves[uint64_t](
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_neigh));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_neigh));
  __Pyx_GOTREF(__pyx_v_self->neigh);
  __Pyx_DECREF(__pyx_v_self->neigh);
  __pyx_v_self->neigh = ((PyObject *)__pyx_v_neigh);

  /* "cgal4py/delaunay/tools.pyx":1318
 *         self.verts = verts
 *         self.neigh = neigh
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *             self.CL = new ConsolidatedLeaves[uint64_t](
 *                 ndim, idx_inf, max_ncells, &verts[0,0], &neigh[0,0])
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":1320
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             self.CL = new ConsolidatedLeaves[uint64_t](
 *                 ndim, idx_inf, max_ncells, &verts[0,0], &neigh[0,0])             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
        __pyx_t_12 = 0;
        __pyx_t_13 = 0;
        __pyx_t_14 = 0;
        __pyx_t_15 = 0;

        /* "cgal4py/delaunay/tools.pyx":1319
 *         self.neigh = neigh
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             self.CL = new ConsolidatedLeaves[uint64_t](             # <<<<<<<<<<<<<<
 *                 ndim, idx_inf, max_ncells, &verts[0,0], &neigh[0,0])
 * 
 */
        try {
          __pyx_t_16 = new ConsolidatedLeaves<uint64_t> (__pyx_v_ndim, __pyx_v_idx_inf, __pyx_v_max_ncells, (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_verts.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_verts.diminfo[0].strides, __pyx_t_13, __pyx_pybuffernd_verts.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_neigh.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_neigh.diminfo[0].strides, __pyx_t_15, __pyx_pybuffernd_neigh.diminfo[1].strides))));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1319, __pyx_L4_error)
        }
        __pyx_v_self->CL = __pyx_t_16;
      }

      /* "cgal4py/delaunay/tools.pyx":1318
 *         self.verts = verts
 *         self.neigh = neigh
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *             self.CL = new ConsolidatedLeaves[uint64_t](
 *                 ndim, idx_inf, max_ncells, &verts[0,0], &neigh[0,0])
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":1306
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     def __cinit__(self, uint32_t ndim, uint64_t idx_inf, int64_t max_ncells):             # <<<<<<<<<<<<<<
 *         self.ndim = ndim
 *         self.idx_inf = idx_inf
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cgal4py.delaunay.tools.ConsolidatedLeaves64.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_neigh.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_verts.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_verts);
  __Pyx_XDECREF((PyObject *)__pyx_v_neigh);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1322
 *                 ndim, idx_inf, max_ncells, &verts[0,0], &neigh[0,0])
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         self.CL.cleanup()
 * 
 */

/* Python wrapper */
static void __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_2__dealloc__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_2__dealloc__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cgal4py/delaunay/tools.pyx":1323
 * 
 *     def __dealloc__(self):
 *         self.CL.cleanup()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->CL->cleanup();

  /* "cgal4py/delaunay/tools.pyx":1322
 *                 ndim, idx_inf, max_ncells, &verts[0,0], &neigh[0,0])
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         self.CL.cleanup()
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cgal4py/delaunay/tools.pyx":1326
 * 
 *     @property
 *     def ncells(self):             # <<<<<<<<<<<<<<
 *         return self.CL.ncells
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_6ncells_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_6ncells_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_6ncells___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_6ncells___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cgal4py/delaunay/tools.pyx":1327
 *     @property
 *     def ncells(self):
 *         return self.CL.ncells             # <<<<<<<<<<<<<<
 * 
 *     cdef void _add_leaf32(self, SerializedLeaf32 leaf):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->CL->ncells); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cgal4py/delaunay/tools.pyx":1326
 * 
 *     @property
 *     def ncells(self):             # <<<<<<<<<<<<<<
 *         return self.CL.ncells
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.ConsolidatedLeaves64.ncells.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1329
 *         return self.CL.ncells
 * 
 *     cdef void _add_leaf32(self, SerializedLeaf32 leaf):             # <<<<<<<<<<<<<<
 *         cdef SerializedLeaf[uint32_t] SL = dereference(leaf.SL)
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 */

static void __pyx_f_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64__add_leaf32(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self, struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *__pyx_v_leaf) {
  SerializedLeaf<uint32_t>  __pyx_v_SL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_add_leaf32", 0);

  /* "cgal4py/delaunay/tools.pyx":1330
 * 
 *     cdef void _add_leaf32(self, SerializedLeaf32 leaf):
 *         cdef SerializedLeaf[uint32_t] SL = dereference(leaf.SL)             # <<<<<<<<<<<<<<
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             self.CL.add_leaf[uint32_t](SL)
 */
  __pyx_v_SL = (*__pyx_v_leaf->SL);

  /* "cgal4py/delaunay/tools.pyx":1331
 *     cdef void _add_leaf32(self, SerializedLeaf32 leaf):
 *         cdef SerializedLeaf[uint32_t] SL = dereference(leaf.SL)
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *             self.CL.add_leaf[uint32_t](SL)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":1332
 *         cdef SerializedLeaf[uint32_t] SL = dereference(leaf.SL)
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             self.CL.add_leaf[uint32_t](SL)             # <<<<<<<<<<<<<<
 * 
 *     cdef void _add_leaf64(self, SerializedLeaf64 leaf):
 */
        __pyx_v_self->CL->add_leaf<uint32_t>(__pyx_v_SL);
      }

      /* "cgal4py/delaunay/tools.pyx":1331
 *     cdef void _add_leaf32(self, SerializedLeaf32 leaf):
 *         cdef SerializedLeaf[uint32_t] SL = dereference(leaf.SL)
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *             self.CL.add_leaf[uint32_t](SL)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":1329
 *         return self.CL.ncells
 * 
 *     cdef void _add_leaf32(self, SerializedLeaf32 leaf):             # <<<<<<<<<<<<<<
 *         cdef SerializedLeaf[uint32_t] SL = dereference(leaf.SL)
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cgal4py/delaunay/tools.pyx":1334
 *             self.CL.add_leaf[uint32_t](SL)
 * 
 *     cdef void _add_leaf64(self, SerializedLeaf64 leaf):             # <<<<<<<<<<<<<<
 *         cdef SerializedLeaf[uint64_t] SL = dereference(leaf.SL)
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 */

static void __pyx_f_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64__add_leaf64(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self, struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *__pyx_v_leaf) {
  SerializedLeaf<uint64_t>  __pyx_v_SL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_add_leaf64", 0);

  /* "cgal4py/delaunay/tools.pyx":1335
 * 
 *     cdef void _add_leaf64(self, SerializedLeaf64 leaf):
 *         cdef SerializedLeaf[uint64_t] SL = dereference(leaf.SL)             # <<<<<<<<<<<<<<
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             self.CL.add_leaf[uint64_t](SL)
 */
  __pyx_v_SL = (*__pyx_v_leaf->SL);

  /* "cgal4py/delaunay/tools.pyx":1336
 *     cdef void _add_leaf64(self, SerializedLeaf64 leaf):
 *         cdef SerializedLeaf[uint64_t] SL = dereference(leaf.SL)
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *             self.CL.add_leaf[uint64_t](SL)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":1337
 *         cdef SerializedLeaf[uint64_t] SL = dereference(leaf.SL)
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             self.CL.add_leaf[uint64_t](SL)             # <<<<<<<<<<<<<<
 * 
 *     def add_leaf(self, leaf):
 */
        __pyx_v_self->CL->add_leaf<uint64_t>(__pyx_v_SL);
      }

      /* "cgal4py/delaunay/tools.pyx":1336
 *     cdef void _add_leaf64(self, SerializedLeaf64 leaf):
 *         cdef SerializedLeaf[uint64_t] SL = dereference(leaf.SL)
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *             self.CL.add_leaf[uint64_t](SL)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":1334
 *             self.CL.add_leaf[uint32_t](SL)
 * 
 *     cdef void _add_leaf64(self, SerializedLeaf64 leaf):             # <<<<<<<<<<<<<<
 *         cdef SerializedLeaf[uint64_t] SL = dereference(leaf.SL)
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cgal4py/delaunay/tools.pyx":1339
 *             self.CL.add_leaf[uint64_t](SL)
 * 
 *     def add_leaf(self, leaf):             # <<<<<<<<<<<<<<
 *         r"""Add a serialized leaf to the consolidated tessellation.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5add_leaf(PyObject *__pyx_v_self, PyObject *__pyx_v_leaf); /*proto*/
static char __pyx_doc_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_4add_leaf[] = "Add a serialized leaf to the consolidated tessellation.\n\n        Args:\n            leaf (SerializedLeaf32 or SerializedLeaf64): Leaf that should be \n                added to the tessellation.\n\n        ";
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5add_leaf(PyObject *__pyx_v_self, PyObject *__pyx_v_leaf) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_leaf (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_4add_leaf(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *)__pyx_v_self), ((PyObject *)__pyx_v_leaf));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_4add_leaf(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self, PyObject *__pyx_v_leaf) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("add_leaf", 0);

  /* "cgal4py/delaunay/tools.pyx":1347
 * 
 *         """
 *         if isinstance(leaf, SerializedLeaf32):             # <<<<<<<<<<<<<<
 *             self._add_leaf32(leaf)
 *         elif isinstance(leaf, SerializedLeaf64):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_leaf, __pyx_ptype_7cgal4py_8delaunay_5tools_SerializedLeaf32); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cgal4py/delaunay/tools.pyx":1348
 *         """
 *         if isinstance(leaf, SerializedLeaf32):
 *             self._add_leaf32(leaf)             # <<<<<<<<<<<<<<
 *         elif isinstance(leaf, SerializedLeaf64):
 *             self._add_leaf64(leaf)
 */
    if (!(likely(((__pyx_v_leaf) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_leaf, __pyx_ptype_7cgal4py_8delaunay_5tools_SerializedLeaf32))))) __PYX_ERR(0, 1348, __pyx_L1_error)
    ((struct __pyx_vtabstruct_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *)__pyx_v_self->__pyx_vtab)->_add_leaf32(__pyx_v_self, ((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)__pyx_v_leaf));

    /* "cgal4py/delaunay/tools.pyx":1347
 * 
 *         """
 *         if isinstance(leaf, SerializedLeaf32):             # <<<<<<<<<<<<<<
 *             self._add_leaf32(leaf)
 *         elif isinstance(leaf, SerializedLeaf64):
 */
    goto __pyx_L3;
  }

  /* "cgal4py/delaunay/tools.pyx":1349
 *         if isinstance(leaf, SerializedLeaf32):
 *             self._add_leaf32(leaf)
 *         elif isinstance(leaf, SerializedLeaf64):             # <<<<<<<<<<<<<<
 *             self._add_leaf64(leaf)
 *         else:
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_leaf, __pyx_ptype_7cgal4py_8delaunay_5tools_SerializedLeaf64); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "cgal4py/delaunay/tools.pyx":1350
 *             self._add_leaf32(leaf)
 *         elif isinstance(leaf, SerializedLeaf64):
 *             self._add_leaf64(leaf)             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception("Unrecognized leaf type: {}".format(type(leaf)))
 */
    if (!(likely(((__pyx_v_leaf) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_leaf, __pyx_ptype_7cgal4py_8delaunay_5tools_SerializedLeaf64))))) __PYX_ERR(0, 1350, __pyx_L1_error)
    ((struct __pyx_vtabstruct_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *)__pyx_v_self->__pyx_vtab)->_add_leaf64(__pyx_v_self, ((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)__pyx_v_leaf));

    /* "cgal4py/delaunay/tools.pyx":1349
 *         if isinstance(leaf, SerializedLeaf32):
 *             self._add_leaf32(leaf)
 *         elif isinstance(leaf, SerializedLeaf64):             # <<<<<<<<<<<<<<
 *             self._add_leaf64(leaf)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "cgal4py/delaunay/tools.pyx":1352
 *             self._add_leaf64(leaf)
 *         else:
 *             raise Exception("Unrecognized leaf type: {}".format(type(leaf)))             # <<<<<<<<<<<<<<
 * 
 *     def add_leaf_fromfile(self, fname):
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unrecognized_leaf_type, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)Py_TYPE(__pyx_v_leaf))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, ((PyObject *)Py_TYPE(__pyx_v_leaf))};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1352, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, ((PyObject *)Py_TYPE(__pyx_v_leaf))};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1352, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1352, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_leaf)));
        __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_v_leaf)));
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, ((PyObject *)Py_TYPE(__pyx_v_leaf)));
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1352, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 1352, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "cgal4py/delaunay/tools.pyx":1339
 *             self.CL.add_leaf[uint64_t](SL)
 * 
 *     def add_leaf(self, leaf):             # <<<<<<<<<<<<<<
 *         r"""Add a serialized leaf to the consolidated tessellation.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.ConsolidatedLeaves64.add_leaf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1354
 *             raise Exception("Unrecognized leaf type: {}".format(type(leaf)))
 * 
 *     def add_leaf_fromfile(self, fname):             # <<<<<<<<<<<<<<
 *         r"""Add a serialized leaf from a file to the consolidated tessellation.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_7add_leaf_fromfile(PyObject *__pyx_v_self, PyObject *__pyx_v_fname); /*proto*/
static char __pyx_doc_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_6add_leaf_fromfile[] = "Add a serialized leaf from a file to the consolidated tessellation.\n\n        Args:\n            fname (str): Full path to file containing serialized leaf info.\n\n        ";
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_7add_leaf_fromfile(PyObject *__pyx_v_self, PyObject *__pyx_v_fname) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_leaf_fromfile (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_6add_leaf_fromfile(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *)__pyx_v_self), ((PyObject *)__pyx_v_fname));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_6add_leaf_fromfile(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self, PyObject *__pyx_v_fname) {
  char *__pyx_v_cfname;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  __Pyx_RefNannySetupContext("add_leaf_fromfile", 0);

  /* "cgal4py/delaunay/tools.pyx":1361
 * 
 *         """
 *         cdef char* cfname = fname             # <<<<<<<<<<<<<<
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             self.CL.add_leaf_fromfile(cfname)
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_fname); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(0, 1361, __pyx_L1_error)
  __pyx_v_cfname = __pyx_t_1;

  /* "cgal4py/delaunay/tools.pyx":1362
 *         """
 *         cdef char* cfname = fname
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *             self.CL.add_leaf_fromfile(cfname)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":1363
 *         cdef char* cfname = fname
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             self.CL.add_leaf_fromfile(cfname)             # <<<<<<<<<<<<<<
 * 
 *     def finalize(self):
 */
        __pyx_v_self->CL->add_leaf_fromfile(__pyx_v_cfname);
      }

      /* "cgal4py/delaunay/tools.pyx":1362
 *         """
 *         cdef char* cfname = fname
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *             self.CL.add_leaf_fromfile(cfname)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":1354
 *             raise Exception("Unrecognized leaf type: {}".format(type(leaf)))
 * 
 *     def add_leaf_fromfile(self, fname):             # <<<<<<<<<<<<<<
 *         r"""Add a serialized leaf from a file to the consolidated tessellation.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.ConsolidatedLeaves64.add_leaf_fromfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1365
 *             self.CL.add_leaf_fromfile(cfname)
 * 
 *     def finalize(self):             # <<<<<<<<<<<<<<
 *         r"""Perform operations to complete the consolidated triangulation."""
 *         self.add_inf()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_9finalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_8finalize[] = "Perform operations to complete the consolidated triangulation.";
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_9finalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("finalize (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_8finalize(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_8finalize(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("finalize", 0);

  /* "cgal4py/delaunay/tools.pyx":1367
 *     def finalize(self):
 *         r"""Perform operations to complete the consolidated triangulation."""
 *         self.add_inf()             # <<<<<<<<<<<<<<
 *         self.resize()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_inf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1367, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1367, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":1368
 *         r"""Perform operations to complete the consolidated triangulation."""
 *         self.add_inf()
 *         self.resize()             # <<<<<<<<<<<<<<
 * 
 *     def add_inf(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1368, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1368, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":1365
 *             self.CL.add_leaf_fromfile(cfname)
 * 
 *     def finalize(self):             # <<<<<<<<<<<<<<
 *         r"""Perform operations to complete the consolidated triangulation."""
 *         self.add_inf()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.ConsolidatedLeaves64.finalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1370
 *         self.resize()
 * 
 *     def add_inf(self):             # <<<<<<<<<<<<<<
 *         r"""Add infinite cells to tessellation assuming that any cell without a
 *         neighbor must be incident to a missing infinite cell."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_11add_inf(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_10add_inf[] = "Add infinite cells to tessellation assuming that any cell without a\n        neighbor must be incident to a missing infinite cell.";
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_11add_inf(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_inf (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_10add_inf(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_10add_inf(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_inf", 0);

  /* "cgal4py/delaunay/tools.pyx":1373
 *         r"""Add infinite cells to tessellation assuming that any cell without a
 *         neighbor must be incident to a missing infinite cell."""
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *             self.CL.add_inf()
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cgal4py/delaunay/tools.pyx":1374
 *         neighbor must be incident to a missing infinite cell."""
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):
 *             self.CL.add_inf()             # <<<<<<<<<<<<<<
 * 
 *     def resize(self):
 */
        __pyx_v_self->CL->add_inf();
      }

      /* "cgal4py/delaunay/tools.pyx":1373
 *         r"""Add infinite cells to tessellation assuming that any cell without a
 *         neighbor must be incident to a missing infinite cell."""
 *         with nogil, cython.boundscheck(False), cython.wraparound(False):             # <<<<<<<<<<<<<<
 *             self.CL.add_inf()
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cgal4py/delaunay/tools.pyx":1370
 *         self.resize()
 * 
 *     def add_inf(self):             # <<<<<<<<<<<<<<
 *         r"""Add infinite cells to tessellation assuming that any cell without a
 *         neighbor must be incident to a missing infinite cell."""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1376
 *             self.CL.add_inf()
 * 
 *     def resize(self):             # <<<<<<<<<<<<<<
 *         r"""Resize the arrays to match the number of cells."""
 *         self.verts.resize((self.ncells, self.ndim+1),refcheck=False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_13resize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_12resize[] = "Resize the arrays to match the number of cells.";
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_13resize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resize (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_12resize(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_12resize(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("resize", 0);

  /* "cgal4py/delaunay/tools.pyx":1378
 *     def resize(self):
 *         r"""Resize the arrays to match the number of cells."""
 *         self.verts.resize((self.ncells, self.ndim+1),refcheck=False)             # <<<<<<<<<<<<<<
 *         self.neigh.resize((self.ncells, self.ndim+1),refcheck=False)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->verts, __pyx_n_s_resize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ncells); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_long((__pyx_v_self->ndim + 1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_refcheck, Py_False) < 0) __PYX_ERR(0, 1378, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cgal4py/delaunay/tools.pyx":1379
 *         r"""Resize the arrays to match the number of cells."""
 *         self.verts.resize((self.ncells, self.ndim+1),refcheck=False)
 *         self.neigh.resize((self.ncells, self.ndim+1),refcheck=False)             # <<<<<<<<<<<<<<
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->neigh, __pyx_n_s_resize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ncells); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_From_long((__pyx_v_self->ndim + 1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_refcheck, Py_False) < 0) __PYX_ERR(0, 1379, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cgal4py/delaunay/tools.pyx":1376
 *             self.CL.add_inf()
 * 
 *     def resize(self):             # <<<<<<<<<<<<<<
 *         r"""Resize the arrays to match the number of cells."""
 *         self.verts.resize((self.ncells, self.ndim+1),refcheck=False)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.ConsolidatedLeaves64.resize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1298
 *     """
 *     cdef ConsolidatedLeaves[uint64_t] *CL
 *     cdef public np.uint32_t ndim             # <<<<<<<<<<<<<<
 *     cdef public np.uint64_t idx_inf
 *     cdef public np.int64_t max_ncells
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_4ndim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_4ndim_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_4ndim___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_4ndim___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_npy_uint32(__pyx_v_self->ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.ConsolidatedLeaves64.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_4ndim_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_4ndim_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_4ndim_2__set__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_4ndim_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_uint32_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_npy_uint32(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1298, __pyx_L1_error)
  __pyx_v_self->ndim = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.ConsolidatedLeaves64.ndim.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1299
 *     cdef ConsolidatedLeaves[uint64_t] *CL
 *     cdef public np.uint32_t ndim
 *     cdef public np.uint64_t idx_inf             # <<<<<<<<<<<<<<
 *     cdef public np.int64_t max_ncells
 *     cdef public object verts
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_7idx_inf_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_7idx_inf_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_7idx_inf___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_7idx_inf___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_npy_uint64(__pyx_v_self->idx_inf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.ConsolidatedLeaves64.idx_inf.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_7idx_inf_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_7idx_inf_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_7idx_inf_2__set__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_7idx_inf_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_uint64_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_npy_uint64(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1299, __pyx_L1_error)
  __pyx_v_self->idx_inf = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.ConsolidatedLeaves64.idx_inf.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1300
 *     cdef public np.uint32_t ndim
 *     cdef public np.uint64_t idx_inf
 *     cdef public np.int64_t max_ncells             # <<<<<<<<<<<<<<
 *     cdef public object verts
 *     cdef public object neigh
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_10max_ncells_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_10max_ncells_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_10max_ncells___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_10max_ncells___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_npy_int64(__pyx_v_self->max_ncells); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.ConsolidatedLeaves64.max_ncells.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_10max_ncells_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_10max_ncells_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_10max_ncells_2__set__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_10max_ncells_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_int64_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_npy_int64(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_int64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1300, __pyx_L1_error)
  __pyx_v_self->max_ncells = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cgal4py.delaunay.tools.ConsolidatedLeaves64.max_ncells.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1301
 *     cdef public np.uint64_t idx_inf
 *     cdef public np.int64_t max_ncells
 *     cdef public object verts             # <<<<<<<<<<<<<<
 *     cdef public object neigh
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5verts_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5verts_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5verts___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5verts___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->verts);
  __pyx_r = __pyx_v_self->verts;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5verts_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5verts_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5verts_2__set__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5verts_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->verts);
  __Pyx_DECREF(__pyx_v_self->verts);
  __pyx_v_self->verts = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5verts_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5verts_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5verts_4__del__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5verts_4__del__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->verts);
  __Pyx_DECREF(__pyx_v_self->verts);
  __pyx_v_self->verts = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cgal4py/delaunay/tools.pyx":1302
 *     cdef public np.int64_t max_ncells
 *     cdef public object verts
 *     cdef public object neigh             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5neigh_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5neigh_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5neigh___get__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5neigh___get__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->neigh);
  __pyx_r = __pyx_v_self->neigh;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5neigh_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5neigh_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5neigh_2__set__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5neigh_2__set__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->neigh);
  __Pyx_DECREF(__pyx_v_self->neigh);
  __pyx_v_self->neigh = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5neigh_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5neigh_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5neigh_4__del__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5neigh_4__del__(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->neigh);
  __Pyx_DECREF(__pyx_v_self->neigh);
  __pyx_v_self->neigh = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_14__reduce_cython__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.ConsolidatedLeaves64.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_16__setstate_cython__(((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cgal4py.delaunay.tools.ConsolidatedLeaves64.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":215
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  char *__pyx_t_8;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":222
 * 
 *             cdef int i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":223
 *             cdef int i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":225
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":227
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":228
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":227
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (unlikely(__pyx_t_1)) {

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":229
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 229, __pyx_L1_error)

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":227
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":232
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (unlikely(__pyx_t_1)) {

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 233, __pyx_L1_error)

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":235
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":236
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":240
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * 2) * ((size_t)__pyx_v_ndim))));

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":241
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":242
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":243
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":244
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L9;
  }

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":246
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":247
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L9:;

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":249
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":250
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":253
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":254
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             cdef int offset
 * 
 *             info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not PyDataType_HASFIELDS(descr):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *             info.obj = self
 * 
 *             if not PyDataType_HASFIELDS(descr):             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(PyDataType_HASFIELDS(__pyx_v_descr) != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":260
 * 
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L15_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_L15_next_or:;

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":262
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L14_bool_binop_done:;

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (unlikely(__pyx_t_1)) {

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 263, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 263, __pyx_L1_error)

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":264
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = ((char *)"b");
      break;

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":265
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = ((char *)"B");
      break;

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = ((char *)"h");
      break;

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = ((char *)"H");
      break;

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = ((char *)"i");
      break;

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = ((char *)"I");
      break;

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = ((char *)"l");
      break;

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = ((char *)"L");
      break;

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = ((char *)"q");
      break;

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = ((char *)"Q");
      break;

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = ((char *)"f");
      break;

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":275
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = ((char *)"d");
      break;

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = ((char *)"g");
      break;

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":277
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = ((char *)"Zf");
      break;

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = ((char *)"Zd");
      break;

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":279
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = ((char *)"Zg");
      break;

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = ((char *)"O");
      break;
      default:

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 282, __pyx_L1_error)
      break;
    }

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":284
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *             info.obj = self
 * 
 *             if not PyDataType_HASFIELDS(descr):             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":286
 *                 return
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)PyObject_Malloc(0xFF));

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":287
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":289
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_8 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_8 == ((char *)NULL))) __PYX_ERR(2, 289, __pyx_L1_error)
    __pyx_v_f = __pyx_t_8;

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":215
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":294
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":295
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":296
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)
 */
    PyObject_Free(__pyx_v_info->format);

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":295
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":297
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":298
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    PyObject_Free(__pyx_v_info->strides);

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":297
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":294
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":775
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":776
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":775
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":778
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":779
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":778
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":781
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":782
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":781
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":784
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":785
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":784
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":787
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":788
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":787
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":790
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":791
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":792
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":791
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":790
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":796
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":801
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":802
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":805
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(2, 805, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 805, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 805, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":806
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 806, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(2, 806, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":807
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(2, 807, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 807, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 807, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 807, __pyx_L1_error)
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(2, 807, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":809
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 809, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 809, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 809, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (unlikely(__pyx_t_6)) {

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":810
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 810, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 810, __pyx_L1_error)

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":809
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":812
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":813
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":812
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (unlikely(__pyx_t_6)) {

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":814
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 814, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 814, __pyx_L1_error)

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":812
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":824
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 824, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 824, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 824, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":825
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":826
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":829
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":831
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":832
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (unlikely(__pyx_t_6)) {

        /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":834
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 834, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(2, 834, __pyx_L1_error)

        /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":837
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 837, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":838
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 838, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":839
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 839, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 840, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 841, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 841, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 841, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 842, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 842, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":843
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 843, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 843, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 843, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 844, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 844, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 844, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":845
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 845, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 845, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 845, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":846
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 846, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 846, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 846, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":847
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 847, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 847, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 847, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":848
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 848, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 848, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 848, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":849
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 849, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 849, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 849, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":850
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 850, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 850, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 850, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":851
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 851, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 851, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 851, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":852
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 852, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 852, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 852, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":853
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 853, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 853, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (likely(__pyx_t_6)) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":855
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 855, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 855, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(2, 855, __pyx_L1_error)
      }
      __pyx_L15:;

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":856
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":831
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":860
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(2, 860, __pyx_L1_error)
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":805
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":861
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":796
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":979
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":980
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":979
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
    goto __pyx_L3;
  }

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":982
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
  /*else*/ {
    Py_INCREF(__pyx_v_base);

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":983
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":984
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":985
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":987
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":988
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":989
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":988
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  }

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":991
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":987
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":996
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":997
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":998
 * cdef inline int import_array() except -1:
 *     try:
 *         _import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 998, __pyx_L3_error)

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":997
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":999
 *     try:
 *         _import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 999, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1000
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1000, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1000, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":997
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":996
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1002
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1003
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1004
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1004, __pyx_L3_error)

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1003
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1005
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1005, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1006
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1006, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1006, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1003
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1002
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1008
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1009
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1010
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1010, __pyx_L3_error)

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1009
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1011
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1011, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1012
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1012, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1012, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1009
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1008
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_7cgal4py_8delaunay_5tools_SerializedLeaf32(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)o);
  p->verts = Py_None; Py_INCREF(Py_None);
  p->neigh = Py_None; Py_INCREF(Py_None);
  p->sort_verts = Py_None; Py_INCREF(Py_None);
  p->sort_cells = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7cgal4py_8delaunay_5tools_SerializedLeaf32(PyObject *o) {
  struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *p = (struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->verts);
  Py_CLEAR(p->neigh);
  Py_CLEAR(p->sort_verts);
  Py_CLEAR(p->sort_cells);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7cgal4py_8delaunay_5tools_SerializedLeaf32(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *p = (struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)o;
  if (p->verts) {
    e = (*v)(p->verts, a); if (e) return e;
  }
  if (p->neigh) {
    e = (*v)(p->neigh, a); if (e) return e;
  }
  if (p->sort_verts) {
    e = (*v)(p->sort_verts, a); if (e) return e;
  }
  if (p->sort_cells) {
    e = (*v)(p->sort_cells, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7cgal4py_8delaunay_5tools_SerializedLeaf32(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *p = (struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *)o;
  tmp = ((PyObject*)p->verts);
  p->verts = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->neigh);
  p->neigh = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->sort_verts);
  p->sort_verts = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->sort_cells);
  p->sort_cells = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_2id_1__get__(o);
}

static int __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_id(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_2id_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_ndim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_4ndim_1__get__(o);
}

static int __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_ndim(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_4ndim_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_ncells(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_6ncells_1__get__(o);
}

static int __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_ncells(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_6ncells_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_idx_inf(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_7idx_inf_1__get__(o);
}

static int __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_idx_inf(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_7idx_inf_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_verts(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5verts_1__get__(o);
}

static int __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_verts(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5verts_3__set__(o, v);
  }
  else {
    return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5verts_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_neigh(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5neigh_1__get__(o);
}

static int __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_neigh(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5neigh_3__set__(o, v);
  }
  else {
    return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5neigh_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_sort_verts(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_verts_1__get__(o);
}

static int __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_sort_verts(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_verts_3__set__(o, v);
  }
  else {
    return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_verts_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_sort_cells(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_cells_1__get__(o);
}

static int __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_sort_cells(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_cells_3__set__(o, v);
  }
  else {
    return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_10sort_cells_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_idx_start(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_9idx_start_1__get__(o);
}

static int __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_idx_start(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_9idx_start_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_idx_stop(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_8idx_stop_1__get__(o);
}

static int __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_idx_stop(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_8idx_stop_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7cgal4py_8delaunay_5tools_SerializedLeaf32[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf32_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7cgal4py_8delaunay_5tools_SerializedLeaf32[] = {
  {(char *)"id", __pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_id, __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_id, (char *)0, 0},
  {(char *)"ndim", __pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_ndim, __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_ndim, (char *)0, 0},
  {(char *)"ncells", __pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_ncells, __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_ncells, (char *)0, 0},
  {(char *)"idx_inf", __pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_idx_inf, __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_idx_inf, (char *)0, 0},
  {(char *)"verts", __pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_verts, __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_verts, (char *)0, 0},
  {(char *)"neigh", __pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_neigh, __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_neigh, (char *)0, 0},
  {(char *)"sort_verts", __pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_sort_verts, __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_sort_verts, (char *)0, 0},
  {(char *)"sort_cells", __pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_sort_cells, __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_sort_cells, (char *)0, 0},
  {(char *)"idx_start", __pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_idx_start, __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_idx_start, (char *)0, 0},
  {(char *)"idx_stop", __pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_idx_stop, __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf32_idx_stop, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7cgal4py_8delaunay_5tools_SerializedLeaf32 = {
  PyVarObject_HEAD_INIT(0, 0)
  "cgal4py.delaunay.tools.SerializedLeaf32", /*tp_name*/
  sizeof(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cgal4py_8delaunay_5tools_SerializedLeaf32, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Wrapper class for C++ SerializedLeaf class with 32bit cell indices.\n\n    Args:\n        id (int): Leaf identifier.\n        ndim (uint32): Number of dimensions in the domain.\n        ncells (int64): Number of cells in the leaf triangulation.\n        idx_inf (uint32): Flag for infinite vertices or cells.\n        verts (np.ndarray of uint32): Indices of vertices making up each cell.\n        neigh (np.ndarray of uint32): Indices of neighbor cells for each cell.\n        sort_verts (np.ndarray of uint32): Indices required to sort vertices \n            in each cell in decreasing order.\n        sort_cells (np.ndarray of uint64): Indices required to sort cells by \n            the sorted vertices.\n        idx_start (np.uint64): Index that this leaf starts at in the full\n            domain decomposition.\n        idx_stop (np.uint64): Index that this leaf stops at in the full\n            domain decomposition.\n\n    Attributes:\n        id (int): Leaf identifier.\n        ndim (uint32): Number of dimensions in the domain.\n        ncells (int64): Number of cells in the leaf triangulation.\n        idx_inf (uint32): Flag for infinite vertices or cells.\n        verts (np.ndarray of uint32): Indices of vertices making up each cell.\n        neigh (np.ndarray of uint32): Indices of neighbor cells for each cell.\n        sort_verts (np.ndarray of uint32): Indices required to sort vertices \n            in each cell in decreasing order.\n        sort_cells (np.ndarray of uint64): Indices required to sort cells by \n            the sorted vertices.\n        idx_start (np.uint64): Index that this leaf starts at in the full\n            domain decomposition.\n        idx_stop (np.uint64): Index that this leaf stops at in the full\n            domain decomposition.\n\n    ", /*tp_doc*/
  __pyx_tp_traverse_7cgal4py_8delaunay_5tools_SerializedLeaf32, /*tp_traverse*/
  __pyx_tp_clear_7cgal4py_8delaunay_5tools_SerializedLeaf32, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7cgal4py_8delaunay_5tools_SerializedLeaf32, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7cgal4py_8delaunay_5tools_SerializedLeaf32, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7cgal4py_8delaunay_5tools_SerializedLeaf32, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7cgal4py_8delaunay_5tools_SerializedLeaf64(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)o);
  p->verts = Py_None; Py_INCREF(Py_None);
  p->neigh = Py_None; Py_INCREF(Py_None);
  p->sort_verts = Py_None; Py_INCREF(Py_None);
  p->sort_cells = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7cgal4py_8delaunay_5tools_SerializedLeaf64(PyObject *o) {
  struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *p = (struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->verts);
  Py_CLEAR(p->neigh);
  Py_CLEAR(p->sort_verts);
  Py_CLEAR(p->sort_cells);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7cgal4py_8delaunay_5tools_SerializedLeaf64(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *p = (struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)o;
  if (p->verts) {
    e = (*v)(p->verts, a); if (e) return e;
  }
  if (p->neigh) {
    e = (*v)(p->neigh, a); if (e) return e;
  }
  if (p->sort_verts) {
    e = (*v)(p->sort_verts, a); if (e) return e;
  }
  if (p->sort_cells) {
    e = (*v)(p->sort_cells, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7cgal4py_8delaunay_5tools_SerializedLeaf64(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *p = (struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *)o;
  tmp = ((PyObject*)p->verts);
  p->verts = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->neigh);
  p->neigh = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->sort_verts);
  p->sort_verts = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->sort_cells);
  p->sort_cells = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_2id_1__get__(o);
}

static int __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_id(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_2id_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_ndim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_4ndim_1__get__(o);
}

static int __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_ndim(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_4ndim_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_ncells(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_6ncells_1__get__(o);
}

static int __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_ncells(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_6ncells_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_idx_inf(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_7idx_inf_1__get__(o);
}

static int __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_idx_inf(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_7idx_inf_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_verts(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5verts_1__get__(o);
}

static int __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_verts(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5verts_3__set__(o, v);
  }
  else {
    return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5verts_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_neigh(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5neigh_1__get__(o);
}

static int __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_neigh(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5neigh_3__set__(o, v);
  }
  else {
    return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5neigh_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_sort_verts(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_verts_1__get__(o);
}

static int __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_sort_verts(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_verts_3__set__(o, v);
  }
  else {
    return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_verts_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_sort_cells(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_cells_1__get__(o);
}

static int __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_sort_cells(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_cells_3__set__(o, v);
  }
  else {
    return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_10sort_cells_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_idx_start(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_9idx_start_1__get__(o);
}

static int __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_idx_start(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_9idx_start_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_idx_stop(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_8idx_stop_1__get__(o);
}

static int __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_idx_stop(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_8idx_stop_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7cgal4py_8delaunay_5tools_SerializedLeaf64[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_16SerializedLeaf64_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7cgal4py_8delaunay_5tools_SerializedLeaf64[] = {
  {(char *)"id", __pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_id, __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_id, (char *)0, 0},
  {(char *)"ndim", __pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_ndim, __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_ndim, (char *)0, 0},
  {(char *)"ncells", __pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_ncells, __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_ncells, (char *)0, 0},
  {(char *)"idx_inf", __pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_idx_inf, __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_idx_inf, (char *)0, 0},
  {(char *)"verts", __pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_verts, __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_verts, (char *)0, 0},
  {(char *)"neigh", __pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_neigh, __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_neigh, (char *)0, 0},
  {(char *)"sort_verts", __pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_sort_verts, __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_sort_verts, (char *)0, 0},
  {(char *)"sort_cells", __pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_sort_cells, __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_sort_cells, (char *)0, 0},
  {(char *)"idx_start", __pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_idx_start, __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_idx_start, (char *)0, 0},
  {(char *)"idx_stop", __pyx_getprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_idx_stop, __pyx_setprop_7cgal4py_8delaunay_5tools_16SerializedLeaf64_idx_stop, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7cgal4py_8delaunay_5tools_SerializedLeaf64 = {
  PyVarObject_HEAD_INIT(0, 0)
  "cgal4py.delaunay.tools.SerializedLeaf64", /*tp_name*/
  sizeof(struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cgal4py_8delaunay_5tools_SerializedLeaf64, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Wrapper class for C++ SerializedLeaf class with 64bit cell indices.\n\n    Args:\n        id (int): Leaf identifier.\n        ndim (uint32): Number of dimensions in the domain.\n        ncells (int64): Number of cells in the leaf triangulation.\n        idx_inf (uint64): Flag for infinite vertices or cells.\n        verts (np.ndarray of uint64): Indices of vertices making up each cell.\n        neigh (np.ndarray of uint64): Indices of neighbor cells for each cell.\n        sort_verts (np.ndarray of uint32): Indices required to sort vertices \n            in each cell in decreasing order.\n        sort_cells (np.ndarray of uint64): Indices required to sort cells by \n            the sorted vertices.\n        idx_start (np.uint64): Index that this leaf starts at in the full\n            domain decomposition.\n        idx_stop (np.uint64): Index that this leaf stops at in the full\n            domain decomposition.\n\n    Attributes:\n        id (int): Leaf identifier.\n        ndim (uint32): Number of dimensions in the domain.\n        ncells (int64): Number of cells in the leaf triangulation.\n        idx_inf (uint64): Flag for infinite vertices or cells.\n        verts (np.ndarray of uint64): Indices of vertices making up each cell.\n        neigh (np.ndarray of uint64): Indices of neighbor cells for each cell.\n        sort_verts (np.ndarray of uint32): Indices required to sort vertices \n            in each cell in decreasing order.\n        sort_cells (np.ndarray of uint64): Indices required to sort cells by \n            the sorted vertices.\n        idx_start (np.uint64): Index that this leaf starts at in the full\n            domain decomposition.\n        idx_stop (np.uint64): Index that this leaf stops at in the full\n            domain decomposition.\n\n    ", /*tp_doc*/
  __pyx_tp_traverse_7cgal4py_8delaunay_5tools_SerializedLeaf64, /*tp_traverse*/
  __pyx_tp_clear_7cgal4py_8delaunay_5tools_SerializedLeaf64, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7cgal4py_8delaunay_5tools_SerializedLeaf64, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7cgal4py_8delaunay_5tools_SerializedLeaf64, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7cgal4py_8delaunay_5tools_SerializedLeaf64, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 __pyx_vtable_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32;

static PyObject *__pyx_tp_new_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *)o);
  p->__pyx_vtab = __pyx_vtabptr_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32;
  p->verts = Py_None; Py_INCREF(Py_None);
  p->neigh = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32(PyObject *o) {
  struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *p = (struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->verts);
  Py_CLEAR(p->neigh);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *p = (struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *)o;
  if (p->verts) {
    e = (*v)(p->verts, a); if (e) return e;
  }
  if (p->neigh) {
    e = (*v)(p->neigh, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *p = (struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *)o;
  tmp = ((PyObject*)p->verts);
  p->verts = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->neigh);
  p->neigh = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_ncells(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_6ncells_1__get__(o);
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_ndim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_4ndim_1__get__(o);
}

static int __pyx_setprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_ndim(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_4ndim_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_idx_inf(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_7idx_inf_1__get__(o);
}

static int __pyx_setprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_idx_inf(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_7idx_inf_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_max_ncells(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_10max_ncells_1__get__(o);
}

static int __pyx_setprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_max_ncells(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_10max_ncells_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_verts(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5verts_1__get__(o);
}

static int __pyx_setprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_verts(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5verts_3__set__(o, v);
  }
  else {
    return __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5verts_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_neigh(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5neigh_1__get__(o);
}

static int __pyx_setprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_neigh(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5neigh_3__set__(o, v);
  }
  else {
    return __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5neigh_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32[] = {
  {"add_leaf", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_5add_leaf, METH_O, __pyx_doc_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_4add_leaf},
  {"add_leaf_fromfile", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_7add_leaf_fromfile, METH_O, __pyx_doc_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_6add_leaf_fromfile},
  {"finalize", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_9finalize, METH_NOARGS, __pyx_doc_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_8finalize},
  {"add_inf", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_11add_inf, METH_NOARGS, __pyx_doc_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_10add_inf},
  {"resize", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_13resize, METH_NOARGS, __pyx_doc_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_12resize},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_15__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_17__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32[] = {
  {(char *)"ncells", __pyx_getprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_ncells, 0, (char *)0, 0},
  {(char *)"ndim", __pyx_getprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_ndim, __pyx_setprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_ndim, (char *)0, 0},
  {(char *)"idx_inf", __pyx_getprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_idx_inf, __pyx_setprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_idx_inf, (char *)0, 0},
  {(char *)"max_ncells", __pyx_getprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_max_ncells, __pyx_setprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_max_ncells, (char *)0, 0},
  {(char *)"verts", __pyx_getprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_verts, __pyx_setprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_verts, (char *)0, 0},
  {(char *)"neigh", __pyx_getprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_neigh, __pyx_setprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32_neigh, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 = {
  PyVarObject_HEAD_INIT(0, 0)
  "cgal4py.delaunay.tools.ConsolidatedLeaves32", /*tp_name*/
  sizeof(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Wrapper class for C++ ConsolidatedLeaves class with 32bit cell indices.\n\n    Args:\n        ndim (uint32): Number of dimensions in domain.\n        idx_inf (uint32): Flag identifying infinite vertices/cells.\n        max_ncells (int64): Number of cells that will be allocated for.\n\n    Attributes:\n        ndim (uint32): Number of dimensions in domain.\n        idx_inf (uint32): Flag identifying infinite vertices/cells.\n        max_ncells (int64): Number of cells that will be allocated for.\n        verts (np.ndarray): Indices of vertices constituting cells.\n\n    ", /*tp_doc*/
  __pyx_tp_traverse_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32, /*tp_traverse*/
  __pyx_tp_clear_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 __pyx_vtable_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64;

static PyObject *__pyx_tp_new_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *)o);
  p->__pyx_vtab = __pyx_vtabptr_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64;
  p->verts = Py_None; Py_INCREF(Py_None);
  p->neigh = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64(PyObject *o) {
  struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *p = (struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->verts);
  Py_CLEAR(p->neigh);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *p = (struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *)o;
  if (p->verts) {
    e = (*v)(p->verts, a); if (e) return e;
  }
  if (p->neigh) {
    e = (*v)(p->neigh, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *p = (struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *)o;
  tmp = ((PyObject*)p->verts);
  p->verts = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->neigh);
  p->neigh = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_ncells(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_6ncells_1__get__(o);
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_ndim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_4ndim_1__get__(o);
}

static int __pyx_setprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_ndim(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_4ndim_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_idx_inf(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_7idx_inf_1__get__(o);
}

static int __pyx_setprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_idx_inf(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_7idx_inf_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_max_ncells(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_10max_ncells_1__get__(o);
}

static int __pyx_setprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_max_ncells(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_10max_ncells_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_verts(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5verts_1__get__(o);
}

static int __pyx_setprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_verts(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5verts_3__set__(o, v);
  }
  else {
    return __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5verts_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_neigh(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5neigh_1__get__(o);
}

static int __pyx_setprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_neigh(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5neigh_3__set__(o, v);
  }
  else {
    return __pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5neigh_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64[] = {
  {"add_leaf", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_5add_leaf, METH_O, __pyx_doc_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_4add_leaf},
  {"add_leaf_fromfile", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_7add_leaf_fromfile, METH_O, __pyx_doc_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_6add_leaf_fromfile},
  {"finalize", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_9finalize, METH_NOARGS, __pyx_doc_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_8finalize},
  {"add_inf", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_11add_inf, METH_NOARGS, __pyx_doc_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_10add_inf},
  {"resize", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_13resize, METH_NOARGS, __pyx_doc_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_12resize},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_15__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_17__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64[] = {
  {(char *)"ncells", __pyx_getprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_ncells, 0, (char *)0, 0},
  {(char *)"ndim", __pyx_getprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_ndim, __pyx_setprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_ndim, (char *)0, 0},
  {(char *)"idx_inf", __pyx_getprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_idx_inf, __pyx_setprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_idx_inf, (char *)0, 0},
  {(char *)"max_ncells", __pyx_getprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_max_ncells, __pyx_setprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_max_ncells, (char *)0, 0},
  {(char *)"verts", __pyx_getprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_verts, __pyx_setprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_verts, (char *)0, 0},
  {(char *)"neigh", __pyx_getprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_neigh, __pyx_setprop_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64_neigh, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 = {
  PyVarObject_HEAD_INIT(0, 0)
  "cgal4py.delaunay.tools.ConsolidatedLeaves64", /*tp_name*/
  sizeof(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Wrapper class for C++ ConsolidatedLeaves class with 64bit cell indices.\n\n    Args:\n        ndim (uint32): Number of dimensions in domain.\n        idx_inf (uint64): Flag identifying infinite vertices/cells.\n        max_ncells (int64): Number of cells that will be allocated for.\n\n    Attributes:\n        ndim (uint32): Number of dimensions in domain.\n        idx_inf (uint64): Flag identifying infinite vertices/cells.\n        max_ncells (int64): Number of cells that will be allocated for.\n        verts (np.ndarray): Indices of vertices constituting cells.\n\n    ", /*tp_doc*/
  __pyx_tp_traverse_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64, /*tp_traverse*/
  __pyx_tp_clear_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_tools(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_tools},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "tools",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_Adding_infinite_cells_cython_too, __pyx_k_Adding_infinite_cells_cython_too, sizeof(__pyx_k_Adding_infinite_cells_cython_too), 0, 0, 1, 0},
  {&__pyx_kp_s_Adding_infinite_cells_took_s, __pyx_k_Adding_infinite_cells_took_s, sizeof(__pyx_k_Adding_infinite_cells_took_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Adding_leaf_took_s, __pyx_k_Adding_leaf_took_s, sizeof(__pyx_k_Adding_leaf_took_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Allocation_took_s, __pyx_k_Allocation_took_s, sizeof(__pyx_k_Allocation_took_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Assertions_took_s, __pyx_k_Assertions_took_s, sizeof(__pyx_k_Assertions_took_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Clean_up_took_s, __pyx_k_Clean_up_took_s, sizeof(__pyx_k_Clean_up_took_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Combined_type_not_supported, __pyx_k_Combined_type_not_supported, sizeof(__pyx_k_Combined_type_not_supported), 0, 0, 1, 0},
  {&__pyx_kp_s_Consolidation_cython_took_s, __pyx_k_Consolidation_cython_took_s, sizeof(__pyx_k_Consolidation_cython_took_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Creating_the_leaf_took_s, __pyx_k_Creating_the_leaf_took_s, sizeof(__pyx_k_Creating_the_leaf_took_s), 0, 0, 1, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_kp_s_Getting_map_arrays_took_s, __pyx_k_Getting_map_arrays_took_s, sizeof(__pyx_k_Getting_map_arrays_took_s), 0, 0, 1, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_s_Initialization_of_consolidated_l, __pyx_k_Initialization_of_consolidated_l, sizeof(__pyx_k_Initialization_of_consolidated_l), 0, 0, 1, 0},
  {&__pyx_kp_s_Initialization_of_consolidated_l_2, __pyx_k_Initialization_of_consolidated_l_2, sizeof(__pyx_k_Initialization_of_consolidated_l_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Leaf_type_not_supported, __pyx_k_Leaf_type_not_supported, sizeof(__pyx_k_Leaf_type_not_supported), 0, 0, 1, 0},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_kp_s_Output_of_leaves_with_template_t, __pyx_k_Output_of_leaves_with_template_t, sizeof(__pyx_k_Output_of_leaves_with_template_t), 0, 0, 1, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Type_not_supported, __pyx_k_Type_not_supported, sizeof(__pyx_k_Type_not_supported), 0, 0, 1, 0},
  {&__pyx_kp_s_Unrecognized_leaf_type, __pyx_k_Unrecognized_leaf_type, sizeof(__pyx_k_Unrecognized_leaf_type), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_add_inf, __pyx_k_add_inf, sizeof(__pyx_k_add_inf), 0, 0, 1, 1},
  {&__pyx_n_s_add_inf_uint32_uint32, __pyx_k_add_inf_uint32_uint32, sizeof(__pyx_k_add_inf_uint32_uint32), 0, 0, 1, 1},
  {&__pyx_n_s_add_leaf, __pyx_k_add_leaf, sizeof(__pyx_k_add_leaf), 0, 0, 1, 1},
  {&__pyx_n_s_add_leaf_uint32_uint32, __pyx_k_add_leaf_uint32_uint32, sizeof(__pyx_k_add_leaf_uint32_uint32), 0, 0, 1, 1},
  {&__pyx_n_s_all_neigh, __pyx_k_all_neigh, sizeof(__pyx_k_all_neigh), 0, 0, 1, 1},
  {&__pyx_n_s_all_verts, __pyx_k_all_verts, sizeof(__pyx_k_all_verts), 0, 0, 1, 1},
  {&__pyx_n_s_arg_sortSerializedTess_int32, __pyx_k_arg_sortSerializedTess_int32, sizeof(__pyx_k_arg_sortSerializedTess_int32), 0, 0, 1, 1},
  {&__pyx_n_s_arg_sortSerializedTess_int64, __pyx_k_arg_sortSerializedTess_int64, sizeof(__pyx_k_arg_sortSerializedTess_int64), 0, 0, 1, 1},
  {&__pyx_n_s_arg_sortSerializedTess_uint32, __pyx_k_arg_sortSerializedTess_uint32, sizeof(__pyx_k_arg_sortSerializedTess_uint32), 0, 0, 1, 1},
  {&__pyx_n_s_arg_sortSerializedTess_uint64, __pyx_k_arg_sortSerializedTess_uint64, sizeof(__pyx_k_arg_sortSerializedTess_uint64), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_s_cells, __pyx_k_cells, sizeof(__pyx_k_cells), 0, 0, 1, 1},
  {&__pyx_n_s_cfname, __pyx_k_cfname, sizeof(__pyx_k_cfname), 0, 0, 1, 1},
  {&__pyx_n_s_cgal4py_delaunay_tools, __pyx_k_cgal4py_delaunay_tools, sizeof(__pyx_k_cgal4py_delaunay_tools), 0, 0, 1, 1},
  {&__pyx_kp_s_cgal4py_delaunay_tools_pyx, __pyx_k_cgal4py_delaunay_tools_pyx, sizeof(__pyx_k_cgal4py_delaunay_tools_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_consolidate_leaves, __pyx_k_consolidate_leaves, sizeof(__pyx_k_consolidate_leaves), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_dtype_comb, __pyx_k_dtype_comb, sizeof(__pyx_k_dtype_comb), 0, 0, 1, 1},
  {&__pyx_n_s_dtype_leaf, __pyx_k_dtype_leaf, sizeof(__pyx_k_dtype_leaf), 0, 0, 1, 1},
  {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_fill, __pyx_k_fill, sizeof(__pyx_k_fill), 0, 0, 1, 1},
  {&__pyx_n_s_fname, __pyx_k_fname, sizeof(__pyx_k_fname), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_i1, __pyx_k_i1, sizeof(__pyx_k_i1), 0, 0, 1, 1},
  {&__pyx_n_s_i2, __pyx_k_i2, sizeof(__pyx_k_i2), 0, 0, 1, 1},
  {&__pyx_n_s_idx, __pyx_k_idx, sizeof(__pyx_k_idx), 0, 0, 1, 1},
  {&__pyx_n_s_idx_cells, __pyx_k_idx_cells, sizeof(__pyx_k_idx_cells), 0, 0, 1, 1},
  {&__pyx_n_s_idx_inf, __pyx_k_idx_inf, sizeof(__pyx_k_idx_inf), 0, 0, 1, 1},
  {&__pyx_n_s_idx_start, __pyx_k_idx_start, sizeof(__pyx_k_idx_start), 0, 0, 1, 1},
  {&__pyx_n_s_idx_stop, __pyx_k_idx_stop, sizeof(__pyx_k_idx_stop), 0, 0, 1, 1},
  {&__pyx_n_s_idx_verts, __pyx_k_idx_verts, sizeof(__pyx_k_idx_verts), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_inf_map, __pyx_k_inf_map, sizeof(__pyx_k_inf_map), 0, 0, 1, 1},
  {&__pyx_n_s_int32, __pyx_k_int32, sizeof(__pyx_k_int32), 0, 0, 1, 1},
  {&__pyx_n_s_int64, __pyx_k_int64, sizeof(__pyx_k_int64), 0, 0, 1, 1},
  {&__pyx_n_s_key_inf_map, __pyx_k_key_inf_map, sizeof(__pyx_k_key_inf_map), 0, 0, 1, 1},
  {&__pyx_n_s_key_inf_map0, __pyx_k_key_inf_map0, sizeof(__pyx_k_key_inf_map0), 0, 0, 1, 1},
  {&__pyx_n_s_key_split_map, __pyx_k_key_split_map, sizeof(__pyx_k_key_split_map), 0, 0, 1, 1},
  {&__pyx_n_s_key_split_map0, __pyx_k_key_split_map0, sizeof(__pyx_k_key_split_map0), 0, 0, 1, 1},
  {&__pyx_n_s_l, __pyx_k_l, sizeof(__pyx_k_l), 0, 0, 1, 1},
  {&__pyx_n_s_le, __pyx_k_le, sizeof(__pyx_k_le), 0, 0, 1, 1},
  {&__pyx_n_s_leaf, __pyx_k_leaf, sizeof(__pyx_k_leaf), 0, 0, 1, 1},
  {&__pyx_n_s_leaf_id, __pyx_k_leaf_id, sizeof(__pyx_k_leaf_id), 0, 0, 1, 1},
  {&__pyx_n_s_leaf_idx_inf, __pyx_k_leaf_idx_inf, sizeof(__pyx_k_leaf_idx_inf), 0, 0, 1, 1},
  {&__pyx_n_s_leaf_ncells, __pyx_k_leaf_ncells, sizeof(__pyx_k_leaf_ncells), 0, 0, 1, 1},
  {&__pyx_n_s_leaf_neigh, __pyx_k_leaf_neigh, sizeof(__pyx_k_leaf_neigh), 0, 0, 1, 1},
  {&__pyx_n_s_leaf_sort_cells, __pyx_k_leaf_sort_cells, sizeof(__pyx_k_leaf_sort_cells), 0, 0, 1, 1},
  {&__pyx_n_s_leaf_sort_verts, __pyx_k_leaf_sort_verts, sizeof(__pyx_k_leaf_sort_verts), 0, 0, 1, 1},
  {&__pyx_n_s_leaf_start, __pyx_k_leaf_start, sizeof(__pyx_k_leaf_start), 0, 0, 1, 1},
  {&__pyx_n_s_leaf_stop, __pyx_k_leaf_stop, sizeof(__pyx_k_leaf_stop), 0, 0, 1, 1},
  {&__pyx_n_s_leaf_verts, __pyx_k_leaf_verts, sizeof(__pyx_k_leaf_verts), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max_ncells, __pyx_k_max_ncells, sizeof(__pyx_k_max_ncells), 0, 0, 1, 1},
  {&__pyx_n_s_n_inf_map, __pyx_k_n_inf_map, sizeof(__pyx_k_n_inf_map), 0, 0, 1, 1},
  {&__pyx_n_s_n_split_map, __pyx_k_n_split_map, sizeof(__pyx_k_n_split_map), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_ncells, __pyx_k_ncells, sizeof(__pyx_k_ncells), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
  {&__pyx_n_s_neigh, __pyx_k_neigh, sizeof(__pyx_k_neigh), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_num_leaves, __pyx_k_num_leaves, sizeof(__pyx_k_num_leaves), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_out, __pyx_k_out, sizeof(__pyx_k_out), 0, 0, 1, 1},
  {&__pyx_n_s_output_leaf, __pyx_k_output_leaf, sizeof(__pyx_k_output_leaf), 0, 0, 1, 1},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_py_arg_partition_tess, __pyx_k_py_arg_partition_tess, sizeof(__pyx_k_py_arg_partition_tess), 0, 0, 1, 1},
  {&__pyx_n_s_py_arg_quickSort_tess, __pyx_k_py_arg_quickSort_tess, sizeof(__pyx_k_py_arg_quickSort_tess), 0, 0, 1, 1},
  {&__pyx_n_s_py_arg_sortCellVerts, __pyx_k_py_arg_sortCellVerts, sizeof(__pyx_k_py_arg_sortCellVerts), 0, 0, 1, 1},
  {&__pyx_n_s_py_arg_sortSerializedTess, __pyx_k_py_arg_sortSerializedTess, sizeof(__pyx_k_py_arg_sortSerializedTess), 0, 0, 1, 1},
  {&__pyx_n_s_py_arg_tLT, __pyx_k_py_arg_tLT, sizeof(__pyx_k_py_arg_tLT), 0, 0, 1, 1},
  {&__pyx_n_s_py_intersect_sph_box, __pyx_k_py_intersect_sph_box, sizeof(__pyx_k_py_intersect_sph_box), 0, 0, 1, 1},
  {&__pyx_n_s_py_partition_tess, __pyx_k_py_partition_tess, sizeof(__pyx_k_py_partition_tess), 0, 0, 1, 1},
  {&__pyx_n_s_py_quickSort_tess, __pyx_k_py_quickSort_tess, sizeof(__pyx_k_py_quickSort_tess), 0, 0, 1, 1},
  {&__pyx_n_s_py_sortCellVerts, __pyx_k_py_sortCellVerts, sizeof(__pyx_k_py_sortCellVerts), 0, 0, 1, 1},
  {&__pyx_n_s_py_sortSerializedTess, __pyx_k_py_sortSerializedTess, sizeof(__pyx_k_py_sortSerializedTess), 0, 0, 1, 1},
  {&__pyx_n_s_py_swap_cells, __pyx_k_py_swap_cells, sizeof(__pyx_k_py_swap_cells), 0, 0, 1, 1},
  {&__pyx_n_s_py_tEQ, __pyx_k_py_tEQ, sizeof(__pyx_k_py_tEQ), 0, 0, 1, 1},
  {&__pyx_n_s_py_tGT, __pyx_k_py_tGT, sizeof(__pyx_k_py_tGT), 0, 0, 1, 1},
  {&__pyx_n_s_py_tLT, __pyx_k_py_tLT, sizeof(__pyx_k_py_tLT), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_re, __pyx_k_re, sizeof(__pyx_k_re), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_refcheck, __pyx_k_refcheck, sizeof(__pyx_k_refcheck), 0, 0, 1, 1},
  {&__pyx_n_s_resize, __pyx_k_resize, sizeof(__pyx_k_resize), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_n_s_serial, __pyx_k_serial, sizeof(__pyx_k_serial), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_sortSerializedTess_int32, __pyx_k_sortSerializedTess_int32, sizeof(__pyx_k_sortSerializedTess_int32), 0, 0, 1, 1},
  {&__pyx_n_s_sortSerializedTess_int64, __pyx_k_sortSerializedTess_int64, sizeof(__pyx_k_sortSerializedTess_int64), 0, 0, 1, 1},
  {&__pyx_n_s_sortSerializedTess_uint32, __pyx_k_sortSerializedTess_uint32, sizeof(__pyx_k_sortSerializedTess_uint32), 0, 0, 1, 1},
  {&__pyx_n_s_sortSerializedTess_uint64, __pyx_k_sortSerializedTess_uint64, sizeof(__pyx_k_sortSerializedTess_uint64), 0, 0, 1, 1},
  {&__pyx_n_s_sort_cells, __pyx_k_sort_cells, sizeof(__pyx_k_sort_cells), 0, 0, 1, 1},
  {&__pyx_n_s_sort_verts, __pyx_k_sort_verts, sizeof(__pyx_k_sort_verts), 0, 0, 1, 1},
  {&__pyx_n_s_split_map, __pyx_k_split_map, sizeof(__pyx_k_split_map), 0, 0, 1, 1},
  {&__pyx_n_s_t0, __pyx_k_t0, sizeof(__pyx_k_t0), 0, 0, 1, 1},
  {&__pyx_n_s_t1, __pyx_k_t1, sizeof(__pyx_k_t1), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_n_s_uint32, __pyx_k_uint32, sizeof(__pyx_k_uint32), 0, 0, 1, 1},
  {&__pyx_n_s_uint64, __pyx_k_uint64, sizeof(__pyx_k_uint64), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_val_inf_map, __pyx_k_val_inf_map, sizeof(__pyx_k_val_inf_map), 0, 0, 1, 1},
  {&__pyx_n_s_val_inf_map0, __pyx_k_val_inf_map0, sizeof(__pyx_k_val_inf_map0), 0, 0, 1, 1},
  {&__pyx_n_s_val_split_map, __pyx_k_val_split_map, sizeof(__pyx_k_val_split_map), 0, 0, 1, 1},
  {&__pyx_n_s_val_split_map0, __pyx_k_val_split_map0, sizeof(__pyx_k_val_split_map0), 0, 0, 1, 1},
  {&__pyx_n_s_verts, __pyx_k_verts, sizeof(__pyx_k_verts), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 202, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 383, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 648, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 846, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(2, 229, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(2, 810, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 1000, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "cgal4py/delaunay/tools.pyx":384
 *     cdef int i
 *     for i in range(cells.shape[1]):
 *         idx_verts[:,i] = <np.uint32_t>i             # <<<<<<<<<<<<<<
 *     if cells.dtype == np.int32:
 *         _arg_sortCellVerts_int32(cells, idx_verts)
 */
  __pyx_slice_ = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice_)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice_);
  __Pyx_GIVEREF(__pyx_slice_);

  /* "cgal4py/delaunay/tools.pyx":462
 *     idx_verts = np.empty(cells.shape, 'uint32')
 *     for i in range(cells.shape[1]):
 *         idx_verts[:,i] = <np.uint32_t>i             # <<<<<<<<<<<<<<
 *     idx_cells = np.empty(cells.shape[0], 'uint64')
 *     for i in range(cells.shape[0]):
 */
  __pyx_slice__2 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__2)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__2);
  __Pyx_GIVEREF(__pyx_slice__2);

  /* "cgal4py/delaunay/tools.pyx":949
 *     if ncells == 0:
 *         key_split_map = np.empty((0, ndim+1), dtype_comb)
 *         val_split_map = np.empty(0, 'uint64')             # <<<<<<<<<<<<<<
 *         key_inf_map = np.empty((0, ndim+1), dtype_comb)
 *         val_inf_map = np.empty(0, 'uint64')
 */
  __pyx_tuple__3 = PyTuple_Pack(2, __pyx_int_0, __pyx_n_s_uint64); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "cgal4py/delaunay/tools.pyx":951
 *         val_split_map = np.empty(0, 'uint64')
 *         key_inf_map = np.empty((0, ndim+1), dtype_comb)
 *         val_inf_map = np.empty(0, 'uint64')             # <<<<<<<<<<<<<<
 *     if dtype_comb == np.uint32:
 *         if dtype_leaf == np.uint32:
 */
  __pyx_tuple__4 = PyTuple_Pack(2, __pyx_int_0, __pyx_n_s_uint64); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":229
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(2, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(2, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(2, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":810
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(2, 810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":814
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(2, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":834
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(2, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1000
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(2, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1006
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(2, 1006, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1012
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(2, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "cgal4py/delaunay/tools.pyx":16
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_intersect_sph_box(np.ndarray[np.float64_t, ndim=1] c, np.float64_t r,             # <<<<<<<<<<<<<<
 *                          np.ndarray[np.float64_t, ndim=1] le,
 *                          np.ndarray[np.float64_t, ndim=1] re):
 */
  __pyx_tuple__22 = PyTuple_Pack(6, __pyx_n_s_c, __pyx_n_s_r, __pyx_n_s_le, __pyx_n_s_re, __pyx_n_s_ndim, __pyx_n_s_out); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cgal4py_delaunay_tools_pyx, __pyx_n_s_py_intersect_sph_box, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(0, 16, __pyx_L1_error)

  /* "cgal4py/delaunay/tools.pyx":41
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_arg_tLT(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                np.ndarray[np.uint32_t, ndim=2] idx_verts, int i1, int i2):
 *     r"""Determine if one cell is less than the other by comparing
 */
  __pyx_tuple__24 = PyTuple_Pack(6, __pyx_n_s_cells, __pyx_n_s_idx_verts, __pyx_n_s_i1, __pyx_n_s_i2, __pyx_n_s_ndim, __pyx_n_s_out); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cgal4py_delaunay_tools_pyx, __pyx_n_s_py_arg_tLT, 41, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 41, __pyx_L1_error)

  /* "cgal4py/delaunay/tools.pyx":69
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_tEQ(np.ndarray[np.int64_t, ndim=2] cells, int i1, int i2):             # <<<<<<<<<<<<<<
 *     r"""Determine if one cell is equivalent to the other by comparing
 *     the (sorted) vertices in each cell.
 */
  __pyx_tuple__26 = PyTuple_Pack(5, __pyx_n_s_cells, __pyx_n_s_i1, __pyx_n_s_i2, __pyx_n_s_ndim, __pyx_n_s_out); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cgal4py_delaunay_tools_pyx, __pyx_n_s_py_tEQ, 69, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(0, 69, __pyx_L1_error)

  /* "cgal4py/delaunay/tools.pyx":94
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_tGT(np.ndarray[np.int64_t, ndim=2] cells, int i1, int i2):             # <<<<<<<<<<<<<<
 *     r"""Determine if one cell is greater than the other by comparing
 *     the (sorted) vertices in each cell.
 */
  __pyx_tuple__28 = PyTuple_Pack(5, __pyx_n_s_cells, __pyx_n_s_i1, __pyx_n_s_i2, __pyx_n_s_ndim, __pyx_n_s_out); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cgal4py_delaunay_tools_pyx, __pyx_n_s_py_tGT, 94, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(0, 94, __pyx_L1_error)

  /* "cgal4py/delaunay/tools.pyx":119
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_tLT(np.ndarray[np.int64_t, ndim=2] cells, int i1, int i2):             # <<<<<<<<<<<<<<
 *     r"""Determine if one cell is less than the other by comparing
 *     the (sorted) vertices in each cell.
 */
  __pyx_tuple__30 = PyTuple_Pack(5, __pyx_n_s_cells, __pyx_n_s_i1, __pyx_n_s_i2, __pyx_n_s_ndim, __pyx_n_s_out); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__30, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cgal4py_delaunay_tools_pyx, __pyx_n_s_py_tLT, 119, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(0, 119, __pyx_L1_error)

  /* "cgal4py/delaunay/tools.pyx":177
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_sortCellVerts(cells, neigh):             # <<<<<<<<<<<<<<
 *     r"""Sort the the vertices and neighbors for a single cell such that the
 *     vertices are in descending order.
 */
  __pyx_tuple__32 = PyTuple_Pack(2, __pyx_n_s_cells, __pyx_n_s_neigh); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cgal4py_delaunay_tools_pyx, __pyx_n_s_py_sortCellVerts, 177, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(0, 177, __pyx_L1_error)

  /* "cgal4py/delaunay/tools.pyx":206
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _sortSerializedTess_int32(np.ndarray[np.int32_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                               np.ndarray[np.int32_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */
  __pyx_tuple__34 = PyTuple_Pack(4, __pyx_n_s_cells, __pyx_n_s_neigh, __pyx_n_s_ncells, __pyx_n_s_ndim); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cgal4py_delaunay_tools_pyx, __pyx_n_s_sortSerializedTess_int32, 206, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(0, 206, __pyx_L1_error)

  /* "cgal4py/delaunay/tools.pyx":216
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _sortSerializedTess_uint32(np.ndarray[np.uint32_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                np.ndarray[np.uint32_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */
  __pyx_tuple__36 = PyTuple_Pack(4, __pyx_n_s_cells, __pyx_n_s_neigh, __pyx_n_s_ncells, __pyx_n_s_ndim); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cgal4py_delaunay_tools_pyx, __pyx_n_s_sortSerializedTess_uint32, 216, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 216, __pyx_L1_error)

  /* "cgal4py/delaunay/tools.pyx":226
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _sortSerializedTess_int64(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                               np.ndarray[np.int64_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */
  __pyx_tuple__38 = PyTuple_Pack(4, __pyx_n_s_cells, __pyx_n_s_neigh, __pyx_n_s_ncells, __pyx_n_s_ndim); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cgal4py_delaunay_tools_pyx, __pyx_n_s_sortSerializedTess_int64, 226, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 226, __pyx_L1_error)

  /* "cgal4py/delaunay/tools.pyx":236
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _sortSerializedTess_uint64(np.ndarray[np.uint64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                np.ndarray[np.uint64_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */
  __pyx_tuple__40 = PyTuple_Pack(4, __pyx_n_s_cells, __pyx_n_s_neigh, __pyx_n_s_ncells, __pyx_n_s_ndim); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cgal4py_delaunay_tools_pyx, __pyx_n_s_sortSerializedTess_uint64, 236, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 236, __pyx_L1_error)

  /* "cgal4py/delaunay/tools.pyx":245
 *         sortSerializedTess[uint64_t](&cells[0,0], &neigh[0,0], ncells, ndim)
 * 
 * def py_sortSerializedTess(cells, neigh):             # <<<<<<<<<<<<<<
 *     r"""Sort serialized triangulation such that the verts for each cell are in
 *     descending order, but the cells are sorted in ascending order by the verts.
 */
  __pyx_tuple__42 = PyTuple_Pack(2, __pyx_n_s_cells, __pyx_n_s_neigh); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cgal4py_delaunay_tools_pyx, __pyx_n_s_py_sortSerializedTess, 245, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 245, __pyx_L1_error)

  /* "cgal4py/delaunay/tools.pyx":268
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_quickSort_tess(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                       np.ndarray[np.int64_t, ndim=2] neigh,
 *                       np.ndarray[np.int64_t, ndim=1] idx,
 */
  __pyx_tuple__44 = PyTuple_Pack(6, __pyx_n_s_cells, __pyx_n_s_neigh, __pyx_n_s_idx, __pyx_n_s_l, __pyx_n_s_r, __pyx_n_s_ndim); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(5, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__44, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cgal4py_delaunay_tools_pyx, __pyx_n_s_py_quickSort_tess, 268, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(0, 268, __pyx_L1_error)

  /* "cgal4py/delaunay/tools.pyx":295
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_partition_tess(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                       np.ndarray[np.int64_t, ndim=2] neigh,
 *                       np.ndarray[np.int64_t, ndim=1] idx,
 */
  __pyx_tuple__46 = PyTuple_Pack(8, __pyx_n_s_cells, __pyx_n_s_neigh, __pyx_n_s_idx, __pyx_n_s_l, __pyx_n_s_r, __pyx_n_s_p, __pyx_n_s_ndim, __pyx_n_s_out); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(6, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cgal4py_delaunay_tools_pyx, __pyx_n_s_py_partition_tess, 295, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(0, 295, __pyx_L1_error)

  /* "cgal4py/delaunay/tools.pyx":363
 *         arg_sortCellVerts[uint32_t](&cells[0,0], &idx_verts[0,0], ncells, ndim)
 * 
 * def py_arg_sortCellVerts(cells):             # <<<<<<<<<<<<<<
 *     r"""Sort the the vertices and neighbors for a single cell such that the
 *     vertices are in descending order.
 */
  __pyx_tuple__48 = PyTuple_Pack(3, __pyx_n_s_cells, __pyx_n_s_idx_verts, __pyx_n_s_i); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cgal4py_delaunay_tools_pyx, __pyx_n_s_py_arg_sortCellVerts, 363, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) __PYX_ERR(0, 363, __pyx_L1_error)

  /* "cgal4py/delaunay/tools.pyx":399
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _arg_sortSerializedTess_int32(np.ndarray[np.int32_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                   np.ndarray[np.uint32_t, ndim=2] idx_verts,
 *                                   np.ndarray[np.uint64_t, ndim=1] idx_cells):
 */
  __pyx_tuple__50 = PyTuple_Pack(5, __pyx_n_s_cells, __pyx_n_s_idx_verts, __pyx_n_s_idx_cells, __pyx_n_s_ncells, __pyx_n_s_ndim); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cgal4py_delaunay_tools_pyx, __pyx_n_s_arg_sortSerializedTess_int32, 399, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) __PYX_ERR(0, 399, __pyx_L1_error)

  /* "cgal4py/delaunay/tools.pyx":409
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _arg_sortSerializedTess_uint32(np.ndarray[np.uint32_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                    np.ndarray[np.uint32_t, ndim=2] idx_verts,
 *                                    np.ndarray[np.uint64_t, ndim=1] idx_cells):
 */
  __pyx_tuple__52 = PyTuple_Pack(5, __pyx_n_s_cells, __pyx_n_s_idx_verts, __pyx_n_s_idx_cells, __pyx_n_s_ncells, __pyx_n_s_ndim); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __pyx_codeobj__53 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__52, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cgal4py_delaunay_tools_pyx, __pyx_n_s_arg_sortSerializedTess_uint32, 409, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__53)) __PYX_ERR(0, 409, __pyx_L1_error)

  /* "cgal4py/delaunay/tools.pyx":419
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _arg_sortSerializedTess_int64(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                   np.ndarray[np.uint32_t, ndim=2] idx_verts,
 *                                   np.ndarray[np.uint64_t, ndim=1] idx_cells):
 */
  __pyx_tuple__54 = PyTuple_Pack(5, __pyx_n_s_cells, __pyx_n_s_idx_verts, __pyx_n_s_idx_cells, __pyx_n_s_ncells, __pyx_n_s_ndim); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cgal4py_delaunay_tools_pyx, __pyx_n_s_arg_sortSerializedTess_int64, 419, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) __PYX_ERR(0, 419, __pyx_L1_error)

  /* "cgal4py/delaunay/tools.pyx":429
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _arg_sortSerializedTess_uint64(np.ndarray[np.uint64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                    np.ndarray[np.uint32_t, ndim=2] idx_verts,
 *                                    np.ndarray[np.uint64_t, ndim=1] idx_cells):
 */
  __pyx_tuple__56 = PyTuple_Pack(5, __pyx_n_s_cells, __pyx_n_s_idx_verts, __pyx_n_s_idx_cells, __pyx_n_s_ncells, __pyx_n_s_ndim); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);
  __pyx_codeobj__57 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__56, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cgal4py_delaunay_tools_pyx, __pyx_n_s_arg_sortSerializedTess_uint64, 429, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__57)) __PYX_ERR(0, 429, __pyx_L1_error)

  /* "cgal4py/delaunay/tools.pyx":438
 *                                          &idx_verts[0,0], &idx_cells[0])
 * 
 * def py_arg_sortSerializedTess(cells):             # <<<<<<<<<<<<<<
 *     r"""Sort serialized triangulation such that the verts for each cell are in
 *     descending order, but the cells are sorted in ascending order by the verts.
 */
  __pyx_tuple__58 = PyTuple_Pack(4, __pyx_n_s_cells, __pyx_n_s_idx_verts, __pyx_n_s_idx_cells, __pyx_n_s_i); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);
  __pyx_codeobj__59 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cgal4py_delaunay_tools_pyx, __pyx_n_s_py_arg_sortSerializedTess, 438, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__59)) __PYX_ERR(0, 438, __pyx_L1_error)

  /* "cgal4py/delaunay/tools.pyx":480
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_arg_quickSort_tess(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                           np.ndarray[np.uint32_t, ndim=2] idx_verts,
 *                           np.ndarray[np.uint64_t, ndim=1] idx_cells,
 */
  __pyx_tuple__60 = PyTuple_Pack(6, __pyx_n_s_cells, __pyx_n_s_idx_verts, __pyx_n_s_idx_cells, __pyx_n_s_l, __pyx_n_s_r, __pyx_n_s_ndim); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);
  __pyx_codeobj__61 = (PyObject*)__Pyx_PyCode_New(5, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cgal4py_delaunay_tools_pyx, __pyx_n_s_py_arg_quickSort_tess, 480, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__61)) __PYX_ERR(0, 480, __pyx_L1_error)

  /* "cgal4py/delaunay/tools.pyx":509
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_arg_partition_tess(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                           np.ndarray[np.uint32_t, ndim=2] idx_verts,
 *                           np.ndarray[np.uint64_t, ndim=1] idx_cells,
 */
  __pyx_tuple__62 = PyTuple_Pack(8, __pyx_n_s_cells, __pyx_n_s_idx_verts, __pyx_n_s_idx_cells, __pyx_n_s_l, __pyx_n_s_r, __pyx_n_s_p, __pyx_n_s_ndim, __pyx_n_s_out); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);
  __pyx_codeobj__63 = (PyObject*)__Pyx_PyCode_New(6, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__62, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cgal4py_delaunay_tools_pyx, __pyx_n_s_py_arg_partition_tess, 509, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__63)) __PYX_ERR(0, 509, __pyx_L1_error)

  /* "cgal4py/delaunay/tools.pyx":613
 *         swap_cells[uint64_t](&verts[0,0], &neigh[0,0], ndim, i1, i2)
 * 
 * def py_swap_cells(verts, neigh, i1, i2):             # <<<<<<<<<<<<<<
 *     r"""Swap the verts and neighbors for two cells.
 * 
 */
  __pyx_tuple__64 = PyTuple_Pack(4, __pyx_n_s_verts, __pyx_n_s_neigh, __pyx_n_s_i1, __pyx_n_s_i2); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);
  __pyx_codeobj__65 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cgal4py_delaunay_tools_pyx, __pyx_n_s_py_swap_cells, 613, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__65)) __PYX_ERR(0, 613, __pyx_L1_error)

  /* "cgal4py/delaunay/tools.pyx":768
 *     return ncells
 * 
 * def consolidate_leaves(ndim, idx_inf, serial, leaf_start, leaf_stop):             # <<<<<<<<<<<<<<
 *     dtype_comb = type(idx_inf)
 *     dtype_leaf = serial[0][0].dtype
 */
  __pyx_tuple__66 = PyTuple_Pack(13, __pyx_n_s_ndim, __pyx_n_s_idx_inf, __pyx_n_s_serial, __pyx_n_s_leaf_start, __pyx_n_s_leaf_stop, __pyx_n_s_dtype_comb, __pyx_n_s_dtype_leaf, __pyx_n_s_ncells, __pyx_n_s_s, __pyx_n_s_t0, __pyx_n_s_verts, __pyx_n_s_neigh, __pyx_n_s_t1); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(0, 768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  __pyx_codeobj__67 = (PyObject*)__Pyx_PyCode_New(5, 0, 13, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cgal4py_delaunay_tools_pyx, __pyx_n_s_consolidate_leaves, 768, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__67)) __PYX_ERR(0, 768, __pyx_L1_error)

  /* "cgal4py/delaunay/tools.pyx":839
 *         leaf.write_to_file(fname)
 * 
 * def output_leaf(fname, leaf_id, idx_inf, verts, neigh, sort_verts, sort_cells,             # <<<<<<<<<<<<<<
 *                 idx_start, idx_stop):
 *     cdef char* cfname = fname
 */
  __pyx_tuple__68 = PyTuple_Pack(10, __pyx_n_s_fname, __pyx_n_s_leaf_id, __pyx_n_s_idx_inf, __pyx_n_s_verts, __pyx_n_s_neigh, __pyx_n_s_sort_verts, __pyx_n_s_sort_cells, __pyx_n_s_idx_start, __pyx_n_s_idx_stop, __pyx_n_s_cfname); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(9, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__68, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cgal4py_delaunay_tools_pyx, __pyx_n_s_output_leaf, 839, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) __PYX_ERR(0, 839, __pyx_L1_error)

  /* "cgal4py/delaunay/tools.pyx":850
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _add_leaf_uint32_uint32(np.uint32_t ndim, np.uint64_t ncells, np.uint32_t idx_inf,             # <<<<<<<<<<<<<<
 *                             np.ndarray[np.uint32_t, ndim=2] all_verts,
 *                             np.ndarray[np.uint32_t, ndim=2] all_neigh,
 */
  __pyx_tuple__70 = PyTuple_Pack(31, __pyx_n_s_ndim, __pyx_n_s_ncells, __pyx_n_s_idx_inf, __pyx_n_s_all_verts, __pyx_n_s_all_neigh, __pyx_n_s_leaf_start, __pyx_n_s_leaf_stop, __pyx_n_s_key_split_map, __pyx_n_s_val_split_map, __pyx_n_s_key_inf_map, __pyx_n_s_val_inf_map, __pyx_n_s_leaf_id, __pyx_n_s_leaf_idx_inf, __pyx_n_s_leaf_verts, __pyx_n_s_leaf_neigh, __pyx_n_s_leaf_sort_verts, __pyx_n_s_leaf_sort_cells, __pyx_n_s_t1, __pyx_n_s_t0, __pyx_n_s_num_leaves, __pyx_n_s_max_ncells, __pyx_n_s_n_split_map, __pyx_n_s_n_inf_map, __pyx_n_s_leaf_ncells, __pyx_n_s_leaf, __pyx_n_s_obj, __pyx_n_s_i, __pyx_n_s_val_split_map0, __pyx_n_s_key_split_map0, __pyx_n_s_val_inf_map0, __pyx_n_s_key_inf_map0); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(17, 0, 31, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cgal4py_delaunay_tools_pyx, __pyx_n_s_add_leaf_uint32_uint32, 850, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(0, 850, __pyx_L1_error)

  /* "cgal4py/delaunay/tools.pyx":940
 *     # return ncells, (key_split_map, val_split_map), (key_inf_map, val_inf_map)
 * 
 * def add_leaf(ndim, ncells, idx_inf, all_verts, all_neigh, leaf_start, leaf_stop,             # <<<<<<<<<<<<<<
 *              key_split_map, val_split_map, key_inf_map, val_inf_map,
 *              leaf_id, leaf_idx_inf, leaf_verts, leaf_neigh,
 */
  __pyx_tuple__72 = PyTuple_Pack(23, __pyx_n_s_ndim, __pyx_n_s_ncells, __pyx_n_s_idx_inf, __pyx_n_s_all_verts, __pyx_n_s_all_neigh, __pyx_n_s_leaf_start, __pyx_n_s_leaf_stop, __pyx_n_s_key_split_map, __pyx_n_s_val_split_map, __pyx_n_s_key_inf_map, __pyx_n_s_val_inf_map, __pyx_n_s_leaf_id, __pyx_n_s_leaf_idx_inf, __pyx_n_s_leaf_verts, __pyx_n_s_leaf_neigh, __pyx_n_s_leaf_sort_verts, __pyx_n_s_leaf_sort_cells, __pyx_n_s_dtype_comb, __pyx_n_s_dtype_leaf, __pyx_n_s_t0, __pyx_n_s_split_map, __pyx_n_s_inf_map, __pyx_n_s_t1); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(0, 940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(17, 0, 23, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__72, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cgal4py_delaunay_tools_pyx, __pyx_n_s_add_leaf, 940, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) __PYX_ERR(0, 940, __pyx_L1_error)

  /* "cgal4py/delaunay/tools.pyx":978
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _add_inf_uint32_uint32(np.uint32_t ndim, np.uint64_t ncells, np.uint32_t idx_inf,             # <<<<<<<<<<<<<<
 *                            np.ndarray[np.uint32_t, ndim=2] all_verts,
 *                            np.ndarray[np.uint32_t, ndim=2] all_neigh,
 */
  __pyx_tuple__74 = PyTuple_Pack(13, __pyx_n_s_ndim, __pyx_n_s_ncells, __pyx_n_s_idx_inf, __pyx_n_s_all_verts, __pyx_n_s_all_neigh, __pyx_n_s_leaf_start, __pyx_n_s_leaf_stop, __pyx_n_s_t1, __pyx_n_s_t0, __pyx_n_s_num_leaves, __pyx_n_s_max_ncells, __pyx_n_s_obj, __pyx_n_s_i); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(7, 0, 13, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cgal4py_delaunay_tools_pyx, __pyx_n_s_add_inf_uint32_uint32, 978, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) __PYX_ERR(0, 978, __pyx_L1_error)

  /* "cgal4py/delaunay/tools.pyx":1020
 *     return ncells
 * 
 * def add_inf(ndim, ncells, idx_inf, all_verts, all_neigh, leaf_start, leaf_stop):             # <<<<<<<<<<<<<<
 *     dtype_comb = type(idx_inf)
 *     t0 = time.time()
 */
  __pyx_tuple__76 = PyTuple_Pack(12, __pyx_n_s_ndim, __pyx_n_s_ncells, __pyx_n_s_idx_inf, __pyx_n_s_all_verts, __pyx_n_s_all_neigh, __pyx_n_s_leaf_start, __pyx_n_s_leaf_stop, __pyx_n_s_dtype_comb, __pyx_n_s_t0, __pyx_n_s_split_map, __pyx_n_s_inf_map, __pyx_n_s_t1); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(7, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cgal4py_delaunay_tools_pyx, __pyx_n_s_add_inf, 1020, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_modinit_global_init_code(void); /*proto*/
static int __Pyx_modinit_variable_export_code(void); /*proto*/
static int __Pyx_modinit_function_export_code(void); /*proto*/
static int __Pyx_modinit_type_init_code(void); /*proto*/
static int __Pyx_modinit_type_import_code(void); /*proto*/
static int __Pyx_modinit_variable_import_code(void); /*proto*/
static int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_7cgal4py_8delaunay_5tools_SerializedLeaf32) < 0) __PYX_ERR(0, 1034, __pyx_L1_error)
  __pyx_type_7cgal4py_8delaunay_5tools_SerializedLeaf32.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7cgal4py_8delaunay_5tools_SerializedLeaf32.tp_dictoffset && __pyx_type_7cgal4py_8delaunay_5tools_SerializedLeaf32.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7cgal4py_8delaunay_5tools_SerializedLeaf32.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "SerializedLeaf32", (PyObject *)&__pyx_type_7cgal4py_8delaunay_5tools_SerializedLeaf32) < 0) __PYX_ERR(0, 1034, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7cgal4py_8delaunay_5tools_SerializedLeaf32) < 0) __PYX_ERR(0, 1034, __pyx_L1_error)
  __pyx_ptype_7cgal4py_8delaunay_5tools_SerializedLeaf32 = &__pyx_type_7cgal4py_8delaunay_5tools_SerializedLeaf32;
  if (PyType_Ready(&__pyx_type_7cgal4py_8delaunay_5tools_SerializedLeaf64) < 0) __PYX_ERR(0, 1108, __pyx_L1_error)
  __pyx_type_7cgal4py_8delaunay_5tools_SerializedLeaf64.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7cgal4py_8delaunay_5tools_SerializedLeaf64.tp_dictoffset && __pyx_type_7cgal4py_8delaunay_5tools_SerializedLeaf64.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7cgal4py_8delaunay_5tools_SerializedLeaf64.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "SerializedLeaf64", (PyObject *)&__pyx_type_7cgal4py_8delaunay_5tools_SerializedLeaf64) < 0) __PYX_ERR(0, 1108, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7cgal4py_8delaunay_5tools_SerializedLeaf64) < 0) __PYX_ERR(0, 1108, __pyx_L1_error)
  __pyx_ptype_7cgal4py_8delaunay_5tools_SerializedLeaf64 = &__pyx_type_7cgal4py_8delaunay_5tools_SerializedLeaf64;
  __pyx_vtabptr_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 = &__pyx_vtable_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32;
  __pyx_vtable_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32._add_leaf32 = (void (*)(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *, struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *))__pyx_f_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32__add_leaf32;
  __pyx_vtable_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32._add_leaf64 = (void (*)(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 *, struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *))__pyx_f_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves32__add_leaf64;
  if (PyType_Ready(&__pyx_type_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32) < 0) __PYX_ERR(0, 1182, __pyx_L1_error)
  __pyx_type_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32.tp_dictoffset && __pyx_type_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32.tp_dict, __pyx_vtabptr_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32) < 0) __PYX_ERR(0, 1182, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "ConsolidatedLeaves32", (PyObject *)&__pyx_type_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32) < 0) __PYX_ERR(0, 1182, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32) < 0) __PYX_ERR(0, 1182, __pyx_L1_error)
  __pyx_ptype_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32 = &__pyx_type_7cgal4py_8delaunay_5tools_ConsolidatedLeaves32;
  __pyx_vtabptr_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 = &__pyx_vtable_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64;
  __pyx_vtable_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64._add_leaf32 = (void (*)(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *, struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf32 *))__pyx_f_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64__add_leaf32;
  __pyx_vtable_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64._add_leaf64 = (void (*)(struct __pyx_obj_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 *, struct __pyx_obj_7cgal4py_8delaunay_5tools_SerializedLeaf64 *))__pyx_f_7cgal4py_8delaunay_5tools_20ConsolidatedLeaves64__add_leaf64;
  if (PyType_Ready(&__pyx_type_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64) < 0) __PYX_ERR(0, 1282, __pyx_L1_error)
  __pyx_type_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64.tp_dictoffset && __pyx_type_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64.tp_dict, __pyx_vtabptr_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64) < 0) __PYX_ERR(0, 1282, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "ConsolidatedLeaves64", (PyObject *)&__pyx_type_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64) < 0) __PYX_ERR(0, 1282, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64) < 0) __PYX_ERR(0, 1282, __pyx_L1_error)
  __pyx_ptype_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64 = &__pyx_type_7cgal4py_8delaunay_5tools_ConsolidatedLeaves64;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(3, 9, __pyx_L1_error)
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), 0); if (unlikely(!__pyx_ptype_7cpython_4bool_bool)) __PYX_ERR(4, 8, __pyx_L1_error)
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), 0); if (unlikely(!__pyx_ptype_7cpython_7complex_complex)) __PYX_ERR(5, 15, __pyx_L1_error)
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) __PYX_ERR(2, 164, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) __PYX_ERR(2, 186, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) __PYX_ERR(2, 190, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) __PYX_ERR(2, 199, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) __PYX_ERR(2, 872, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (!(defined(__cplusplus)) || (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ > 4)))
    #define CYTHON_SMALL_CODE __attribute__((optimize("Os")))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC inittools(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC inittools(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_tools(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_tools(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        result = PyDict_SetItemString(moddict, to_name, value);
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static int __pyx_pymod_exec_tools(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_tools(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("tools", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_cgal4py__delaunay__tools) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "cgal4py.delaunay.tools")) {
      if (unlikely(PyDict_SetItemString(modules, "cgal4py.delaunay.tools", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "cgal4py/delaunay/tools.pyx":1
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * import copy
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":3
 * import numpy as np
 * cimport numpy as np
 * import copy             # <<<<<<<<<<<<<<
 * import time
 * cimport cython
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_copy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_copy, __pyx_t_1) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":4
 * cimport numpy as np
 * import copy
 * import time             # <<<<<<<<<<<<<<
 * cimport cython
 * from libcpp.vector cimport vector
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_time, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_time, __pyx_t_1) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":16
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_intersect_sph_box(np.ndarray[np.float64_t, ndim=1] c, np.float64_t r,             # <<<<<<<<<<<<<<
 *                          np.ndarray[np.float64_t, ndim=1] le,
 *                          np.ndarray[np.float64_t, ndim=1] re):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7cgal4py_8delaunay_5tools_1py_intersect_sph_box, NULL, __pyx_n_s_cgal4py_delaunay_tools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_intersect_sph_box, __pyx_t_1) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":41
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_arg_tLT(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                np.ndarray[np.uint32_t, ndim=2] idx_verts, int i1, int i2):
 *     r"""Determine if one cell is less than the other by comparing
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7cgal4py_8delaunay_5tools_3py_arg_tLT, NULL, __pyx_n_s_cgal4py_delaunay_tools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_arg_tLT, __pyx_t_1) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":69
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_tEQ(np.ndarray[np.int64_t, ndim=2] cells, int i1, int i2):             # <<<<<<<<<<<<<<
 *     r"""Determine if one cell is equivalent to the other by comparing
 *     the (sorted) vertices in each cell.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7cgal4py_8delaunay_5tools_5py_tEQ, NULL, __pyx_n_s_cgal4py_delaunay_tools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_tEQ, __pyx_t_1) < 0) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":94
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_tGT(np.ndarray[np.int64_t, ndim=2] cells, int i1, int i2):             # <<<<<<<<<<<<<<
 *     r"""Determine if one cell is greater than the other by comparing
 *     the (sorted) vertices in each cell.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7cgal4py_8delaunay_5tools_7py_tGT, NULL, __pyx_n_s_cgal4py_delaunay_tools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_tGT, __pyx_t_1) < 0) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":119
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_tLT(np.ndarray[np.int64_t, ndim=2] cells, int i1, int i2):             # <<<<<<<<<<<<<<
 *     r"""Determine if one cell is less than the other by comparing
 *     the (sorted) vertices in each cell.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7cgal4py_8delaunay_5tools_9py_tLT, NULL, __pyx_n_s_cgal4py_delaunay_tools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_tLT, __pyx_t_1) < 0) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":177
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_sortCellVerts(cells, neigh):             # <<<<<<<<<<<<<<
 *     r"""Sort the the vertices and neighbors for a single cell such that the
 *     vertices are in descending order.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7cgal4py_8delaunay_5tools_11py_sortCellVerts, NULL, __pyx_n_s_cgal4py_delaunay_tools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_sortCellVerts, __pyx_t_1) < 0) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":206
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _sortSerializedTess_int32(np.ndarray[np.int32_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                               np.ndarray[np.int32_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7cgal4py_8delaunay_5tools_13_sortSerializedTess_int32, NULL, __pyx_n_s_cgal4py_delaunay_tools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sortSerializedTess_int32, __pyx_t_1) < 0) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":216
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _sortSerializedTess_uint32(np.ndarray[np.uint32_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                np.ndarray[np.uint32_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7cgal4py_8delaunay_5tools_15_sortSerializedTess_uint32, NULL, __pyx_n_s_cgal4py_delaunay_tools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sortSerializedTess_uint32, __pyx_t_1) < 0) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":226
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _sortSerializedTess_int64(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                               np.ndarray[np.int64_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7cgal4py_8delaunay_5tools_17_sortSerializedTess_int64, NULL, __pyx_n_s_cgal4py_delaunay_tools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sortSerializedTess_int64, __pyx_t_1) < 0) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":236
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _sortSerializedTess_uint64(np.ndarray[np.uint64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                np.ndarray[np.uint64_t, ndim=2] neigh):
 *     cdef uint64_t ncells = <uint64_t>cells.shape[0]
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7cgal4py_8delaunay_5tools_19_sortSerializedTess_uint64, NULL, __pyx_n_s_cgal4py_delaunay_tools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sortSerializedTess_uint64, __pyx_t_1) < 0) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":245
 *         sortSerializedTess[uint64_t](&cells[0,0], &neigh[0,0], ncells, ndim)
 * 
 * def py_sortSerializedTess(cells, neigh):             # <<<<<<<<<<<<<<
 *     r"""Sort serialized triangulation such that the verts for each cell are in
 *     descending order, but the cells are sorted in ascending order by the verts.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7cgal4py_8delaunay_5tools_21py_sortSerializedTess, NULL, __pyx_n_s_cgal4py_delaunay_tools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_sortSerializedTess, __pyx_t_1) < 0) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":268
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_quickSort_tess(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                       np.ndarray[np.int64_t, ndim=2] neigh,
 *                       np.ndarray[np.int64_t, ndim=1] idx,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7cgal4py_8delaunay_5tools_23py_quickSort_tess, NULL, __pyx_n_s_cgal4py_delaunay_tools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_quickSort_tess, __pyx_t_1) < 0) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":295
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_partition_tess(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                       np.ndarray[np.int64_t, ndim=2] neigh,
 *                       np.ndarray[np.int64_t, ndim=1] idx,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7cgal4py_8delaunay_5tools_25py_partition_tess, NULL, __pyx_n_s_cgal4py_delaunay_tools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_partition_tess, __pyx_t_1) < 0) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":363
 *         arg_sortCellVerts[uint32_t](&cells[0,0], &idx_verts[0,0], ncells, ndim)
 * 
 * def py_arg_sortCellVerts(cells):             # <<<<<<<<<<<<<<
 *     r"""Sort the the vertices and neighbors for a single cell such that the
 *     vertices are in descending order.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7cgal4py_8delaunay_5tools_27py_arg_sortCellVerts, NULL, __pyx_n_s_cgal4py_delaunay_tools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_arg_sortCellVerts, __pyx_t_1) < 0) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":399
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _arg_sortSerializedTess_int32(np.ndarray[np.int32_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                   np.ndarray[np.uint32_t, ndim=2] idx_verts,
 *                                   np.ndarray[np.uint64_t, ndim=1] idx_cells):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7cgal4py_8delaunay_5tools_29_arg_sortSerializedTess_int32, NULL, __pyx_n_s_cgal4py_delaunay_tools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_arg_sortSerializedTess_int32, __pyx_t_1) < 0) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":409
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _arg_sortSerializedTess_uint32(np.ndarray[np.uint32_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                    np.ndarray[np.uint32_t, ndim=2] idx_verts,
 *                                    np.ndarray[np.uint64_t, ndim=1] idx_cells):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7cgal4py_8delaunay_5tools_31_arg_sortSerializedTess_uint32, NULL, __pyx_n_s_cgal4py_delaunay_tools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_arg_sortSerializedTess_uint32, __pyx_t_1) < 0) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":419
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _arg_sortSerializedTess_int64(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                   np.ndarray[np.uint32_t, ndim=2] idx_verts,
 *                                   np.ndarray[np.uint64_t, ndim=1] idx_cells):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7cgal4py_8delaunay_5tools_33_arg_sortSerializedTess_int64, NULL, __pyx_n_s_cgal4py_delaunay_tools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_arg_sortSerializedTess_int64, __pyx_t_1) < 0) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":429
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _arg_sortSerializedTess_uint64(np.ndarray[np.uint64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                                    np.ndarray[np.uint32_t, ndim=2] idx_verts,
 *                                    np.ndarray[np.uint64_t, ndim=1] idx_cells):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7cgal4py_8delaunay_5tools_35_arg_sortSerializedTess_uint64, NULL, __pyx_n_s_cgal4py_delaunay_tools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_arg_sortSerializedTess_uint64, __pyx_t_1) < 0) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":438
 *                                          &idx_verts[0,0], &idx_cells[0])
 * 
 * def py_arg_sortSerializedTess(cells):             # <<<<<<<<<<<<<<
 *     r"""Sort serialized triangulation such that the verts for each cell are in
 *     descending order, but the cells are sorted in ascending order by the verts.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7cgal4py_8delaunay_5tools_37py_arg_sortSerializedTess, NULL, __pyx_n_s_cgal4py_delaunay_tools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_arg_sortSerializedTess, __pyx_t_1) < 0) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":480
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_arg_quickSort_tess(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                           np.ndarray[np.uint32_t, ndim=2] idx_verts,
 *                           np.ndarray[np.uint64_t, ndim=1] idx_cells,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7cgal4py_8delaunay_5tools_39py_arg_quickSort_tess, NULL, __pyx_n_s_cgal4py_delaunay_tools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_arg_quickSort_tess, __pyx_t_1) < 0) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":509
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def py_arg_partition_tess(np.ndarray[np.int64_t, ndim=2] cells,             # <<<<<<<<<<<<<<
 *                           np.ndarray[np.uint32_t, ndim=2] idx_verts,
 *                           np.ndarray[np.uint64_t, ndim=1] idx_cells,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7cgal4py_8delaunay_5tools_41py_arg_partition_tess, NULL, __pyx_n_s_cgal4py_delaunay_tools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_arg_partition_tess, __pyx_t_1) < 0) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":613
 *         swap_cells[uint64_t](&verts[0,0], &neigh[0,0], ndim, i1, i2)
 * 
 * def py_swap_cells(verts, neigh, i1, i2):             # <<<<<<<<<<<<<<
 *     r"""Swap the verts and neighbors for two cells.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7cgal4py_8delaunay_5tools_43py_swap_cells, NULL, __pyx_n_s_cgal4py_delaunay_tools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_swap_cells, __pyx_t_1) < 0) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":768
 *     return ncells
 * 
 * def consolidate_leaves(ndim, idx_inf, serial, leaf_start, leaf_stop):             # <<<<<<<<<<<<<<
 *     dtype_comb = type(idx_inf)
 *     dtype_leaf = serial[0][0].dtype
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7cgal4py_8delaunay_5tools_45consolidate_leaves, NULL, __pyx_n_s_cgal4py_delaunay_tools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_consolidate_leaves, __pyx_t_1) < 0) __PYX_ERR(0, 768, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":839
 *         leaf.write_to_file(fname)
 * 
 * def output_leaf(fname, leaf_id, idx_inf, verts, neigh, sort_verts, sort_cells,             # <<<<<<<<<<<<<<
 *                 idx_start, idx_stop):
 *     cdef char* cfname = fname
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7cgal4py_8delaunay_5tools_47output_leaf, NULL, __pyx_n_s_cgal4py_delaunay_tools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_output_leaf, __pyx_t_1) < 0) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":850
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _add_leaf_uint32_uint32(np.uint32_t ndim, np.uint64_t ncells, np.uint32_t idx_inf,             # <<<<<<<<<<<<<<
 *                             np.ndarray[np.uint32_t, ndim=2] all_verts,
 *                             np.ndarray[np.uint32_t, ndim=2] all_neigh,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7cgal4py_8delaunay_5tools_49_add_leaf_uint32_uint32, NULL, __pyx_n_s_cgal4py_delaunay_tools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_add_leaf_uint32_uint32, __pyx_t_1) < 0) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":940
 *     # return ncells, (key_split_map, val_split_map), (key_inf_map, val_inf_map)
 * 
 * def add_leaf(ndim, ncells, idx_inf, all_verts, all_neigh, leaf_start, leaf_stop,             # <<<<<<<<<<<<<<
 *              key_split_map, val_split_map, key_inf_map, val_inf_map,
 *              leaf_id, leaf_idx_inf, leaf_verts, leaf_neigh,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7cgal4py_8delaunay_5tools_51add_leaf, NULL, __pyx_n_s_cgal4py_delaunay_tools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_add_leaf, __pyx_t_1) < 0) __PYX_ERR(0, 940, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":978
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def _add_inf_uint32_uint32(np.uint32_t ndim, np.uint64_t ncells, np.uint32_t idx_inf,             # <<<<<<<<<<<<<<
 *                            np.ndarray[np.uint32_t, ndim=2] all_verts,
 *                            np.ndarray[np.uint32_t, ndim=2] all_neigh,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7cgal4py_8delaunay_5tools_53_add_inf_uint32_uint32, NULL, __pyx_n_s_cgal4py_delaunay_tools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_add_inf_uint32_uint32, __pyx_t_1) < 0) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":1020
 *     return ncells
 * 
 * def add_inf(ndim, ncells, idx_inf, all_verts, all_neigh, leaf_start, leaf_stop):             # <<<<<<<<<<<<<<
 *     dtype_comb = type(idx_inf)
 *     t0 = time.time()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7cgal4py_8delaunay_5tools_55add_inf, NULL, __pyx_n_s_cgal4py_delaunay_tools); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_add_inf, __pyx_t_1) < 0) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cgal4py/delaunay/tools.pyx":1
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * import copy
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../miniconda3/envs/py36/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1008
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init cgal4py.delaunay.tools", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init cgal4py.delaunay.tools");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* IsLittleEndian */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t < '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* BufferGetAndValidate */
  static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (unlikely(info->buf == NULL)) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}
static void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static int __Pyx__GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  buf->buf = NULL;
  if (unlikely(__Pyx_GetBuffer(obj, buf, flags) == -1)) {
    __Pyx_ZeroBuffer(buf);
    return -1;
  }
  if (unlikely(buf->ndim != nd)) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if (unlikely((unsigned)buf->itemsize != dtype->size)) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_SafeReleaseBuffer(buf);
  return -1;
}

/* ExtTypeTest */
  static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* PyErrFetchRestore */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
  static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyIntBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) {
            Py_RETURN_TRUE;
        } else {
            Py_RETURN_FALSE;
        }
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                #if PyLong_SHIFT < 30 && PyLong_SHIFT != 15
                default: return PyLong_Type.tp_richcompare(op1, op2, Py_EQ);
                #else
                default: Py_RETURN_FALSE;
                #endif
            }
        }
            if (a == b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            if ((double)a == (double)b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    return PyObject_RichCompare(op1, op2, Py_EQ);
}
#endif

/* GetItemInt */
  static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* GetModuleGlobalName */
  static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    if (likely(result)) {
        Py_INCREF(result);
    } else if (unlikely(PyErr_Occurred())) {
        result = NULL;
    } else {
#else
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyCFunctionFastCall */
      #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
      #if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
      #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
      #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
      #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* RaiseException */
      #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* BufferFallbackError */
      static void __Pyx_RaiseBufferFallbackError(void) {
  PyErr_SetString(PyExc_ValueError,
     "Buffer acquisition failed on assignment; and then reacquiring the old buffer failed too!");
}

/* BufferIndexError */
      static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

/* PyObjectCallNoArg */
      #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyIntBinop */
        #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* RaiseTooManyValuesToUnpack */
        static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
        static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
        static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
        static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* DictGetItem */
        #if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* RaiseNoneIterError */
        static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* SaveResetException */
        #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if PY_VERSION_HEX >= 0x030700A2
    *type = tstate->exc_state.exc_type;
    *value = tstate->exc_state.exc_value;
    *tb = tstate->exc_state.exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if PY_VERSION_HEX >= 0x030700A2
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = type;
    tstate->exc_state.exc_value = value;
    tstate->exc_state.exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
        #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
        #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if PY_VERSION_HEX >= 0x030700A2
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = local_type;
    tstate->exc_state.exc_value = local_value;
    tstate->exc_state.exc_traceback = local_tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObject_GenericGetAttrNoDict */
          #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
          #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetupReduce */
          static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* SetVTable */
          static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* Import */
          static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* CLineInTraceback */
          #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
          static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
          #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
        else if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view);
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


          /* CIntFromPyVerify */
          #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value) {
    const int64_t neg_one = (int64_t) -1, const_zero = (int64_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int64_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_uint32(npy_uint32 value) {
    const npy_uint32 neg_one = (npy_uint32) -1, const_zero = (npy_uint32) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(npy_uint32) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(npy_uint32) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(npy_uint32) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(npy_uint32) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(npy_uint32) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(npy_uint32),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value) {
    const uint64_t neg_one = (uint64_t) -1, const_zero = (uint64_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint64_t),
                                     little, !is_unsigned);
    }
}

/* Print */
          #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* CIntToPy */
          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_int64(npy_int64 value) {
    const npy_int64 neg_one = (npy_int64) -1, const_zero = (npy_int64) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(npy_int64) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(npy_int64) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(npy_int64) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(npy_int64) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(npy_int64) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(npy_int64),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_uint64(npy_uint64 value) {
    const npy_uint64 neg_one = (npy_uint64) -1, const_zero = (npy_uint64) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(npy_uint64) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(npy_uint64) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(npy_uint64) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(npy_uint64) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(npy_uint64) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(npy_uint64),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint32_t(uint32_t value) {
    const uint32_t neg_one = (uint32_t) -1, const_zero = (uint32_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint32_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint32_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint32_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint32_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint32_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint32_t),
                                     little, !is_unsigned);
    }
}

/* Declarations */
          #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
          #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0, -1);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
          #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
          #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0, -1);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
          static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
          static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *x) {
    const int64_t neg_one = (int64_t) -1, const_zero = (int64_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int64_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int64_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(int64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) >= 2 * PyLong_SHIFT) {
                            return (int64_t) (((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) >= 3 * PyLong_SHIFT) {
                            return (int64_t) (((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) >= 4 * PyLong_SHIFT) {
                            return (int64_t) (((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int64_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int64_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int64_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int64_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int64_t) (((int64_t)-1)*(((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int64_t) ((((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int64_t) (((int64_t)-1)*(((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int64_t) ((((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int64_t) (((int64_t)-1)*(((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int64_t) ((((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int64_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int64_t) -1;
        }
    } else {
        int64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int64_t) -1;
        val = __Pyx_PyInt_As_int64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int64_t");
    return (int64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int64_t");
    return (int64_t) -1;
}

/* CIntFromPy */
          static CYTHON_INLINE npy_uint32 __Pyx_PyInt_As_npy_uint32(PyObject *x) {
    const npy_uint32 neg_one = (npy_uint32) -1, const_zero = (npy_uint32) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(npy_uint32) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(npy_uint32, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (npy_uint32) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (npy_uint32) 0;
                case  1: __PYX_VERIFY_RETURN_INT(npy_uint32, digit, digits[0])
                case 2:
                    if (8 * sizeof(npy_uint32) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint32, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint32) >= 2 * PyLong_SHIFT) {
                            return (npy_uint32) (((((npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(npy_uint32) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint32, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint32) >= 3 * PyLong_SHIFT) {
                            return (npy_uint32) (((((((npy_uint32)digits[2]) << PyLong_SHIFT) | (npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(npy_uint32) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint32, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint32) >= 4 * PyLong_SHIFT) {
                            return (npy_uint32) (((((((((npy_uint32)digits[3]) << PyLong_SHIFT) | (npy_uint32)digits[2]) << PyLong_SHIFT) | (npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (npy_uint32) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(npy_uint32) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_uint32, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(npy_uint32) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_uint32, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (npy_uint32) 0;
                case -1: __PYX_VERIFY_RETURN_INT(npy_uint32, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(npy_uint32,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(npy_uint32) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint32, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint32) - 1 > 2 * PyLong_SHIFT) {
                            return (npy_uint32) (((npy_uint32)-1)*(((((npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(npy_uint32) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint32, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint32) - 1 > 2 * PyLong_SHIFT) {
                            return (npy_uint32) ((((((npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(npy_uint32) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint32, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint32) - 1 > 3 * PyLong_SHIFT) {
                            return (npy_uint32) (((npy_uint32)-1)*(((((((npy_uint32)digits[2]) << PyLong_SHIFT) | (npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(npy_uint32) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint32, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint32) - 1 > 3 * PyLong_SHIFT) {
                            return (npy_uint32) ((((((((npy_uint32)digits[2]) << PyLong_SHIFT) | (npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(npy_uint32) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint32, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint32) - 1 > 4 * PyLong_SHIFT) {
                            return (npy_uint32) (((npy_uint32)-1)*(((((((((npy_uint32)digits[3]) << PyLong_SHIFT) | (npy_uint32)digits[2]) << PyLong_SHIFT) | (npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(npy_uint32) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint32, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint32) - 1 > 4 * PyLong_SHIFT) {
                            return (npy_uint32) ((((((((((npy_uint32)digits[3]) << PyLong_SHIFT) | (npy_uint32)digits[2]) << PyLong_SHIFT) | (npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(npy_uint32) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_uint32, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(npy_uint32) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_uint32, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            npy_uint32 val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (npy_uint32) -1;
        }
    } else {
        npy_uint32 val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (npy_uint32) -1;
        val = __Pyx_PyInt_As_npy_uint32(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to npy_uint32");
    return (npy_uint32) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to npy_uint32");
    return (npy_uint32) -1;
}

/* CIntFromPy */
          static CYTHON_INLINE npy_uint64 __Pyx_PyInt_As_npy_uint64(PyObject *x) {
    const npy_uint64 neg_one = (npy_uint64) -1, const_zero = (npy_uint64) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(npy_uint64) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(npy_uint64, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (npy_uint64) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (npy_uint64) 0;
                case  1: __PYX_VERIFY_RETURN_INT(npy_uint64, digit, digits[0])
                case 2:
                    if (8 * sizeof(npy_uint64) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint64, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint64) >= 2 * PyLong_SHIFT) {
                            return (npy_uint64) (((((npy_uint64)digits[1]) << PyLong_SHIFT) | (npy_uint64)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(npy_uint64) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint64, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint64) >= 3 * PyLong_SHIFT) {
                            return (npy_uint64) (((((((npy_uint64)digits[2]) << PyLong_SHIFT) | (npy_uint64)digits[1]) << PyLong_SHIFT) | (npy_uint64)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(npy_uint64) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint64, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint64) >= 4 * PyLong_SHIFT) {
                            return (npy_uint64) (((((((((npy_uint64)digits[3]) << PyLong_SHIFT) | (npy_uint64)digits[2]) << PyLong_SHIFT) | (npy_uint64)digits[1]) << PyLong_SHIFT) | (npy_uint64)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (npy_uint64) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(npy_uint64) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_uint64, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(npy_uint64) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_uint64, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (npy_uint64) 0;
                case -1: __PYX_VERIFY_RETURN_INT(npy_uint64, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(npy_uint64,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(npy_uint64) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint64, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint64) - 1 > 2 * PyLong_SHIFT) {
                            return (npy_uint64) (((npy_uint64)-1)*(((((npy_uint64)digits[1]) << PyLong_SHIFT) | (npy_uint64)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(npy_uint64) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint64, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint64) - 1 > 2 * PyLong_SHIFT) {
                            return (npy_uint64) ((((((npy_uint64)digits[1]) << PyLong_SHIFT) | (npy_uint64)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(npy_uint64) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint64, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint64) - 1 > 3 * PyLong_SHIFT) {
                            return (npy_uint64) (((npy_uint64)-1)*(((((((npy_uint64)digits[2]) << PyLong_SHIFT) | (npy_uint64)digits[1]) << PyLong_SHIFT) | (npy_uint64)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(npy_uint64) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint64, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint64) - 1 > 3 * PyLong_SHIFT) {
                            return (npy_uint64) ((((((((npy_uint64)digits[2]) << PyLong_SHIFT) | (npy_uint64)digits[1]) << PyLong_SHIFT) | (npy_uint64)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(npy_uint64) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint64, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint64) - 1 > 4 * PyLong_SHIFT) {
                            return (npy_uint64) (((npy_uint64)-1)*(((((((((npy_uint64)digits[3]) << PyLong_SHIFT) | (npy_uint64)digits[2]) << PyLong_SHIFT) | (npy_uint64)digits[1]) << PyLong_SHIFT) | (npy_uint64)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(npy_uint64) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint64, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint64) - 1 > 4 * PyLong_SHIFT) {
                            return (npy_uint64) ((((((((((npy_uint64)digits[3]) << PyLong_SHIFT) | (npy_uint64)digits[2]) << PyLong_SHIFT) | (npy_uint64)digits[1]) << PyLong_SHIFT) | (npy_uint64)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(npy_uint64) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_uint64, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(npy_uint64) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_uint64, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            npy_uint64 val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (npy_uint64) -1;
        }
    } else {
        npy_uint64 val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (npy_uint64) -1;
        val = __Pyx_PyInt_As_npy_uint64(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to npy_uint64");
    return (npy_uint64) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to npy_uint64");
    return (npy_uint64) -1;
}

/* CIntFromPy */
          static CYTHON_INLINE uint32_t __Pyx_PyInt_As_uint32_t(PyObject *x) {
    const uint32_t neg_one = (uint32_t) -1, const_zero = (uint32_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint32_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint32_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint32_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint32_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint32_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint32_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) >= 2 * PyLong_SHIFT) {
                            return (uint32_t) (((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint32_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) >= 3 * PyLong_SHIFT) {
                            return (uint32_t) (((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint32_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) >= 4 * PyLong_SHIFT) {
                            return (uint32_t) (((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint32_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint32_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint32_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint32_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint32_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(uint32_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint32_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint32_t) (((uint32_t)-1)*(((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint32_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint32_t) ((((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint32_t) (((uint32_t)-1)*(((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint32_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint32_t) ((((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint32_t) (((uint32_t)-1)*(((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint32_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint32_t) ((((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint32_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint32_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint32_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint32_t) -1;
        }
    } else {
        uint32_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint32_t) -1;
        val = __Pyx_PyInt_As_uint32_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint32_t");
    return (uint32_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint32_t");
    return (uint32_t) -1;
}

/* CIntFromPy */
          static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *x) {
    const uint64_t neg_one = (uint64_t) -1, const_zero = (uint64_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint64_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint64_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 2 * PyLong_SHIFT) {
                            return (uint64_t) (((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 3 * PyLong_SHIFT) {
                            return (uint64_t) (((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 4 * PyLong_SHIFT) {
                            return (uint64_t) (((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint64_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint64_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(uint64_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint64_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint64_t) ((((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint64_t) ((((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint64_t) ((((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint64_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint64_t) -1;
        }
    } else {
        uint64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint64_t) -1;
        val = __Pyx_PyInt_As_uint64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint64_t");
    return (uint64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint64_t");
    return (uint64_t) -1;
}

/* CIntFromPy */
          static CYTHON_INLINE npy_int64 __Pyx_PyInt_As_npy_int64(PyObject *x) {
    const npy_int64 neg_one = (npy_int64) -1, const_zero = (npy_int64) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(npy_int64) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(npy_int64, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (npy_int64) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (npy_int64) 0;
                case  1: __PYX_VERIFY_RETURN_INT(npy_int64, digit, digits[0])
                case 2:
                    if (8 * sizeof(npy_int64) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int64) >= 2 * PyLong_SHIFT) {
                            return (npy_int64) (((((npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(npy_int64) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int64) >= 3 * PyLong_SHIFT) {
                            return (npy_int64) (((((((npy_int64)digits[2]) << PyLong_SHIFT) | (npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(npy_int64) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int64) >= 4 * PyLong_SHIFT) {
                            return (npy_int64) (((((((((npy_int64)digits[3]) << PyLong_SHIFT) | (npy_int64)digits[2]) << PyLong_SHIFT) | (npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (npy_int64) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(npy_int64) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_int64, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(npy_int64) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_int64, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (npy_int64) 0;
                case -1: __PYX_VERIFY_RETURN_INT(npy_int64, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(npy_int64,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(npy_int64) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int64) - 1 > 2 * PyLong_SHIFT) {
                            return (npy_int64) (((npy_int64)-1)*(((((npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(npy_int64) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int64) - 1 > 2 * PyLong_SHIFT) {
                            return (npy_int64) ((((((npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(npy_int64) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int64) - 1 > 3 * PyLong_SHIFT) {
                            return (npy_int64) (((npy_int64)-1)*(((((((npy_int64)digits[2]) << PyLong_SHIFT) | (npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(npy_int64) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int64) - 1 > 3 * PyLong_SHIFT) {
                            return (npy_int64) ((((((((npy_int64)digits[2]) << PyLong_SHIFT) | (npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(npy_int64) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int64) - 1 > 4 * PyLong_SHIFT) {
                            return (npy_int64) (((npy_int64)-1)*(((((((((npy_int64)digits[3]) << PyLong_SHIFT) | (npy_int64)digits[2]) << PyLong_SHIFT) | (npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(npy_int64) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int64) - 1 > 4 * PyLong_SHIFT) {
                            return (npy_int64) ((((((((((npy_int64)digits[3]) << PyLong_SHIFT) | (npy_int64)digits[2]) << PyLong_SHIFT) | (npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(npy_int64) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_int64, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(npy_int64) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_int64, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            npy_int64 val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (npy_int64) -1;
        }
    } else {
        npy_int64 val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (npy_int64) -1;
        val = __Pyx_PyInt_As_npy_int64(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to npy_int64");
    return (npy_int64) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to npy_int64");
    return (npy_int64) -1;
}

/* CIntFromPy */
          static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* PrintOne */
          #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* FastTypeChecks */
          #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
          static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
          #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
          #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
          static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
